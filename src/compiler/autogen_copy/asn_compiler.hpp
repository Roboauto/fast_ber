/* Generated by re2c 1.1.1 */
#line 1 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
// A Bison parser, made by GNU Bison 3.3.2.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015, 2018-2019 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.

// Undocumented macros, especially those whose name start with YY_,
// are private implementation details.  Do not rely on them.





// //                    "%code requires" blocks.
#line 10 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:431

    #include "fast_ber/compiler/CompilerTypes.hpp"
    #include "fast_ber/compiler/Logging.hpp"

#line 47 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:431

# include <cassert>
# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>

#if defined __cplusplus
# define YY_CPLUSPLUS __cplusplus
#else
# define YY_CPLUSPLUS 199711L
#endif

// Support move semantics when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_MOVE           std::move
# define YY_MOVE_OR_COPY   move
# define YY_MOVE_REF(Type) Type&&
# define YY_RVREF(Type)    Type&&
# define YY_COPY(Type)     Type
#else
# define YY_MOVE
# define YY_MOVE_OR_COPY   copy
# define YY_MOVE_REF(Type) Type&
# define YY_RVREF(Type)    const Type&
# define YY_COPY(Type)     const Type&
#endif

// Support noexcept when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_NOEXCEPT noexcept
# define YY_NOTHROW
#else
# define YY_NOEXCEPT
# define YY_NOTHROW throw ()
#endif

// Support constexpr when possible.
#if 201703 <= YY_CPLUSPLUS
# define YY_CONSTEXPR constexpr
#else
# define YY_CONSTEXPR
#endif

#include <typeinfo>
#ifndef YYASSERT
# include <cassert>
# define YYASSERT assert
#endif


#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif


namespace yy {
#line 163 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:431

  /// A point in a source file.
  class position
  {
  public:
    /// Construct a position.
    explicit position (std::string* f = YY_NULLPTR,
                       unsigned l = 1u,
                       unsigned c = 1u)
      : filename (f)
      , line (l)
      , column (c)
    {}


    /// Initialization.
    void initialize (std::string* fn = YY_NULLPTR,
                     unsigned l = 1u,
                     unsigned c = 1u)
    {
      filename = fn;
      line = l;
      column = c;
    }

    /** \name Line and Column related manipulators
     ** \{ */
    /// (line related) Advance to the COUNT next lines.
    void lines (int count = 1)
    {
      if (count)
        {
          column = 1u;
          line = add_ (line, count, 1);
        }
    }

    /// (column related) Advance to the COUNT next columns.
    void columns (int count = 1)
    {
      column = add_ (column, count, 1);
    }
    /** \} */

    /// File name to which this position refers.
    std::string* filename;
    /// Current line number.
    unsigned line;
    /// Current column number.
    unsigned column;

  private:
    /// Compute max (min, lhs+rhs).
    static unsigned add_ (unsigned lhs, int rhs, int min)
    {
      return static_cast<unsigned> (std::max (min,
                                              static_cast<int> (lhs) + rhs));
    }
  };

  /// Add \a width columns, in place.
  inline position&
  operator+= (position& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns.
  inline position
  operator+ (position res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns, in place.
  inline position&
  operator-= (position& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns.
  inline position
  operator- (position res, int width)
  {
    return res -= width;
  }

  /// Compare two position objects.
  inline bool
  operator== (const position& pos1, const position& pos2)
  {
    return (pos1.line == pos2.line
            && pos1.column == pos2.column
            && (pos1.filename == pos2.filename
                || (pos1.filename && pos2.filename
                    && *pos1.filename == *pos2.filename)));
  }

  /// Compare two position objects.
  inline bool
  operator!= (const position& pos1, const position& pos2)
  {
    return !(pos1 == pos2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param pos a reference to the position to redirect
   */
  template <typename YYChar>
  std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const position& pos)
  {
    if (pos.filename)
      ostr << *pos.filename << ':';
    return ostr << pos.line << '.' << pos.column;
  }

  /// Two points in a source file.
  class location
  {
  public:

    /// Construct a location from \a b to \a e.
    location (const position& b, const position& e)
      : begin (b)
      , end (e)
    {}

    /// Construct a 0-width location in \a p.
    explicit location (const position& p = position ())
      : begin (p)
      , end (p)
    {}

    /// Construct a 0-width location in \a f, \a l, \a c.
    explicit location (std::string* f,
                       unsigned l = 1u,
                       unsigned c = 1u)
      : begin (f, l, c)
      , end (f, l, c)
    {}


    /// Initialization.
    void initialize (std::string* f = YY_NULLPTR,
                     unsigned l = 1u,
                     unsigned c = 1u)
    {
      begin.initialize (f, l, c);
      end = begin;
    }

    /** \name Line and Column related manipulators
     ** \{ */
  public:
    /// Reset initial location to final location.
    void step ()
    {
      begin = end;
    }

    /// Extend the current location to the COUNT next columns.
    void columns (int count = 1)
    {
      end += count;
    }

    /// Extend the current location to the COUNT next lines.
    void lines (int count = 1)
    {
      end.lines (count);
    }
    /** \} */


  public:
    /// Beginning of the located region.
    position begin;
    /// End of the located region.
    position end;
  };

  /// Join two locations, in place.
  inline location& operator+= (location& res, const location& end)
  {
    res.end = end.end;
    return res;
  }

  /// Join two locations.
  inline location operator+ (location res, const location& end)
  {
    return res += end;
  }

  /// Add \a width columns to the end position, in place.
  inline location& operator+= (location& res, int width)
  {
    res.columns (width);
    return res;
  }

  /// Add \a width columns to the end position.
  inline location operator+ (location res, int width)
  {
    return res += width;
  }

  /// Subtract \a width columns to the end position, in place.
  inline location& operator-= (location& res, int width)
  {
    return res += -width;
  }

  /// Subtract \a width columns to the end position.
  inline location operator- (location res, int width)
  {
    return res -= width;
  }

  /// Compare two location objects.
  inline bool
  operator== (const location& loc1, const location& loc2)
  {
    return loc1.begin == loc2.begin && loc1.end == loc2.end;
  }

  /// Compare two location objects.
  inline bool
  operator!= (const location& loc1, const location& loc2)
  {
    return !(loc1 == loc2);
  }

  /** \brief Intercept output stream redirection.
   ** \param ostr the destination output stream
   ** \param loc a reference to the location to redirect
   **
   ** Avoid duplicate information.
   */
  template <typename YYChar>
  std::basic_ostream<YYChar>&
  operator<< (std::basic_ostream<YYChar>& ostr, const location& loc)
  {
    unsigned end_col = 0 < loc.end.column ? loc.end.column - 1 : 0;
    ostr << loc.begin;
    if (loc.end.filename
        && (!loc.begin.filename
            || *loc.begin.filename != *loc.end.filename))
      ostr << '-' << loc.end.filename << ':' << loc.end.line << '.' << end_col;
    else if (loc.begin.line < loc.end.line)
      ostr << '-' << loc.end.line << '.' << end_col;
    else if (loc.begin.column < end_col)
      ostr << '-' << end_col;
    return ostr;
  }


  /// A Bison parser.
  class asn1_parser
  {
  public:
#ifndef YYSTYPE
  /// A buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current parser state.
  class semantic_type
  {
  public:
    /// Type of *this.
    typedef semantic_type self_type;

    /// Empty construction.
    semantic_type () YY_NOEXCEPT
      : yybuffer_ ()
      , yytypeid_ (YY_NULLPTR)
    {}

    /// Construct and fill.
    template <typename T>
    semantic_type (YY_RVREF (T) t)
      : yytypeid_ (&typeid (T))
    {
      YYASSERT (sizeof (T) <= size);
      new (yyas_<T> ()) T (YY_MOVE (t));
    }

    /// Destruction, allowed only if empty.
    ~semantic_type () YY_NOEXCEPT
    {
      YYASSERT (!yytypeid_);
    }

# if 201103L <= YY_CPLUSPLUS
    /// Instantiate a \a T in here from \a t.
    template <typename T, typename... U>
    T&
    emplace (U&&... u)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (std::forward <U>(u)...);
    }
# else
    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    emplace ()
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T ();
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    emplace (const T& t)
    {
      YYASSERT (!yytypeid_);
      YYASSERT (sizeof (T) <= size);
      yytypeid_ = & typeid (T);
      return *new (yyas_<T> ()) T (t);
    }
# endif

    /// Instantiate an empty \a T in here.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build ()
    {
      return emplace<T> ();
    }

    /// Instantiate a \a T in here from \a t.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build (const T& t)
    {
      return emplace<T> (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as () YY_NOEXCEPT
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= size);
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const YY_NOEXCEPT
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == typeid (T));
      YYASSERT (sizeof (T) <= size);
      return *yyas_<T> ();
    }

    /// Swap the content with \a that, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsibility.
    /// Swapping between built and (possibly) non-built is done with
    /// self_type::move ().
    template <typename T>
    void
    swap (self_type& that) YY_NOEXCEPT
    {
      YYASSERT (yytypeid_);
      YYASSERT (*yytypeid_ == *that.yytypeid_);
      std::swap (as<T> (), that.as<T> ());
    }

    /// Move the content of \a that to this.
    ///
    /// Destroys \a that.
    template <typename T>
    void
    move (self_type& that)
    {
# if 201103L <= YY_CPLUSPLUS
      emplace<T> (std::move (that.as<T> ()));
# else
      emplace<T> ();
      swap<T> (that);
# endif
      that.destroy<T> ();
    }

# if 201103L <= YY_CPLUSPLUS
    /// Move the content of \a that to this.
    template <typename T>
    void
    move (self_type&& that)
    {
      emplace<T> (std::move (that.as<T> ()));
      that.destroy<T> ();
    }
#endif

    /// Copy the content of \a that to this.
    template <typename T>
    void
    copy (const self_type& that)
    {
      emplace<T> (that.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
      yytypeid_ = YY_NULLPTR;
    }

  private:
    /// Prohibit blind copies.
    self_type& operator= (const self_type&);
    semantic_type (const self_type&);

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ () YY_NOEXCEPT
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const YY_NOEXCEPT
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // ObjectClassAssignment
      // ObjectSetAssignment
      // ParameterizedAssignment
      // ParameterizedTypeAssignment
      // ParameterizedValueAssignment
      // ParameterizedValueSetTypeAssignment
      // ParameterizedObjectClassAssignment
      // Assignment
      // TypeAssignment
      // ValueAssignment
      // ValueSetTypeAssignment
      char dummy1[sizeof (Assignment)];

      // BitStringType
      char dummy2[sizeof (BitStringType)];

      // BooleanType
      char dummy3[sizeof (BooleanType)];

      // BuiltinType
      char dummy4[sizeof (BuiltinType)];

      // CharacterStringType
      // RestrictedCharacterStringType
      // UnrestrictedCharacterStringType
      char dummy5[sizeof (CharacterStringType)];

      // ChoiceType
      char dummy6[sizeof (ChoiceType)];

      // Class
      char dummy7[sizeof (Class)];

      // ComponentType
      char dummy8[sizeof (ComponentType)];

      // ComponentTypeLists
      // ComponentTypeList
      char dummy9[sizeof (ComponentTypeList)];

      // DateTimeType
      char dummy10[sizeof (DateTimeType)];

      // DateType
      char dummy11[sizeof (DateType)];

      // DefinedType
      // ParameterizedType
      // ExternalTypeReference
      char dummy12[sizeof (DefinedType)];

      // DefinedValue
      char dummy13[sizeof (DefinedValue)];

      // DurationType
      char dummy14[sizeof (DurationType)];

      // EmbeddedPDVType
      char dummy15[sizeof (EmbeddedPDVType)];

      // EnumeratedType
      // Enumerations
      // Enumeration
      char dummy16[sizeof (EnumeratedType)];

      // EnumerationItem
      char dummy17[sizeof (EnumerationValue)];

      // ExternalType
      char dummy18[sizeof (ExternalType)];

      // IRIType
      char dummy19[sizeof (IRIType)];

      // SymbolsFromModule
      char dummy20[sizeof (Import)];

      // InstanceOfType
      char dummy21[sizeof (InstanceOfType)];

      // IntegerType
      char dummy22[sizeof (IntegerType)];

      // ModuleBody
      char dummy23[sizeof (Module)];

      // NamedNumber
      char dummy24[sizeof (NamedNumber)];

      // NamedType
      char dummy25[sizeof (NamedType)];

      // NullType
      char dummy26[sizeof (NullType)];

      // ObjectClass
      // ObjectClassDefn
      char dummy27[sizeof (ObjectClassAssignment)];

      // ObjectClassFieldType
      char dummy28[sizeof (ObjectClassFieldType)];

      // ObjIdComponents
      // NameForm
      // NumberForm
      // NameAndNumberForm
      char dummy29[sizeof (ObjectIdComponentValue)];

      // ObjectIdentifierType
      char dummy30[sizeof (ObjectIdentifierType)];

      // OctetStringType
      char dummy31[sizeof (OctetStringType)];

      // Parameter
      char dummy32[sizeof (Parameter)];

      // PrefixedType
      char dummy33[sizeof (PrefixedType)];

      // RealType
      char dummy34[sizeof (RealType)];

      // RelativeIRIType
      char dummy35[sizeof (RelativeIRIType)];

      // RelativeOIDType
      char dummy36[sizeof (RelativeOIDType)];

      // SequenceOfType
      char dummy37[sizeof (SequenceOfType)];

      // SequenceType
      char dummy38[sizeof (SequenceType)];

      // SetOfType
      char dummy39[sizeof (SetOfType)];

      // SetType
      char dummy40[sizeof (SetType)];

      // Tag
      char dummy41[sizeof (Tag)];

      // TaggedType
      char dummy42[sizeof (TaggedType)];

      // TagDefault
      char dummy43[sizeof (TaggingMode)];

      // TimeOfDayType
      char dummy44[sizeof (TimeOfDayType)];

      // TimeType
      char dummy45[sizeof (TimeType)];

      // ParamGovernor
      // Governor
      // ActualParameter
      // Type
      // ConstrainedType
      // TypeWithConstraint
      char dummy46[sizeof (Type)];

      // ValueWithoutTypeIdentifier
      // Value
      // SingleValue
      char dummy47[sizeof (Value)];

      // realnumber
      char dummy48[sizeof (double)];

      // ClassNumber
      char dummy49[sizeof (int)];

      // number
      // negativenumber
      // SignedNumber
      char dummy50[sizeof (long long)];

      // bstring
      // xmlbstring
      // hstring
      // xmlhstring
      // cstring
      // xmlcstring
      // simplestring
      // xmltstring
      // objectreference
      // typefieldreference
      // valuefieldreference
      // GENERIC_IDENTIFIER_UPPERCASE
      // GENERIC_IDENTIFIER_LOWERCASE
      // UsefulObjectClassReference
      // FieldName
      // SimpleDefinedType
      // ModuleIdentifier
      // GlobalModuleReference
      // Symbol
      // Reference
      // typereference
      // identifier
      // valuereference
      // modulereference
      // objectclassreference
      // word
      char dummy51[sizeof (std::string)];

      // AssignmentList
      char dummy52[sizeof (std::vector<Assignment>)];

      // FieldSpecList
      // FieldSpec
      // TypeFieldSpec
      // FixedTypeValueFieldSpec
      char dummy53[sizeof (std::vector<ClassField>)];

      // Exports
      char dummy54[sizeof (std::vector<Export>)];

      // Imports
      // SymbolsImported
      // SymbolsFromModuleList
      char dummy55[sizeof (std::vector<Import>)];

      // NamedNumberList
      char dummy56[sizeof (std::vector<NamedNumber>)];

      // AlternativeTypeLists
      // RootAlternativeTypeList
      // AlternativeTypeList
      char dummy57[sizeof (std::vector<NamedType>)];

      // ObjectIdentifierValue
      // ObjIdComponentsList
      char dummy58[sizeof (std::vector<ObjectIdComponentValue>)];

      // ParameterList
      // ParameterSeries
      char dummy59[sizeof (std::vector<Parameter>)];

      // ActualParameterList
      char dummy60[sizeof (std::vector<Type>)];

      // SequenceOfValues
      char dummy61[sizeof (std::vector<Value>)];

      // FieldNameList
      // OneOrManyTypeFieldReference
      // SymbolList
      char dummy62[sizeof (std::vector<std::string>)];
    };

    /// The size of the largest semantic type.
    enum { size = sizeof (union_type) };

    /// A buffer to store semantic values.
    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[size];
    } yybuffer_;

    /// Whether the content is built: if defined, the name of the stored type.
    const std::type_info *yytypeid_;
  };

#else
    typedef YYSTYPE semantic_type;
#endif
    /// Symbol locations.
    typedef location location_type;

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const location_type& l, const std::string& m)
        : std::runtime_error (m)
        , location (l)
      {}

      syntax_error (const syntax_error& s)
        : std::runtime_error (s.what ())
        , location (s.location)
      {}

      ~syntax_error () YY_NOEXCEPT YY_NOTHROW;

      location_type location;
    };

    /// Tokens.
    struct token
    {
      enum yytokentype
      {
        END_OF_FILE = 0,
        comment = 258,
        number = 259,
        negativenumber = 260,
        realnumber = 261,
        bstring = 262,
        xmlbstring = 263,
        hstring = 264,
        xmlhstring = 265,
        cstring = 266,
        xmlcstring = 267,
        simplestring = 268,
        xmltstring = 269,
        psname = 270,
        encodingreference = 271,
        integerUnicodeLabel = 272,
        tstring = 275,
        objectreference = 277,
        objectsetreference = 278,
        typefieldreference = 279,
        valuefieldreference = 280,
        valuesetfieldreference = 281,
        objectfieldreference = 282,
        objectsetfieldreference = 283,
        ABSENT = 284,
        ABSTRACT_SYNTAX = 285,
        ALL = 286,
        ANY = 287,
        APPLICATION = 288,
        ASN_NULL = 289,
        AUTOMATIC = 290,
        BEGIN = 291,
        BIT = 292,
        BMPString = 293,
        BOOLEAN = 294,
        BY = 295,
        CHARACTER = 296,
        CHOICE = 297,
        CLASS = 298,
        COMPONENT = 299,
        COMPONENTS = 300,
        CONSTRAINED = 301,
        CONTAINING = 302,
        DATE = 303,
        DATE_TIME = 304,
        DEFAULT = 305,
        DEFINITIONS = 306,
        DURATION = 307,
        EMBEDDED = 308,
        ENCODED = 309,
        ENCODING_CONTROL = 310,
        END = 311,
        ENUMERATED = 312,
        EXCEPT = 313,
        EXPLICIT = 314,
        EXPORTS = 315,
        EXTENSIBILITY = 316,
        EXTERNAL = 317,
        FALSE = 318,
        FROM = 319,
        GeneralizedTime = 320,
        GeneralString = 321,
        GraphicString = 322,
        IA5String = 323,
        IDENTIFIER = 324,
        IMPLICIT = 325,
        IMPLIED = 326,
        IMPORTS = 327,
        INCLUDES = 328,
        INSTANCE = 329,
        INSTRUCTIONS = 330,
        INTEGER = 331,
        INTERSECTION = 332,
        ISO646String = 333,
        MAX = 334,
        MIN = 335,
        MINUS_INFINITY = 336,
        NOT_A_NUMBER = 337,
        NumericString = 338,
        OBJECT = 339,
        ObjectDescriptor = 340,
        OCTET = 341,
        OF = 342,
        OID_IRI = 343,
        OPTIONAL = 344,
        PATTERN = 345,
        PDV = 346,
        PLUS_INFINITY = 347,
        PRESENT = 348,
        PrintableString = 349,
        PRIVATE = 350,
        REAL = 351,
        RELATIVE_OID = 352,
        RELATIVE_OID_IRI = 353,
        SEQUENCE = 354,
        SET = 355,
        SETTINGS = 356,
        SIZE = 357,
        STRING = 358,
        SYNTAX = 359,
        T61String = 360,
        TAGS = 361,
        TeletexString = 362,
        TIME = 363,
        TIME_OF_DAY = 364,
        TRUE = 365,
        TYPE_IDENTIFIER = 366,
        UNION = 367,
        UNIQUE = 368,
        UNIVERSAL = 369,
        UniversalString = 370,
        UTCTime = 371,
        UTF8String = 372,
        VideotexString = 373,
        VisibleString = 374,
        WITH = 375,
        DEFINED_AS = 376,
        ELIPSIS = 377,
        RANGE = 378,
        OPEN_BRACE = 379,
        CLOSE_BRACE = 380,
        OPEN_PARENTHESIS = 381,
        CLOSE_PARENTHESIS = 382,
        OPEN_SQUARE_BRACKET = 383,
        CLOSE_SQUARE_BRACKET = 384,
        LESS_THAN = 385,
        GREATER_THAN = 386,
        EXCLAMATION_MARK = 387,
        QUOTATION_MARK = 388,
        AMPERSAND = 389,
        APOSTROPHE = 390,
        ASTERISK = 391,
        COMMA = 392,
        FULL_STOP = 393,
        HYPHEN_MINUS = 394,
        SOLIDUS = 395,
        COLON = 396,
        SEMICOLON = 397,
        EQUALS_SIGN = 398,
        AT = 399,
        VERTICAL_LINE = 400,
        ACCENT = 401,
        PLUS = 402,
        STAR = 403,
        GENERIC_IDENTIFIER_UPPERCASE = 404,
        GENERIC_IDENTIFIER_LOWERCASE = 405,
        GENERIC_INTEGER = 406,
        xmlasn1typename = 407
      };
    };

    /// (External) token type, as returned by yylex.
    typedef token::yytokentype token_type;

    /// Symbol type: an internal symbol number.
    typedef int symbol_number_type;

    /// The symbol type number to denote an empty symbol.
    enum { empty_symbol = -2 };

    /// Internal symbol number for tokens (subsumed by symbol_number_type).
    typedef unsigned char token_number_type;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol type
    /// via type_get ().
    ///
    /// Provide access to semantic value and location.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ()
        : value ()
        , location ()
      {}

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      basic_symbol (basic_symbol&& that);
#endif

      /// Copy constructor.
      basic_symbol (const basic_symbol& that);

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, location_type&& l)
        : Base (t)
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const location_type& l)
        : Base (t)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Assignment&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Assignment& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, BitStringType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const BitStringType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, BooleanType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const BooleanType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, BuiltinType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const BuiltinType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, CharacterStringType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const CharacterStringType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ChoiceType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ChoiceType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Class&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Class& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ComponentType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ComponentType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ComponentTypeList&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ComponentTypeList& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DateTimeType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DateTimeType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DateType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DateType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DefinedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DefinedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DefinedValue&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DefinedValue& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, DurationType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const DurationType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, EmbeddedPDVType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const EmbeddedPDVType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, EnumeratedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const EnumeratedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, EnumerationValue&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const EnumerationValue& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ExternalType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ExternalType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IRIType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IRIType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Import&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Import& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, InstanceOfType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const InstanceOfType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IntegerType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IntegerType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Module&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Module& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, NamedNumber&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const NamedNumber& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, NamedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const NamedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, NullType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const NullType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ObjectClassAssignment&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ObjectClassAssignment& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ObjectClassFieldType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ObjectClassFieldType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ObjectIdComponentValue&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ObjectIdComponentValue& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ObjectIdentifierType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ObjectIdentifierType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, OctetStringType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const OctetStringType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Parameter&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Parameter& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, PrefixedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const PrefixedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, RealType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const RealType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, RelativeIRIType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const RelativeIRIType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, RelativeOIDType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const RelativeOIDType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, SequenceOfType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const SequenceOfType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, SequenceType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const SequenceType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, SetOfType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const SetOfType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, SetType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const SetType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Tag&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Tag& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, TaggedType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const TaggedType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, TaggingMode&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const TaggingMode& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, TimeOfDayType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const TimeOfDayType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, TimeType&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const TimeType& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Type&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Type& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Value&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Value& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, double&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const double& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, int&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const int& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, long long&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const long long& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::string&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::string& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Assignment>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Assignment>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<ClassField>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<ClassField>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Export>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Export>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Import>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Import>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<NamedNumber>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<NamedNumber>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<NamedType>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<NamedType>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<ObjectIdComponentValue>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<ObjectIdComponentValue>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Parameter>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Parameter>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Type>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Type>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<Value>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<Value>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<std::string>&& v, location_type&& l)
        : Base (t)
        , value (std::move (v))
        , location (std::move (l))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<std::string>& v, const location_type& l)
        : Base (t)
        , value (v)
        , location (l)
      {}
#endif

      /// Destroy the symbol.
      ~basic_symbol ()
      {
        clear ();
      }

      /// Destroy contents, and record that is empty.
      void clear ()
      {
        // User destructor.
        symbol_number_type yytype = this->type_get ();
        basic_symbol<Base>& yysym = *this;
        (void) yysym;
        switch (yytype)
        {
       default:
          break;
        }

        // Type destructor.
switch (yytype)
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.template destroy< Assignment > ();
        break;

      case 283: // BitStringType
        value.template destroy< BitStringType > ();
        break;

      case 272: // BooleanType
        value.template destroy< BooleanType > ();
        break;

      case 264: // BuiltinType
        value.template destroy< BuiltinType > ();
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.template destroy< CharacterStringType > ();
        break;

      case 295: // ChoiceType
        value.template destroy< ChoiceType > ();
        break;

      case 305: // Class
        value.template destroy< Class > ();
        break;

      case 291: // ComponentType
        value.template destroy< ComponentType > ();
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.template destroy< ComponentTypeList > ();
        break;

      case 326: // DateTimeType
        value.template destroy< DateTimeType > ();
        break;

      case 324: // DateType
        value.template destroy< DateType > ();
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.template destroy< DefinedType > ();
        break;

      case 253: // DefinedValue
        value.template destroy< DefinedValue > ();
        break;

      case 327: // DurationType
        value.template destroy< DurationType > ();
        break;

      case 320: // EmbeddedPDVType
        value.template destroy< EmbeddedPDVType > ();
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.template destroy< EnumeratedType > ();
        break;

      case 281: // EnumerationItem
        value.template destroy< EnumerationValue > ();
        break;

      case 321: // ExternalType
        value.template destroy< ExternalType > ();
        break;

      case 314: // IRIType
        value.template destroy< IRIType > ();
        break;

      case 245: // SymbolsFromModule
        value.template destroy< Import > ();
        break;

      case 215: // InstanceOfType
        value.template destroy< InstanceOfType > ();
        break;

      case 274: // IntegerType
        value.template destroy< IntegerType > ();
        break;

      case 239: // ModuleBody
        value.template destroy< Module > ();
        break;

      case 276: // NamedNumber
        value.template destroy< NamedNumber > ();
        break;

      case 265: // NamedType
        value.template destroy< NamedType > ();
        break;

      case 287: // NullType
        value.template destroy< NullType > ();
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.template destroy< ObjectClassAssignment > ();
        break;

      case 202: // ObjectClassFieldType
        value.template destroy< ObjectClassFieldType > ();
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.template destroy< ObjectIdComponentValue > ();
        break;

      case 306: // ObjectIdentifierType
        value.template destroy< ObjectIdentifierType > ();
        break;

      case 286: // OctetStringType
        value.template destroy< OctetStringType > ();
        break;

      case 210: // Parameter
        value.template destroy< Parameter > ();
        break;

      case 300: // PrefixedType
        value.template destroy< PrefixedType > ();
        break;

      case 282: // RealType
        value.template destroy< RealType > ();
        break;

      case 319: // RelativeIRIType
        value.template destroy< RelativeIRIType > ();
        break;

      case 313: // RelativeOIDType
        value.template destroy< RelativeOIDType > ();
        break;

      case 292: // SequenceOfType
        value.template destroy< SequenceOfType > ();
        break;

      case 288: // SequenceType
        value.template destroy< SequenceType > ();
        break;

      case 294: // SetOfType
        value.template destroy< SetOfType > ();
        break;

      case 293: // SetType
        value.template destroy< SetType > ();
        break;

      case 302: // Tag
        value.template destroy< Tag > ();
        break;

      case 301: // TaggedType
        value.template destroy< TaggedType > ();
        break;

      case 237: // TagDefault
        value.template destroy< TaggingMode > ();
        break;

      case 325: // TimeOfDayType
        value.template destroy< TimeOfDayType > ();
        break;

      case 322: // TimeType
        value.template destroy< TimeType > ();
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.template destroy< Type > ();
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.template destroy< Value > ();
        break;

      case 6: // realnumber
        value.template destroy< double > ();
        break;

      case 304: // ClassNumber
        value.template destroy< int > ();
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.template destroy< long long > ();
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.template destroy< std::string > ();
        break;

      case 250: // AssignmentList
        value.template destroy< std::vector<Assignment> > ();
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.template destroy< std::vector<ClassField> > ();
        break;

      case 240: // Exports
        value.template destroy< std::vector<Export> > ();
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.template destroy< std::vector<Import> > ();
        break;

      case 275: // NamedNumberList
        value.template destroy< std::vector<NamedNumber> > ();
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.template destroy< std::vector<NamedType> > ();
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.template destroy< std::vector<ObjectIdComponentValue> > ();
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.template destroy< std::vector<Parameter> > ();
        break;

      case 256: // ActualParameterList
        value.template destroy< std::vector<Type> > ();
        break;

      case 271: // SequenceOfValues
        value.template destroy< std::vector<Value> > ();
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.template destroy< std::vector<std::string> > ();
        break;

      default:
        break;
    }

        Base::clear ();
      }

      /// Whether empty.
      bool empty () const YY_NOEXCEPT;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

      /// The location.
      location_type location;

    private:
#if YY_CPLUSPLUS < 201103L
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& that);
#endif
    };

    /// Type access provider for token (enum) based symbols.
    struct by_type
    {
      /// Default constructor.
      by_type ();

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      by_type (by_type&& that);
#endif

      /// Copy constructor.
      by_type (const by_type& that);

      /// The symbol type as needed by the constructor.
      typedef token_type kind_type;

      /// Constructor from (external) token numbers.
      by_type (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol type from \a that.
      void move (by_type& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_number_type type_get () const YY_NOEXCEPT;

      /// The token.
      token_type token () const YY_NOEXCEPT;

      /// The symbol type.
      /// \a empty_symbol when empty.
      /// An int, not token_number_type, to be able to store empty_symbol.
      int type;
    };

    /// "External" symbols: returned by the scanner.
    struct symbol_type : basic_symbol<by_type>
    {
      /// Superclass.
      typedef basic_symbol<by_type> super_type;

      /// Empty symbol.
      symbol_type () {}

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, location_type l)
        : super_type(token_type (tok), std::move (l))
      {
        YYASSERT (tok == token::END_OF_FILE || tok == token::comment || tok == token::psname || tok == token::encodingreference || tok == token::integerUnicodeLabel || tok == 273 || tok == 274 || tok == token::tstring || tok == 276 || tok == token::objectsetreference || tok == token::valuesetfieldreference || tok == token::objectfieldreference || tok == token::objectsetfieldreference || tok == token::ABSENT || tok == token::ABSTRACT_SYNTAX || tok == token::ALL || tok == token::ANY || tok == token::APPLICATION || tok == token::ASN_NULL || tok == token::AUTOMATIC || tok == token::BEGIN || tok == token::BIT || tok == token::BMPString || tok == token::BOOLEAN || tok == token::BY || tok == token::CHARACTER || tok == token::CHOICE || tok == token::CLASS || tok == token::COMPONENT || tok == token::COMPONENTS || tok == token::CONSTRAINED || tok == token::CONTAINING || tok == token::DATE || tok == token::DATE_TIME || tok == token::DEFAULT || tok == token::DEFINITIONS || tok == token::DURATION || tok == token::EMBEDDED || tok == token::ENCODED || tok == token::ENCODING_CONTROL || tok == token::END || tok == token::ENUMERATED || tok == token::EXCEPT || tok == token::EXPLICIT || tok == token::EXPORTS || tok == token::EXTENSIBILITY || tok == token::EXTERNAL || tok == token::FALSE || tok == token::FROM || tok == token::GeneralizedTime || tok == token::GeneralString || tok == token::GraphicString || tok == token::IA5String || tok == token::IDENTIFIER || tok == token::IMPLICIT || tok == token::IMPLIED || tok == token::IMPORTS || tok == token::INCLUDES || tok == token::INSTANCE || tok == token::INSTRUCTIONS || tok == token::INTEGER || tok == token::INTERSECTION || tok == token::ISO646String || tok == token::MAX || tok == token::MIN || tok == token::MINUS_INFINITY || tok == token::NOT_A_NUMBER || tok == token::NumericString || tok == token::OBJECT || tok == token::ObjectDescriptor || tok == token::OCTET || tok == token::OF || tok == token::OID_IRI || tok == token::OPTIONAL || tok == token::PATTERN || tok == token::PDV || tok == token::PLUS_INFINITY || tok == token::PRESENT || tok == token::PrintableString || tok == token::PRIVATE || tok == token::REAL || tok == token::RELATIVE_OID || tok == token::RELATIVE_OID_IRI || tok == token::SEQUENCE || tok == token::SET || tok == token::SETTINGS || tok == token::SIZE || tok == token::STRING || tok == token::SYNTAX || tok == token::T61String || tok == token::TAGS || tok == token::TeletexString || tok == token::TIME || tok == token::TIME_OF_DAY || tok == token::TRUE || tok == token::TYPE_IDENTIFIER || tok == token::UNION || tok == token::UNIQUE || tok == token::UNIVERSAL || tok == token::UniversalString || tok == token::UTCTime || tok == token::UTF8String || tok == token::VideotexString || tok == token::VisibleString || tok == token::WITH || tok == token::DEFINED_AS || tok == token::ELIPSIS || tok == token::RANGE || tok == token::OPEN_BRACE || tok == token::CLOSE_BRACE || tok == token::OPEN_PARENTHESIS || tok == token::CLOSE_PARENTHESIS || tok == token::OPEN_SQUARE_BRACKET || tok == token::CLOSE_SQUARE_BRACKET || tok == token::LESS_THAN || tok == token::GREATER_THAN || tok == token::EXCLAMATION_MARK || tok == token::QUOTATION_MARK || tok == token::AMPERSAND || tok == token::APOSTROPHE || tok == token::ASTERISK || tok == token::COMMA || tok == token::FULL_STOP || tok == token::HYPHEN_MINUS || tok == token::SOLIDUS || tok == token::COLON || tok == token::SEMICOLON || tok == token::EQUALS_SIGN || tok == token::AT || tok == token::VERTICAL_LINE || tok == token::ACCENT || tok == token::PLUS || tok == token::STAR || tok == token::GENERIC_INTEGER || tok == token::xmlasn1typename);
      }
#else
      symbol_type (int tok, const location_type& l)
        : super_type(token_type (tok), l)
      {
        YYASSERT (tok == token::END_OF_FILE || tok == token::comment || tok == token::psname || tok == token::encodingreference || tok == token::integerUnicodeLabel || tok == 273 || tok == 274 || tok == token::tstring || tok == 276 || tok == token::objectsetreference || tok == token::valuesetfieldreference || tok == token::objectfieldreference || tok == token::objectsetfieldreference || tok == token::ABSENT || tok == token::ABSTRACT_SYNTAX || tok == token::ALL || tok == token::ANY || tok == token::APPLICATION || tok == token::ASN_NULL || tok == token::AUTOMATIC || tok == token::BEGIN || tok == token::BIT || tok == token::BMPString || tok == token::BOOLEAN || tok == token::BY || tok == token::CHARACTER || tok == token::CHOICE || tok == token::CLASS || tok == token::COMPONENT || tok == token::COMPONENTS || tok == token::CONSTRAINED || tok == token::CONTAINING || tok == token::DATE || tok == token::DATE_TIME || tok == token::DEFAULT || tok == token::DEFINITIONS || tok == token::DURATION || tok == token::EMBEDDED || tok == token::ENCODED || tok == token::ENCODING_CONTROL || tok == token::END || tok == token::ENUMERATED || tok == token::EXCEPT || tok == token::EXPLICIT || tok == token::EXPORTS || tok == token::EXTENSIBILITY || tok == token::EXTERNAL || tok == token::FALSE || tok == token::FROM || tok == token::GeneralizedTime || tok == token::GeneralString || tok == token::GraphicString || tok == token::IA5String || tok == token::IDENTIFIER || tok == token::IMPLICIT || tok == token::IMPLIED || tok == token::IMPORTS || tok == token::INCLUDES || tok == token::INSTANCE || tok == token::INSTRUCTIONS || tok == token::INTEGER || tok == token::INTERSECTION || tok == token::ISO646String || tok == token::MAX || tok == token::MIN || tok == token::MINUS_INFINITY || tok == token::NOT_A_NUMBER || tok == token::NumericString || tok == token::OBJECT || tok == token::ObjectDescriptor || tok == token::OCTET || tok == token::OF || tok == token::OID_IRI || tok == token::OPTIONAL || tok == token::PATTERN || tok == token::PDV || tok == token::PLUS_INFINITY || tok == token::PRESENT || tok == token::PrintableString || tok == token::PRIVATE || tok == token::REAL || tok == token::RELATIVE_OID || tok == token::RELATIVE_OID_IRI || tok == token::SEQUENCE || tok == token::SET || tok == token::SETTINGS || tok == token::SIZE || tok == token::STRING || tok == token::SYNTAX || tok == token::T61String || tok == token::TAGS || tok == token::TeletexString || tok == token::TIME || tok == token::TIME_OF_DAY || tok == token::TRUE || tok == token::TYPE_IDENTIFIER || tok == token::UNION || tok == token::UNIQUE || tok == token::UNIVERSAL || tok == token::UniversalString || tok == token::UTCTime || tok == token::UTF8String || tok == token::VideotexString || tok == token::VisibleString || tok == token::WITH || tok == token::DEFINED_AS || tok == token::ELIPSIS || tok == token::RANGE || tok == token::OPEN_BRACE || tok == token::CLOSE_BRACE || tok == token::OPEN_PARENTHESIS || tok == token::CLOSE_PARENTHESIS || tok == token::OPEN_SQUARE_BRACKET || tok == token::CLOSE_SQUARE_BRACKET || tok == token::LESS_THAN || tok == token::GREATER_THAN || tok == token::EXCLAMATION_MARK || tok == token::QUOTATION_MARK || tok == token::AMPERSAND || tok == token::APOSTROPHE || tok == token::ASTERISK || tok == token::COMMA || tok == token::FULL_STOP || tok == token::HYPHEN_MINUS || tok == token::SOLIDUS || tok == token::COLON || tok == token::SEMICOLON || tok == token::EQUALS_SIGN || tok == token::AT || tok == token::VERTICAL_LINE || tok == token::ACCENT || tok == token::PLUS || tok == token::STAR || tok == token::GENERIC_INTEGER || tok == token::xmlasn1typename);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, double v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YYASSERT (tok == token::realnumber);
      }
#else
      symbol_type (int tok, const double& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YYASSERT (tok == token::realnumber);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, long long v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YYASSERT (tok == token::number || tok == token::negativenumber);
      }
#else
      symbol_type (int tok, const long long& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YYASSERT (tok == token::number || tok == token::negativenumber);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, std::string v, location_type l)
        : super_type(token_type (tok), std::move (v), std::move (l))
      {
        YYASSERT (tok == token::bstring || tok == token::xmlbstring || tok == token::hstring || tok == token::xmlhstring || tok == token::cstring || tok == token::xmlcstring || tok == token::simplestring || tok == token::xmltstring || tok == token::objectreference || tok == token::typefieldreference || tok == token::valuefieldreference || tok == token::GENERIC_IDENTIFIER_UPPERCASE || tok == token::GENERIC_IDENTIFIER_LOWERCASE);
      }
#else
      symbol_type (int tok, const std::string& v, const location_type& l)
        : super_type(token_type (tok), v, l)
      {
        YYASSERT (tok == token::bstring || tok == token::xmlbstring || tok == token::hstring || tok == token::xmlhstring || tok == token::cstring || tok == token::xmlcstring || tok == token::simplestring || tok == token::xmltstring || tok == token::objectreference || tok == token::typefieldreference || tok == token::valuefieldreference || tok == token::GENERIC_IDENTIFIER_UPPERCASE || tok == token::GENERIC_IDENTIFIER_LOWERCASE);
      }
#endif
    };

    /// Build a parser object.
    asn1_parser (Context& context_yyarg);
    virtual ~asn1_parser ();

    /// Parse.  An alias for parse ().
    /// \returns  0 iff parsing succeeded.
    int operator() ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param loc    where the syntax error is found.
    /// \param msg    a description of the syntax error.
    virtual void error (const location_type& loc, const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

    // Implementation of make_symbol for each symbol type.
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_END_OF_FILE (location_type l)
      {
        return symbol_type (token::END_OF_FILE, std::move (l));
      }
#else
      static
      symbol_type
      make_END_OF_FILE (const location_type& l)
      {
        return symbol_type (token::END_OF_FILE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_comment (location_type l)
      {
        return symbol_type (token::comment, std::move (l));
      }
#else
      static
      symbol_type
      make_comment (const location_type& l)
      {
        return symbol_type (token::comment, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_number (long long v, location_type l)
      {
        return symbol_type (token::number, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_number (const long long& v, const location_type& l)
      {
        return symbol_type (token::number, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_negativenumber (long long v, location_type l)
      {
        return symbol_type (token::negativenumber, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_negativenumber (const long long& v, const location_type& l)
      {
        return symbol_type (token::negativenumber, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_realnumber (double v, location_type l)
      {
        return symbol_type (token::realnumber, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_realnumber (const double& v, const location_type& l)
      {
        return symbol_type (token::realnumber, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_bstring (std::string v, location_type l)
      {
        return symbol_type (token::bstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_bstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::bstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmlbstring (std::string v, location_type l)
      {
        return symbol_type (token::xmlbstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_xmlbstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::xmlbstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_hstring (std::string v, location_type l)
      {
        return symbol_type (token::hstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_hstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::hstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmlhstring (std::string v, location_type l)
      {
        return symbol_type (token::xmlhstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_xmlhstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::xmlhstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_cstring (std::string v, location_type l)
      {
        return symbol_type (token::cstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_cstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::cstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmlcstring (std::string v, location_type l)
      {
        return symbol_type (token::xmlcstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_xmlcstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::xmlcstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_simplestring (std::string v, location_type l)
      {
        return symbol_type (token::simplestring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_simplestring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::simplestring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmltstring (std::string v, location_type l)
      {
        return symbol_type (token::xmltstring, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_xmltstring (const std::string& v, const location_type& l)
      {
        return symbol_type (token::xmltstring, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_psname (location_type l)
      {
        return symbol_type (token::psname, std::move (l));
      }
#else
      static
      symbol_type
      make_psname (const location_type& l)
      {
        return symbol_type (token::psname, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_encodingreference (location_type l)
      {
        return symbol_type (token::encodingreference, std::move (l));
      }
#else
      static
      symbol_type
      make_encodingreference (const location_type& l)
      {
        return symbol_type (token::encodingreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_integerUnicodeLabel (location_type l)
      {
        return symbol_type (token::integerUnicodeLabel, std::move (l));
      }
#else
      static
      symbol_type
      make_integerUnicodeLabel (const location_type& l)
      {
        return symbol_type (token::integerUnicodeLabel, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_tstring (location_type l)
      {
        return symbol_type (token::tstring, std::move (l));
      }
#else
      static
      symbol_type
      make_tstring (const location_type& l)
      {
        return symbol_type (token::tstring, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_objectreference (std::string v, location_type l)
      {
        return symbol_type (token::objectreference, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_objectreference (const std::string& v, const location_type& l)
      {
        return symbol_type (token::objectreference, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_objectsetreference (location_type l)
      {
        return symbol_type (token::objectsetreference, std::move (l));
      }
#else
      static
      symbol_type
      make_objectsetreference (const location_type& l)
      {
        return symbol_type (token::objectsetreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_typefieldreference (std::string v, location_type l)
      {
        return symbol_type (token::typefieldreference, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_typefieldreference (const std::string& v, const location_type& l)
      {
        return symbol_type (token::typefieldreference, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_valuefieldreference (std::string v, location_type l)
      {
        return symbol_type (token::valuefieldreference, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_valuefieldreference (const std::string& v, const location_type& l)
      {
        return symbol_type (token::valuefieldreference, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_valuesetfieldreference (location_type l)
      {
        return symbol_type (token::valuesetfieldreference, std::move (l));
      }
#else
      static
      symbol_type
      make_valuesetfieldreference (const location_type& l)
      {
        return symbol_type (token::valuesetfieldreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_objectfieldreference (location_type l)
      {
        return symbol_type (token::objectfieldreference, std::move (l));
      }
#else
      static
      symbol_type
      make_objectfieldreference (const location_type& l)
      {
        return symbol_type (token::objectfieldreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_objectsetfieldreference (location_type l)
      {
        return symbol_type (token::objectsetfieldreference, std::move (l));
      }
#else
      static
      symbol_type
      make_objectsetfieldreference (const location_type& l)
      {
        return symbol_type (token::objectsetfieldreference, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ABSENT (location_type l)
      {
        return symbol_type (token::ABSENT, std::move (l));
      }
#else
      static
      symbol_type
      make_ABSENT (const location_type& l)
      {
        return symbol_type (token::ABSENT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ABSTRACT_SYNTAX (location_type l)
      {
        return symbol_type (token::ABSTRACT_SYNTAX, std::move (l));
      }
#else
      static
      symbol_type
      make_ABSTRACT_SYNTAX (const location_type& l)
      {
        return symbol_type (token::ABSTRACT_SYNTAX, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ALL (location_type l)
      {
        return symbol_type (token::ALL, std::move (l));
      }
#else
      static
      symbol_type
      make_ALL (const location_type& l)
      {
        return symbol_type (token::ALL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ANY (location_type l)
      {
        return symbol_type (token::ANY, std::move (l));
      }
#else
      static
      symbol_type
      make_ANY (const location_type& l)
      {
        return symbol_type (token::ANY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_APPLICATION (location_type l)
      {
        return symbol_type (token::APPLICATION, std::move (l));
      }
#else
      static
      symbol_type
      make_APPLICATION (const location_type& l)
      {
        return symbol_type (token::APPLICATION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ASN_NULL (location_type l)
      {
        return symbol_type (token::ASN_NULL, std::move (l));
      }
#else
      static
      symbol_type
      make_ASN_NULL (const location_type& l)
      {
        return symbol_type (token::ASN_NULL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_AUTOMATIC (location_type l)
      {
        return symbol_type (token::AUTOMATIC, std::move (l));
      }
#else
      static
      symbol_type
      make_AUTOMATIC (const location_type& l)
      {
        return symbol_type (token::AUTOMATIC, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BEGIN (location_type l)
      {
        return symbol_type (token::BEGIN, std::move (l));
      }
#else
      static
      symbol_type
      make_BEGIN (const location_type& l)
      {
        return symbol_type (token::BEGIN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BIT (location_type l)
      {
        return symbol_type (token::BIT, std::move (l));
      }
#else
      static
      symbol_type
      make_BIT (const location_type& l)
      {
        return symbol_type (token::BIT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BMPString (location_type l)
      {
        return symbol_type (token::BMPString, std::move (l));
      }
#else
      static
      symbol_type
      make_BMPString (const location_type& l)
      {
        return symbol_type (token::BMPString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BOOLEAN (location_type l)
      {
        return symbol_type (token::BOOLEAN, std::move (l));
      }
#else
      static
      symbol_type
      make_BOOLEAN (const location_type& l)
      {
        return symbol_type (token::BOOLEAN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BY (location_type l)
      {
        return symbol_type (token::BY, std::move (l));
      }
#else
      static
      symbol_type
      make_BY (const location_type& l)
      {
        return symbol_type (token::BY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CHARACTER (location_type l)
      {
        return symbol_type (token::CHARACTER, std::move (l));
      }
#else
      static
      symbol_type
      make_CHARACTER (const location_type& l)
      {
        return symbol_type (token::CHARACTER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CHOICE (location_type l)
      {
        return symbol_type (token::CHOICE, std::move (l));
      }
#else
      static
      symbol_type
      make_CHOICE (const location_type& l)
      {
        return symbol_type (token::CHOICE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CLASS (location_type l)
      {
        return symbol_type (token::CLASS, std::move (l));
      }
#else
      static
      symbol_type
      make_CLASS (const location_type& l)
      {
        return symbol_type (token::CLASS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COMPONENT (location_type l)
      {
        return symbol_type (token::COMPONENT, std::move (l));
      }
#else
      static
      symbol_type
      make_COMPONENT (const location_type& l)
      {
        return symbol_type (token::COMPONENT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COMPONENTS (location_type l)
      {
        return symbol_type (token::COMPONENTS, std::move (l));
      }
#else
      static
      symbol_type
      make_COMPONENTS (const location_type& l)
      {
        return symbol_type (token::COMPONENTS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CONSTRAINED (location_type l)
      {
        return symbol_type (token::CONSTRAINED, std::move (l));
      }
#else
      static
      symbol_type
      make_CONSTRAINED (const location_type& l)
      {
        return symbol_type (token::CONSTRAINED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CONTAINING (location_type l)
      {
        return symbol_type (token::CONTAINING, std::move (l));
      }
#else
      static
      symbol_type
      make_CONTAINING (const location_type& l)
      {
        return symbol_type (token::CONTAINING, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DATE (location_type l)
      {
        return symbol_type (token::DATE, std::move (l));
      }
#else
      static
      symbol_type
      make_DATE (const location_type& l)
      {
        return symbol_type (token::DATE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DATE_TIME (location_type l)
      {
        return symbol_type (token::DATE_TIME, std::move (l));
      }
#else
      static
      symbol_type
      make_DATE_TIME (const location_type& l)
      {
        return symbol_type (token::DATE_TIME, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DEFAULT (location_type l)
      {
        return symbol_type (token::DEFAULT, std::move (l));
      }
#else
      static
      symbol_type
      make_DEFAULT (const location_type& l)
      {
        return symbol_type (token::DEFAULT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DEFINITIONS (location_type l)
      {
        return symbol_type (token::DEFINITIONS, std::move (l));
      }
#else
      static
      symbol_type
      make_DEFINITIONS (const location_type& l)
      {
        return symbol_type (token::DEFINITIONS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DURATION (location_type l)
      {
        return symbol_type (token::DURATION, std::move (l));
      }
#else
      static
      symbol_type
      make_DURATION (const location_type& l)
      {
        return symbol_type (token::DURATION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EMBEDDED (location_type l)
      {
        return symbol_type (token::EMBEDDED, std::move (l));
      }
#else
      static
      symbol_type
      make_EMBEDDED (const location_type& l)
      {
        return symbol_type (token::EMBEDDED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ENCODED (location_type l)
      {
        return symbol_type (token::ENCODED, std::move (l));
      }
#else
      static
      symbol_type
      make_ENCODED (const location_type& l)
      {
        return symbol_type (token::ENCODED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ENCODING_CONTROL (location_type l)
      {
        return symbol_type (token::ENCODING_CONTROL, std::move (l));
      }
#else
      static
      symbol_type
      make_ENCODING_CONTROL (const location_type& l)
      {
        return symbol_type (token::ENCODING_CONTROL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_END (location_type l)
      {
        return symbol_type (token::END, std::move (l));
      }
#else
      static
      symbol_type
      make_END (const location_type& l)
      {
        return symbol_type (token::END, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ENUMERATED (location_type l)
      {
        return symbol_type (token::ENUMERATED, std::move (l));
      }
#else
      static
      symbol_type
      make_ENUMERATED (const location_type& l)
      {
        return symbol_type (token::ENUMERATED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXCEPT (location_type l)
      {
        return symbol_type (token::EXCEPT, std::move (l));
      }
#else
      static
      symbol_type
      make_EXCEPT (const location_type& l)
      {
        return symbol_type (token::EXCEPT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXPLICIT (location_type l)
      {
        return symbol_type (token::EXPLICIT, std::move (l));
      }
#else
      static
      symbol_type
      make_EXPLICIT (const location_type& l)
      {
        return symbol_type (token::EXPLICIT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXPORTS (location_type l)
      {
        return symbol_type (token::EXPORTS, std::move (l));
      }
#else
      static
      symbol_type
      make_EXPORTS (const location_type& l)
      {
        return symbol_type (token::EXPORTS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXTENSIBILITY (location_type l)
      {
        return symbol_type (token::EXTENSIBILITY, std::move (l));
      }
#else
      static
      symbol_type
      make_EXTENSIBILITY (const location_type& l)
      {
        return symbol_type (token::EXTENSIBILITY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXTERNAL (location_type l)
      {
        return symbol_type (token::EXTERNAL, std::move (l));
      }
#else
      static
      symbol_type
      make_EXTERNAL (const location_type& l)
      {
        return symbol_type (token::EXTERNAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FALSE (location_type l)
      {
        return symbol_type (token::FALSE, std::move (l));
      }
#else
      static
      symbol_type
      make_FALSE (const location_type& l)
      {
        return symbol_type (token::FALSE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FROM (location_type l)
      {
        return symbol_type (token::FROM, std::move (l));
      }
#else
      static
      symbol_type
      make_FROM (const location_type& l)
      {
        return symbol_type (token::FROM, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GeneralizedTime (location_type l)
      {
        return symbol_type (token::GeneralizedTime, std::move (l));
      }
#else
      static
      symbol_type
      make_GeneralizedTime (const location_type& l)
      {
        return symbol_type (token::GeneralizedTime, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GeneralString (location_type l)
      {
        return symbol_type (token::GeneralString, std::move (l));
      }
#else
      static
      symbol_type
      make_GeneralString (const location_type& l)
      {
        return symbol_type (token::GeneralString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GraphicString (location_type l)
      {
        return symbol_type (token::GraphicString, std::move (l));
      }
#else
      static
      symbol_type
      make_GraphicString (const location_type& l)
      {
        return symbol_type (token::GraphicString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IA5String (location_type l)
      {
        return symbol_type (token::IA5String, std::move (l));
      }
#else
      static
      symbol_type
      make_IA5String (const location_type& l)
      {
        return symbol_type (token::IA5String, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IDENTIFIER (location_type l)
      {
        return symbol_type (token::IDENTIFIER, std::move (l));
      }
#else
      static
      symbol_type
      make_IDENTIFIER (const location_type& l)
      {
        return symbol_type (token::IDENTIFIER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IMPLICIT (location_type l)
      {
        return symbol_type (token::IMPLICIT, std::move (l));
      }
#else
      static
      symbol_type
      make_IMPLICIT (const location_type& l)
      {
        return symbol_type (token::IMPLICIT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IMPLIED (location_type l)
      {
        return symbol_type (token::IMPLIED, std::move (l));
      }
#else
      static
      symbol_type
      make_IMPLIED (const location_type& l)
      {
        return symbol_type (token::IMPLIED, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IMPORTS (location_type l)
      {
        return symbol_type (token::IMPORTS, std::move (l));
      }
#else
      static
      symbol_type
      make_IMPORTS (const location_type& l)
      {
        return symbol_type (token::IMPORTS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INCLUDES (location_type l)
      {
        return symbol_type (token::INCLUDES, std::move (l));
      }
#else
      static
      symbol_type
      make_INCLUDES (const location_type& l)
      {
        return symbol_type (token::INCLUDES, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INSTANCE (location_type l)
      {
        return symbol_type (token::INSTANCE, std::move (l));
      }
#else
      static
      symbol_type
      make_INSTANCE (const location_type& l)
      {
        return symbol_type (token::INSTANCE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INSTRUCTIONS (location_type l)
      {
        return symbol_type (token::INSTRUCTIONS, std::move (l));
      }
#else
      static
      symbol_type
      make_INSTRUCTIONS (const location_type& l)
      {
        return symbol_type (token::INSTRUCTIONS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INTEGER (location_type l)
      {
        return symbol_type (token::INTEGER, std::move (l));
      }
#else
      static
      symbol_type
      make_INTEGER (const location_type& l)
      {
        return symbol_type (token::INTEGER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INTERSECTION (location_type l)
      {
        return symbol_type (token::INTERSECTION, std::move (l));
      }
#else
      static
      symbol_type
      make_INTERSECTION (const location_type& l)
      {
        return symbol_type (token::INTERSECTION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ISO646String (location_type l)
      {
        return symbol_type (token::ISO646String, std::move (l));
      }
#else
      static
      symbol_type
      make_ISO646String (const location_type& l)
      {
        return symbol_type (token::ISO646String, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MAX (location_type l)
      {
        return symbol_type (token::MAX, std::move (l));
      }
#else
      static
      symbol_type
      make_MAX (const location_type& l)
      {
        return symbol_type (token::MAX, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MIN (location_type l)
      {
        return symbol_type (token::MIN, std::move (l));
      }
#else
      static
      symbol_type
      make_MIN (const location_type& l)
      {
        return symbol_type (token::MIN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MINUS_INFINITY (location_type l)
      {
        return symbol_type (token::MINUS_INFINITY, std::move (l));
      }
#else
      static
      symbol_type
      make_MINUS_INFINITY (const location_type& l)
      {
        return symbol_type (token::MINUS_INFINITY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NOT_A_NUMBER (location_type l)
      {
        return symbol_type (token::NOT_A_NUMBER, std::move (l));
      }
#else
      static
      symbol_type
      make_NOT_A_NUMBER (const location_type& l)
      {
        return symbol_type (token::NOT_A_NUMBER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NumericString (location_type l)
      {
        return symbol_type (token::NumericString, std::move (l));
      }
#else
      static
      symbol_type
      make_NumericString (const location_type& l)
      {
        return symbol_type (token::NumericString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OBJECT (location_type l)
      {
        return symbol_type (token::OBJECT, std::move (l));
      }
#else
      static
      symbol_type
      make_OBJECT (const location_type& l)
      {
        return symbol_type (token::OBJECT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ObjectDescriptor (location_type l)
      {
        return symbol_type (token::ObjectDescriptor, std::move (l));
      }
#else
      static
      symbol_type
      make_ObjectDescriptor (const location_type& l)
      {
        return symbol_type (token::ObjectDescriptor, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OCTET (location_type l)
      {
        return symbol_type (token::OCTET, std::move (l));
      }
#else
      static
      symbol_type
      make_OCTET (const location_type& l)
      {
        return symbol_type (token::OCTET, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OF (location_type l)
      {
        return symbol_type (token::OF, std::move (l));
      }
#else
      static
      symbol_type
      make_OF (const location_type& l)
      {
        return symbol_type (token::OF, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OID_IRI (location_type l)
      {
        return symbol_type (token::OID_IRI, std::move (l));
      }
#else
      static
      symbol_type
      make_OID_IRI (const location_type& l)
      {
        return symbol_type (token::OID_IRI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OPTIONAL (location_type l)
      {
        return symbol_type (token::OPTIONAL, std::move (l));
      }
#else
      static
      symbol_type
      make_OPTIONAL (const location_type& l)
      {
        return symbol_type (token::OPTIONAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PATTERN (location_type l)
      {
        return symbol_type (token::PATTERN, std::move (l));
      }
#else
      static
      symbol_type
      make_PATTERN (const location_type& l)
      {
        return symbol_type (token::PATTERN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PDV (location_type l)
      {
        return symbol_type (token::PDV, std::move (l));
      }
#else
      static
      symbol_type
      make_PDV (const location_type& l)
      {
        return symbol_type (token::PDV, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PLUS_INFINITY (location_type l)
      {
        return symbol_type (token::PLUS_INFINITY, std::move (l));
      }
#else
      static
      symbol_type
      make_PLUS_INFINITY (const location_type& l)
      {
        return symbol_type (token::PLUS_INFINITY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PRESENT (location_type l)
      {
        return symbol_type (token::PRESENT, std::move (l));
      }
#else
      static
      symbol_type
      make_PRESENT (const location_type& l)
      {
        return symbol_type (token::PRESENT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PrintableString (location_type l)
      {
        return symbol_type (token::PrintableString, std::move (l));
      }
#else
      static
      symbol_type
      make_PrintableString (const location_type& l)
      {
        return symbol_type (token::PrintableString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PRIVATE (location_type l)
      {
        return symbol_type (token::PRIVATE, std::move (l));
      }
#else
      static
      symbol_type
      make_PRIVATE (const location_type& l)
      {
        return symbol_type (token::PRIVATE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_REAL (location_type l)
      {
        return symbol_type (token::REAL, std::move (l));
      }
#else
      static
      symbol_type
      make_REAL (const location_type& l)
      {
        return symbol_type (token::REAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_RELATIVE_OID (location_type l)
      {
        return symbol_type (token::RELATIVE_OID, std::move (l));
      }
#else
      static
      symbol_type
      make_RELATIVE_OID (const location_type& l)
      {
        return symbol_type (token::RELATIVE_OID, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_RELATIVE_OID_IRI (location_type l)
      {
        return symbol_type (token::RELATIVE_OID_IRI, std::move (l));
      }
#else
      static
      symbol_type
      make_RELATIVE_OID_IRI (const location_type& l)
      {
        return symbol_type (token::RELATIVE_OID_IRI, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SEQUENCE (location_type l)
      {
        return symbol_type (token::SEQUENCE, std::move (l));
      }
#else
      static
      symbol_type
      make_SEQUENCE (const location_type& l)
      {
        return symbol_type (token::SEQUENCE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SET (location_type l)
      {
        return symbol_type (token::SET, std::move (l));
      }
#else
      static
      symbol_type
      make_SET (const location_type& l)
      {
        return symbol_type (token::SET, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SETTINGS (location_type l)
      {
        return symbol_type (token::SETTINGS, std::move (l));
      }
#else
      static
      symbol_type
      make_SETTINGS (const location_type& l)
      {
        return symbol_type (token::SETTINGS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SIZE (location_type l)
      {
        return symbol_type (token::SIZE, std::move (l));
      }
#else
      static
      symbol_type
      make_SIZE (const location_type& l)
      {
        return symbol_type (token::SIZE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STRING (location_type l)
      {
        return symbol_type (token::STRING, std::move (l));
      }
#else
      static
      symbol_type
      make_STRING (const location_type& l)
      {
        return symbol_type (token::STRING, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SYNTAX (location_type l)
      {
        return symbol_type (token::SYNTAX, std::move (l));
      }
#else
      static
      symbol_type
      make_SYNTAX (const location_type& l)
      {
        return symbol_type (token::SYNTAX, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_T61String (location_type l)
      {
        return symbol_type (token::T61String, std::move (l));
      }
#else
      static
      symbol_type
      make_T61String (const location_type& l)
      {
        return symbol_type (token::T61String, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TAGS (location_type l)
      {
        return symbol_type (token::TAGS, std::move (l));
      }
#else
      static
      symbol_type
      make_TAGS (const location_type& l)
      {
        return symbol_type (token::TAGS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TeletexString (location_type l)
      {
        return symbol_type (token::TeletexString, std::move (l));
      }
#else
      static
      symbol_type
      make_TeletexString (const location_type& l)
      {
        return symbol_type (token::TeletexString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TIME (location_type l)
      {
        return symbol_type (token::TIME, std::move (l));
      }
#else
      static
      symbol_type
      make_TIME (const location_type& l)
      {
        return symbol_type (token::TIME, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TIME_OF_DAY (location_type l)
      {
        return symbol_type (token::TIME_OF_DAY, std::move (l));
      }
#else
      static
      symbol_type
      make_TIME_OF_DAY (const location_type& l)
      {
        return symbol_type (token::TIME_OF_DAY, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TRUE (location_type l)
      {
        return symbol_type (token::TRUE, std::move (l));
      }
#else
      static
      symbol_type
      make_TRUE (const location_type& l)
      {
        return symbol_type (token::TRUE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE_IDENTIFIER (location_type l)
      {
        return symbol_type (token::TYPE_IDENTIFIER, std::move (l));
      }
#else
      static
      symbol_type
      make_TYPE_IDENTIFIER (const location_type& l)
      {
        return symbol_type (token::TYPE_IDENTIFIER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UNION (location_type l)
      {
        return symbol_type (token::UNION, std::move (l));
      }
#else
      static
      symbol_type
      make_UNION (const location_type& l)
      {
        return symbol_type (token::UNION, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UNIQUE (location_type l)
      {
        return symbol_type (token::UNIQUE, std::move (l));
      }
#else
      static
      symbol_type
      make_UNIQUE (const location_type& l)
      {
        return symbol_type (token::UNIQUE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UNIVERSAL (location_type l)
      {
        return symbol_type (token::UNIVERSAL, std::move (l));
      }
#else
      static
      symbol_type
      make_UNIVERSAL (const location_type& l)
      {
        return symbol_type (token::UNIVERSAL, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UniversalString (location_type l)
      {
        return symbol_type (token::UniversalString, std::move (l));
      }
#else
      static
      symbol_type
      make_UniversalString (const location_type& l)
      {
        return symbol_type (token::UniversalString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UTCTime (location_type l)
      {
        return symbol_type (token::UTCTime, std::move (l));
      }
#else
      static
      symbol_type
      make_UTCTime (const location_type& l)
      {
        return symbol_type (token::UTCTime, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_UTF8String (location_type l)
      {
        return symbol_type (token::UTF8String, std::move (l));
      }
#else
      static
      symbol_type
      make_UTF8String (const location_type& l)
      {
        return symbol_type (token::UTF8String, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VideotexString (location_type l)
      {
        return symbol_type (token::VideotexString, std::move (l));
      }
#else
      static
      symbol_type
      make_VideotexString (const location_type& l)
      {
        return symbol_type (token::VideotexString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VisibleString (location_type l)
      {
        return symbol_type (token::VisibleString, std::move (l));
      }
#else
      static
      symbol_type
      make_VisibleString (const location_type& l)
      {
        return symbol_type (token::VisibleString, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_WITH (location_type l)
      {
        return symbol_type (token::WITH, std::move (l));
      }
#else
      static
      symbol_type
      make_WITH (const location_type& l)
      {
        return symbol_type (token::WITH, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DEFINED_AS (location_type l)
      {
        return symbol_type (token::DEFINED_AS, std::move (l));
      }
#else
      static
      symbol_type
      make_DEFINED_AS (const location_type& l)
      {
        return symbol_type (token::DEFINED_AS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ELIPSIS (location_type l)
      {
        return symbol_type (token::ELIPSIS, std::move (l));
      }
#else
      static
      symbol_type
      make_ELIPSIS (const location_type& l)
      {
        return symbol_type (token::ELIPSIS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_RANGE (location_type l)
      {
        return symbol_type (token::RANGE, std::move (l));
      }
#else
      static
      symbol_type
      make_RANGE (const location_type& l)
      {
        return symbol_type (token::RANGE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OPEN_BRACE (location_type l)
      {
        return symbol_type (token::OPEN_BRACE, std::move (l));
      }
#else
      static
      symbol_type
      make_OPEN_BRACE (const location_type& l)
      {
        return symbol_type (token::OPEN_BRACE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CLOSE_BRACE (location_type l)
      {
        return symbol_type (token::CLOSE_BRACE, std::move (l));
      }
#else
      static
      symbol_type
      make_CLOSE_BRACE (const location_type& l)
      {
        return symbol_type (token::CLOSE_BRACE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OPEN_PARENTHESIS (location_type l)
      {
        return symbol_type (token::OPEN_PARENTHESIS, std::move (l));
      }
#else
      static
      symbol_type
      make_OPEN_PARENTHESIS (const location_type& l)
      {
        return symbol_type (token::OPEN_PARENTHESIS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CLOSE_PARENTHESIS (location_type l)
      {
        return symbol_type (token::CLOSE_PARENTHESIS, std::move (l));
      }
#else
      static
      symbol_type
      make_CLOSE_PARENTHESIS (const location_type& l)
      {
        return symbol_type (token::CLOSE_PARENTHESIS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_OPEN_SQUARE_BRACKET (location_type l)
      {
        return symbol_type (token::OPEN_SQUARE_BRACKET, std::move (l));
      }
#else
      static
      symbol_type
      make_OPEN_SQUARE_BRACKET (const location_type& l)
      {
        return symbol_type (token::OPEN_SQUARE_BRACKET, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_CLOSE_SQUARE_BRACKET (location_type l)
      {
        return symbol_type (token::CLOSE_SQUARE_BRACKET, std::move (l));
      }
#else
      static
      symbol_type
      make_CLOSE_SQUARE_BRACKET (const location_type& l)
      {
        return symbol_type (token::CLOSE_SQUARE_BRACKET, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LESS_THAN (location_type l)
      {
        return symbol_type (token::LESS_THAN, std::move (l));
      }
#else
      static
      symbol_type
      make_LESS_THAN (const location_type& l)
      {
        return symbol_type (token::LESS_THAN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GREATER_THAN (location_type l)
      {
        return symbol_type (token::GREATER_THAN, std::move (l));
      }
#else
      static
      symbol_type
      make_GREATER_THAN (const location_type& l)
      {
        return symbol_type (token::GREATER_THAN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXCLAMATION_MARK (location_type l)
      {
        return symbol_type (token::EXCLAMATION_MARK, std::move (l));
      }
#else
      static
      symbol_type
      make_EXCLAMATION_MARK (const location_type& l)
      {
        return symbol_type (token::EXCLAMATION_MARK, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_QUOTATION_MARK (location_type l)
      {
        return symbol_type (token::QUOTATION_MARK, std::move (l));
      }
#else
      static
      symbol_type
      make_QUOTATION_MARK (const location_type& l)
      {
        return symbol_type (token::QUOTATION_MARK, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_AMPERSAND (location_type l)
      {
        return symbol_type (token::AMPERSAND, std::move (l));
      }
#else
      static
      symbol_type
      make_AMPERSAND (const location_type& l)
      {
        return symbol_type (token::AMPERSAND, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_APOSTROPHE (location_type l)
      {
        return symbol_type (token::APOSTROPHE, std::move (l));
      }
#else
      static
      symbol_type
      make_APOSTROPHE (const location_type& l)
      {
        return symbol_type (token::APOSTROPHE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ASTERISK (location_type l)
      {
        return symbol_type (token::ASTERISK, std::move (l));
      }
#else
      static
      symbol_type
      make_ASTERISK (const location_type& l)
      {
        return symbol_type (token::ASTERISK, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COMMA (location_type l)
      {
        return symbol_type (token::COMMA, std::move (l));
      }
#else
      static
      symbol_type
      make_COMMA (const location_type& l)
      {
        return symbol_type (token::COMMA, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FULL_STOP (location_type l)
      {
        return symbol_type (token::FULL_STOP, std::move (l));
      }
#else
      static
      symbol_type
      make_FULL_STOP (const location_type& l)
      {
        return symbol_type (token::FULL_STOP, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_HYPHEN_MINUS (location_type l)
      {
        return symbol_type (token::HYPHEN_MINUS, std::move (l));
      }
#else
      static
      symbol_type
      make_HYPHEN_MINUS (const location_type& l)
      {
        return symbol_type (token::HYPHEN_MINUS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SOLIDUS (location_type l)
      {
        return symbol_type (token::SOLIDUS, std::move (l));
      }
#else
      static
      symbol_type
      make_SOLIDUS (const location_type& l)
      {
        return symbol_type (token::SOLIDUS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_COLON (location_type l)
      {
        return symbol_type (token::COLON, std::move (l));
      }
#else
      static
      symbol_type
      make_COLON (const location_type& l)
      {
        return symbol_type (token::COLON, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SEMICOLON (location_type l)
      {
        return symbol_type (token::SEMICOLON, std::move (l));
      }
#else
      static
      symbol_type
      make_SEMICOLON (const location_type& l)
      {
        return symbol_type (token::SEMICOLON, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EQUALS_SIGN (location_type l)
      {
        return symbol_type (token::EQUALS_SIGN, std::move (l));
      }
#else
      static
      symbol_type
      make_EQUALS_SIGN (const location_type& l)
      {
        return symbol_type (token::EQUALS_SIGN, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_AT (location_type l)
      {
        return symbol_type (token::AT, std::move (l));
      }
#else
      static
      symbol_type
      make_AT (const location_type& l)
      {
        return symbol_type (token::AT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VERTICAL_LINE (location_type l)
      {
        return symbol_type (token::VERTICAL_LINE, std::move (l));
      }
#else
      static
      symbol_type
      make_VERTICAL_LINE (const location_type& l)
      {
        return symbol_type (token::VERTICAL_LINE, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ACCENT (location_type l)
      {
        return symbol_type (token::ACCENT, std::move (l));
      }
#else
      static
      symbol_type
      make_ACCENT (const location_type& l)
      {
        return symbol_type (token::ACCENT, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PLUS (location_type l)
      {
        return symbol_type (token::PLUS, std::move (l));
      }
#else
      static
      symbol_type
      make_PLUS (const location_type& l)
      {
        return symbol_type (token::PLUS, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STAR (location_type l)
      {
        return symbol_type (token::STAR, std::move (l));
      }
#else
      static
      symbol_type
      make_STAR (const location_type& l)
      {
        return symbol_type (token::STAR, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GENERIC_IDENTIFIER_UPPERCASE (std::string v, location_type l)
      {
        return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_GENERIC_IDENTIFIER_UPPERCASE (const std::string& v, const location_type& l)
      {
        return symbol_type (token::GENERIC_IDENTIFIER_UPPERCASE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GENERIC_IDENTIFIER_LOWERCASE (std::string v, location_type l)
      {
        return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, std::move (v), std::move (l));
      }
#else
      static
      symbol_type
      make_GENERIC_IDENTIFIER_LOWERCASE (const std::string& v, const location_type& l)
      {
        return symbol_type (token::GENERIC_IDENTIFIER_LOWERCASE, v, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GENERIC_INTEGER (location_type l)
      {
        return symbol_type (token::GENERIC_INTEGER, std::move (l));
      }
#else
      static
      symbol_type
      make_GENERIC_INTEGER (const location_type& l)
      {
        return symbol_type (token::GENERIC_INTEGER, l);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_xmlasn1typename (location_type l)
      {
        return symbol_type (token::xmlasn1typename, std::move (l));
      }
#else
      static
      symbol_type
      make_xmlasn1typename (const location_type& l)
      {
        return symbol_type (token::xmlasn1typename, l);
      }
#endif


  private:
    /// This class is not copyable.
    asn1_parser (const asn1_parser&);
    asn1_parser& operator= (const asn1_parser&);

    /// State numbers.
    typedef int state_type;

    /// Generate an error message.
    /// \param yystate   the state where the error occurred.
    /// \param yyla      the lookahead token.
    virtual std::string yysyntax_error_ (state_type yystate,
                                         const symbol_type& yyla) const;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const short yypact_ninf_;
    static const short yytable_ninf_;

    /// Convert a scanner token number \a t to a symbol number.
    static token_number_type yytranslate_ (token_type t);

    // Tables.
  // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
  // STATE-NUM.
  static const short yypact_[];

  // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
  // Performed when YYTABLE does not specify something else to do.  Zero
  // means the default is an error.
  static const unsigned short yydefact_[];

  // YYPGOTO[NTERM-NUM].
  static const short yypgoto_[];

  // YYDEFGOTO[NTERM-NUM].
  static const short yydefgoto_[];

  // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
  // positive, shift that token.  If negative, reduce the rule whose
  // number is the opposite.  If YYTABLE_NINF, syntax error.
  static const short yytable_[];

  static const short yycheck_[];

  // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
  // symbol of state STATE-NUM.
  static const unsigned short yystos_[];

  // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
  static const unsigned short yyr1_[];

  // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
  static const unsigned char yyr2_[];


    /// Convert the symbol name \a n to a form suitable for a diagnostic.
    static std::string yytnamerr_ (const char *n);


    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#if YYDEBUG
  // YYRLINE[YYN] -- Source line where rule number YYN was defined.
  static const unsigned short yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r);
    /// Print the state stack on the debug stream.
    virtual void yystack_print_ ();

    /// Debugging level.
    int yydebug_;
    /// Debug stream.
    std::ostream* yycdebug_;

    /// \brief Display a symbol type, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state () YY_NOEXCEPT;

      /// The symbol type as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s) YY_NOEXCEPT;

      /// Copy constructor.
      by_state (const by_state& that) YY_NOEXCEPT;

      /// Record that this symbol is empty.
      void clear () YY_NOEXCEPT;

      /// Steal the symbol type from \a that.
      void move (by_state& that);

      /// The (internal) type number (corresponding to \a state).
      /// \a empty_symbol when empty.
      symbol_number_type type_get () const YY_NOEXCEPT;

      /// The state number used to denote an empty symbol.
      enum { empty_state = -1 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Move or copy construction.
      stack_symbol_type (YY_RVREF (stack_symbol_type) that);
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) sym);
#if YY_CPLUSPLUS < 201103L
      /// Assignment, needed by push_back by some old implementations.
      /// Moves the contents of that.
      stack_symbol_type& operator= (stack_symbol_type& that);
#endif
    };

    /// A stack with random access from its top.
    template <typename T, typename S = std::vector<T> >
    class stack
    {
    public:
      // Hide our reversed order.
      typedef typename S::reverse_iterator iterator;
      typedef typename S::const_reverse_iterator const_iterator;
      typedef typename S::size_type size_type;

      stack (size_type n = 200)
        : seq_ (n)
      {}

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      T&
      operator[] (size_type i)
      {
        return seq_[size () - 1 - i];
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      T&
      operator[] (int i)
      {
        return operator[] (size_type (i));
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      const T&
      operator[] (size_type i) const
      {
        return seq_[size () - 1 - i];
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      const T&
      operator[] (int i) const
      {
        return operator[] (size_type (i));
      }

      /// Steal the contents of \a t.
      ///
      /// Close to move-semantics.
      void
      push (YY_MOVE_REF (T) t)
      {
        seq_.push_back (T ());
        operator[] (0).move (t);
      }

      /// Pop elements from the stack.
      void
      pop (int n = 1) YY_NOEXCEPT
      {
        for (; 0 < n; --n)
          seq_.pop_back ();
      }

      /// Pop all elements from the stack.
      void
      clear () YY_NOEXCEPT
      {
        seq_.clear ();
      }

      /// Number of elements on the stack.
      size_type
      size () const YY_NOEXCEPT
      {
        return seq_.size ();
      }

      /// Iterator on top of the stack (going downwards).
      const_iterator
      begin () const YY_NOEXCEPT
      {
        return seq_.rbegin ();
      }

      /// Bottom of the stack.
      const_iterator
      end () const YY_NOEXCEPT
      {
        return seq_.rend ();
      }

      /// Present a slice of the top of a stack.
      class slice
      {
      public:
        slice (const stack& stack, int range)
          : stack_ (stack)
          , range_ (range)
        {}

        const T&
        operator[] (int i) const
        {
          return stack_[range_ - i];
        }

      private:
        const stack& stack_;
        int range_;
      };

    private:
      stack (const stack&);
      stack& operator= (const stack&);
      /// The wrapped container.
      S seq_;
    };


    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param sym  the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a sym.value is stolen.
    void yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym);

    /// Pop \a n symbols from the stack.
    void yypop_ (int n = 1);

    /// Constants.
    enum
    {
      yyeof_ = 0,
      yylast_ = 4756,     ///< Last index in yytable_.
      yynnts_ = 225,  ///< Number of nonterminal symbols.
      yyfinal_ = 6, ///< Termination state number.
      yyterror_ = 1,
      yyerrcode_ = 256,
      yyntokens_ = 153  ///< Number of tokens.
    };


    // User arguments.
    Context& context;
  };

  asn1_parser::token_number_type
  asn1_parser::yytranslate_ (token_type t)
  {
    // YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to
    // TOKEN-NUM as returned by yylex.
    static
    const token_number_type
    translate_table[] =
    {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152
    };
    const unsigned user_token_number_max_ = 407;
    const token_number_type undef_token_ = 2;

    if (static_cast<int> (t) <= yyeof_)
      return yyeof_;
    else if (static_cast<unsigned> (t) <= user_token_number_max_)
      return translate_table[t];
    else
      return undef_token_;
  }

  // basic_symbol.
#if 201103L <= YY_CPLUSPLUS
  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (basic_symbol&& that)
    : Base (std::move (that))
    , value ()
    , location (std::move (that.location))
  {
    switch (this->type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.move< Assignment > (std::move (that.value));
        break;

      case 283: // BitStringType
        value.move< BitStringType > (std::move (that.value));
        break;

      case 272: // BooleanType
        value.move< BooleanType > (std::move (that.value));
        break;

      case 264: // BuiltinType
        value.move< BuiltinType > (std::move (that.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.move< CharacterStringType > (std::move (that.value));
        break;

      case 295: // ChoiceType
        value.move< ChoiceType > (std::move (that.value));
        break;

      case 305: // Class
        value.move< Class > (std::move (that.value));
        break;

      case 291: // ComponentType
        value.move< ComponentType > (std::move (that.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.move< ComponentTypeList > (std::move (that.value));
        break;

      case 326: // DateTimeType
        value.move< DateTimeType > (std::move (that.value));
        break;

      case 324: // DateType
        value.move< DateType > (std::move (that.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.move< DefinedType > (std::move (that.value));
        break;

      case 253: // DefinedValue
        value.move< DefinedValue > (std::move (that.value));
        break;

      case 327: // DurationType
        value.move< DurationType > (std::move (that.value));
        break;

      case 320: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (std::move (that.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.move< EnumeratedType > (std::move (that.value));
        break;

      case 281: // EnumerationItem
        value.move< EnumerationValue > (std::move (that.value));
        break;

      case 321: // ExternalType
        value.move< ExternalType > (std::move (that.value));
        break;

      case 314: // IRIType
        value.move< IRIType > (std::move (that.value));
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (std::move (that.value));
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (std::move (that.value));
        break;

      case 274: // IntegerType
        value.move< IntegerType > (std::move (that.value));
        break;

      case 239: // ModuleBody
        value.move< Module > (std::move (that.value));
        break;

      case 276: // NamedNumber
        value.move< NamedNumber > (std::move (that.value));
        break;

      case 265: // NamedType
        value.move< NamedType > (std::move (that.value));
        break;

      case 287: // NullType
        value.move< NullType > (std::move (that.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.move< ObjectClassAssignment > (std::move (that.value));
        break;

      case 202: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (std::move (that.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (std::move (that.value));
        break;

      case 306: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (std::move (that.value));
        break;

      case 286: // OctetStringType
        value.move< OctetStringType > (std::move (that.value));
        break;

      case 210: // Parameter
        value.move< Parameter > (std::move (that.value));
        break;

      case 300: // PrefixedType
        value.move< PrefixedType > (std::move (that.value));
        break;

      case 282: // RealType
        value.move< RealType > (std::move (that.value));
        break;

      case 319: // RelativeIRIType
        value.move< RelativeIRIType > (std::move (that.value));
        break;

      case 313: // RelativeOIDType
        value.move< RelativeOIDType > (std::move (that.value));
        break;

      case 292: // SequenceOfType
        value.move< SequenceOfType > (std::move (that.value));
        break;

      case 288: // SequenceType
        value.move< SequenceType > (std::move (that.value));
        break;

      case 294: // SetOfType
        value.move< SetOfType > (std::move (that.value));
        break;

      case 293: // SetType
        value.move< SetType > (std::move (that.value));
        break;

      case 302: // Tag
        value.move< Tag > (std::move (that.value));
        break;

      case 301: // TaggedType
        value.move< TaggedType > (std::move (that.value));
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (std::move (that.value));
        break;

      case 325: // TimeOfDayType
        value.move< TimeOfDayType > (std::move (that.value));
        break;

      case 322: // TimeType
        value.move< TimeType > (std::move (that.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.move< Type > (std::move (that.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.move< Value > (std::move (that.value));
        break;

      case 6: // realnumber
        value.move< double > (std::move (that.value));
        break;

      case 304: // ClassNumber
        value.move< int > (std::move (that.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.move< long long > (std::move (that.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (std::move (that.value));
        break;

      case 250: // AssignmentList
        value.move< std::vector<Assignment> > (std::move (that.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (std::move (that.value));
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (std::move (that.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (std::move (that.value));
        break;

      case 275: // NamedNumberList
        value.move< std::vector<NamedNumber> > (std::move (that.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.move< std::vector<NamedType> > (std::move (that.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (std::move (that.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::vector<Parameter> > (std::move (that.value));
        break;

      case 256: // ActualParameterList
        value.move< std::vector<Type> > (std::move (that.value));
        break;

      case 271: // SequenceOfValues
        value.move< std::vector<Value> > (std::move (that.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.move< std::vector<std::string> > (std::move (that.value));
        break;

      default:
        break;
    }

  }
#endif

  template <typename Base>
  asn1_parser::basic_symbol<Base>::basic_symbol (const basic_symbol& that)
    : Base (that)
    , value ()
    , location (that.location)
  {
    switch (this->type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.copy< Assignment > (YY_MOVE (that.value));
        break;

      case 283: // BitStringType
        value.copy< BitStringType > (YY_MOVE (that.value));
        break;

      case 272: // BooleanType
        value.copy< BooleanType > (YY_MOVE (that.value));
        break;

      case 264: // BuiltinType
        value.copy< BuiltinType > (YY_MOVE (that.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.copy< CharacterStringType > (YY_MOVE (that.value));
        break;

      case 295: // ChoiceType
        value.copy< ChoiceType > (YY_MOVE (that.value));
        break;

      case 305: // Class
        value.copy< Class > (YY_MOVE (that.value));
        break;

      case 291: // ComponentType
        value.copy< ComponentType > (YY_MOVE (that.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.copy< ComponentTypeList > (YY_MOVE (that.value));
        break;

      case 326: // DateTimeType
        value.copy< DateTimeType > (YY_MOVE (that.value));
        break;

      case 324: // DateType
        value.copy< DateType > (YY_MOVE (that.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.copy< DefinedType > (YY_MOVE (that.value));
        break;

      case 253: // DefinedValue
        value.copy< DefinedValue > (YY_MOVE (that.value));
        break;

      case 327: // DurationType
        value.copy< DurationType > (YY_MOVE (that.value));
        break;

      case 320: // EmbeddedPDVType
        value.copy< EmbeddedPDVType > (YY_MOVE (that.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.copy< EnumeratedType > (YY_MOVE (that.value));
        break;

      case 281: // EnumerationItem
        value.copy< EnumerationValue > (YY_MOVE (that.value));
        break;

      case 321: // ExternalType
        value.copy< ExternalType > (YY_MOVE (that.value));
        break;

      case 314: // IRIType
        value.copy< IRIType > (YY_MOVE (that.value));
        break;

      case 245: // SymbolsFromModule
        value.copy< Import > (YY_MOVE (that.value));
        break;

      case 215: // InstanceOfType
        value.copy< InstanceOfType > (YY_MOVE (that.value));
        break;

      case 274: // IntegerType
        value.copy< IntegerType > (YY_MOVE (that.value));
        break;

      case 239: // ModuleBody
        value.copy< Module > (YY_MOVE (that.value));
        break;

      case 276: // NamedNumber
        value.copy< NamedNumber > (YY_MOVE (that.value));
        break;

      case 265: // NamedType
        value.copy< NamedType > (YY_MOVE (that.value));
        break;

      case 287: // NullType
        value.copy< NullType > (YY_MOVE (that.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.copy< ObjectClassAssignment > (YY_MOVE (that.value));
        break;

      case 202: // ObjectClassFieldType
        value.copy< ObjectClassFieldType > (YY_MOVE (that.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.copy< ObjectIdComponentValue > (YY_MOVE (that.value));
        break;

      case 306: // ObjectIdentifierType
        value.copy< ObjectIdentifierType > (YY_MOVE (that.value));
        break;

      case 286: // OctetStringType
        value.copy< OctetStringType > (YY_MOVE (that.value));
        break;

      case 210: // Parameter
        value.copy< Parameter > (YY_MOVE (that.value));
        break;

      case 300: // PrefixedType
        value.copy< PrefixedType > (YY_MOVE (that.value));
        break;

      case 282: // RealType
        value.copy< RealType > (YY_MOVE (that.value));
        break;

      case 319: // RelativeIRIType
        value.copy< RelativeIRIType > (YY_MOVE (that.value));
        break;

      case 313: // RelativeOIDType
        value.copy< RelativeOIDType > (YY_MOVE (that.value));
        break;

      case 292: // SequenceOfType
        value.copy< SequenceOfType > (YY_MOVE (that.value));
        break;

      case 288: // SequenceType
        value.copy< SequenceType > (YY_MOVE (that.value));
        break;

      case 294: // SetOfType
        value.copy< SetOfType > (YY_MOVE (that.value));
        break;

      case 293: // SetType
        value.copy< SetType > (YY_MOVE (that.value));
        break;

      case 302: // Tag
        value.copy< Tag > (YY_MOVE (that.value));
        break;

      case 301: // TaggedType
        value.copy< TaggedType > (YY_MOVE (that.value));
        break;

      case 237: // TagDefault
        value.copy< TaggingMode > (YY_MOVE (that.value));
        break;

      case 325: // TimeOfDayType
        value.copy< TimeOfDayType > (YY_MOVE (that.value));
        break;

      case 322: // TimeType
        value.copy< TimeType > (YY_MOVE (that.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.copy< Type > (YY_MOVE (that.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.copy< Value > (YY_MOVE (that.value));
        break;

      case 6: // realnumber
        value.copy< double > (YY_MOVE (that.value));
        break;

      case 304: // ClassNumber
        value.copy< int > (YY_MOVE (that.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.copy< long long > (YY_MOVE (that.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.copy< std::string > (YY_MOVE (that.value));
        break;

      case 250: // AssignmentList
        value.copy< std::vector<Assignment> > (YY_MOVE (that.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.copy< std::vector<ClassField> > (YY_MOVE (that.value));
        break;

      case 240: // Exports
        value.copy< std::vector<Export> > (YY_MOVE (that.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.copy< std::vector<Import> > (YY_MOVE (that.value));
        break;

      case 275: // NamedNumberList
        value.copy< std::vector<NamedNumber> > (YY_MOVE (that.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.copy< std::vector<NamedType> > (YY_MOVE (that.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.copy< std::vector<ObjectIdComponentValue> > (YY_MOVE (that.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.copy< std::vector<Parameter> > (YY_MOVE (that.value));
        break;

      case 256: // ActualParameterList
        value.copy< std::vector<Type> > (YY_MOVE (that.value));
        break;

      case 271: // SequenceOfValues
        value.copy< std::vector<Value> > (YY_MOVE (that.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.copy< std::vector<std::string> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

  }



  template <typename Base>
  bool
  asn1_parser::basic_symbol<Base>::empty () const YY_NOEXCEPT
  {
    return Base::type_get () == empty_symbol;
  }

  template <typename Base>
  void
  asn1_parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move (s);
    switch (this->type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.move< Assignment > (YY_MOVE (s.value));
        break;

      case 283: // BitStringType
        value.move< BitStringType > (YY_MOVE (s.value));
        break;

      case 272: // BooleanType
        value.move< BooleanType > (YY_MOVE (s.value));
        break;

      case 264: // BuiltinType
        value.move< BuiltinType > (YY_MOVE (s.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.move< CharacterStringType > (YY_MOVE (s.value));
        break;

      case 295: // ChoiceType
        value.move< ChoiceType > (YY_MOVE (s.value));
        break;

      case 305: // Class
        value.move< Class > (YY_MOVE (s.value));
        break;

      case 291: // ComponentType
        value.move< ComponentType > (YY_MOVE (s.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.move< ComponentTypeList > (YY_MOVE (s.value));
        break;

      case 326: // DateTimeType
        value.move< DateTimeType > (YY_MOVE (s.value));
        break;

      case 324: // DateType
        value.move< DateType > (YY_MOVE (s.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.move< DefinedType > (YY_MOVE (s.value));
        break;

      case 253: // DefinedValue
        value.move< DefinedValue > (YY_MOVE (s.value));
        break;

      case 327: // DurationType
        value.move< DurationType > (YY_MOVE (s.value));
        break;

      case 320: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (YY_MOVE (s.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.move< EnumeratedType > (YY_MOVE (s.value));
        break;

      case 281: // EnumerationItem
        value.move< EnumerationValue > (YY_MOVE (s.value));
        break;

      case 321: // ExternalType
        value.move< ExternalType > (YY_MOVE (s.value));
        break;

      case 314: // IRIType
        value.move< IRIType > (YY_MOVE (s.value));
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (YY_MOVE (s.value));
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (YY_MOVE (s.value));
        break;

      case 274: // IntegerType
        value.move< IntegerType > (YY_MOVE (s.value));
        break;

      case 239: // ModuleBody
        value.move< Module > (YY_MOVE (s.value));
        break;

      case 276: // NamedNumber
        value.move< NamedNumber > (YY_MOVE (s.value));
        break;

      case 265: // NamedType
        value.move< NamedType > (YY_MOVE (s.value));
        break;

      case 287: // NullType
        value.move< NullType > (YY_MOVE (s.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.move< ObjectClassAssignment > (YY_MOVE (s.value));
        break;

      case 202: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (YY_MOVE (s.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (YY_MOVE (s.value));
        break;

      case 306: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (YY_MOVE (s.value));
        break;

      case 286: // OctetStringType
        value.move< OctetStringType > (YY_MOVE (s.value));
        break;

      case 210: // Parameter
        value.move< Parameter > (YY_MOVE (s.value));
        break;

      case 300: // PrefixedType
        value.move< PrefixedType > (YY_MOVE (s.value));
        break;

      case 282: // RealType
        value.move< RealType > (YY_MOVE (s.value));
        break;

      case 319: // RelativeIRIType
        value.move< RelativeIRIType > (YY_MOVE (s.value));
        break;

      case 313: // RelativeOIDType
        value.move< RelativeOIDType > (YY_MOVE (s.value));
        break;

      case 292: // SequenceOfType
        value.move< SequenceOfType > (YY_MOVE (s.value));
        break;

      case 288: // SequenceType
        value.move< SequenceType > (YY_MOVE (s.value));
        break;

      case 294: // SetOfType
        value.move< SetOfType > (YY_MOVE (s.value));
        break;

      case 293: // SetType
        value.move< SetType > (YY_MOVE (s.value));
        break;

      case 302: // Tag
        value.move< Tag > (YY_MOVE (s.value));
        break;

      case 301: // TaggedType
        value.move< TaggedType > (YY_MOVE (s.value));
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (YY_MOVE (s.value));
        break;

      case 325: // TimeOfDayType
        value.move< TimeOfDayType > (YY_MOVE (s.value));
        break;

      case 322: // TimeType
        value.move< TimeType > (YY_MOVE (s.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.move< Type > (YY_MOVE (s.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.move< Value > (YY_MOVE (s.value));
        break;

      case 6: // realnumber
        value.move< double > (YY_MOVE (s.value));
        break;

      case 304: // ClassNumber
        value.move< int > (YY_MOVE (s.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.move< long long > (YY_MOVE (s.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (YY_MOVE (s.value));
        break;

      case 250: // AssignmentList
        value.move< std::vector<Assignment> > (YY_MOVE (s.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (YY_MOVE (s.value));
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (YY_MOVE (s.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (YY_MOVE (s.value));
        break;

      case 275: // NamedNumberList
        value.move< std::vector<NamedNumber> > (YY_MOVE (s.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.move< std::vector<NamedType> > (YY_MOVE (s.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (YY_MOVE (s.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::vector<Parameter> > (YY_MOVE (s.value));
        break;

      case 256: // ActualParameterList
        value.move< std::vector<Type> > (YY_MOVE (s.value));
        break;

      case 271: // SequenceOfValues
        value.move< std::vector<Value> > (YY_MOVE (s.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.move< std::vector<std::string> > (YY_MOVE (s.value));
        break;

      default:
        break;
    }

    location = YY_MOVE (s.location);
  }

  // by_type.
  asn1_parser::by_type::by_type ()
    : type (empty_symbol)
  {}

#if 201103L <= YY_CPLUSPLUS
  asn1_parser::by_type::by_type (by_type&& that)
    : type (that.type)
  {
    that.clear ();
  }
#endif

  asn1_parser::by_type::by_type (const by_type& that)
    : type (that.type)
  {}

  asn1_parser::by_type::by_type (token_type t)
    : type (yytranslate_ (t))
  {}

  void
  asn1_parser::by_type::clear ()
  {
    type = empty_symbol;
  }

  void
  asn1_parser::by_type::move (by_type& that)
  {
    type = that.type;
    that.clear ();
  }

  int
  asn1_parser::by_type::type_get () const YY_NOEXCEPT
  {
    return type;
  }

  asn1_parser::token_type
  asn1_parser::by_type::token () const YY_NOEXCEPT
  {
    // YYTOKNUM[NUM] -- (External) token number corresponding to the
    // (internal) symbol number NUM (which must be that of a token).  */
    static
    const unsigned short
    yytoken_number_[] =
    {
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407
    };
    return token_type (yytoken_number_[type]);
  }


} // yy
#line 6098 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:431






// Unqualified %code blocks.
#line 16 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:435

    struct Context
    {
        const char* cursor;
        yy::location location;

        Asn1Tree asn1_tree;
    };
    void yy::asn1_parser::error(const location_type& l, const std::string& m)
    {
        std::cerr << l << m << '\n';
    }

    namespace yy { asn1_parser::symbol_type yylex(Context& c); }

#line 6122 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:435


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

// Whether we are compiled with exception support.
#ifndef YY_EXCEPTIONS
# if defined __GNUC__ && !defined __EXCEPTIONS
#  define YY_EXCEPTIONS 0
# else
#  define YY_EXCEPTIONS 1
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (false)
# endif


// Suppress unused-variable warnings by "using" E.
#define YYUSE(E) ((void) (E))

// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << '\n';                       \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yystack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE (Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void> (0)
# define YY_STACK_PRINT()                static_cast<void> (0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)


namespace yy {
#line 6217 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:510

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  asn1_parser::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr;
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              else
                goto append;

            append:
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }


  /// Build a parser object.
  asn1_parser::asn1_parser (Context& context_yyarg)
    :
#if YYDEBUG
      yydebug_ (false),
      yycdebug_ (&std::cerr),
#endif
      context (context_yyarg)
  {}

  asn1_parser::~asn1_parser ()
  {}

  asn1_parser::syntax_error::~syntax_error () YY_NOEXCEPT YY_NOTHROW
  {}

  /*---------------.
  | Symbol types.  |
  `---------------*/



  // by_state.
  asn1_parser::by_state::by_state () YY_NOEXCEPT
    : state (empty_state)
  {}

  asn1_parser::by_state::by_state (const by_state& that) YY_NOEXCEPT
    : state (that.state)
  {}

  void
  asn1_parser::by_state::clear () YY_NOEXCEPT
  {
    state = empty_state;
  }

  void
  asn1_parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  asn1_parser::by_state::by_state (state_type s) YY_NOEXCEPT
    : state (s)
  {}

  asn1_parser::symbol_number_type
  asn1_parser::by_state::type_get () const YY_NOEXCEPT
  {
    if (state == empty_state)
      return empty_symbol;
    else
      return yystos_[state];
  }

  asn1_parser::stack_symbol_type::stack_symbol_type ()
  {}

  asn1_parser::stack_symbol_type::stack_symbol_type (YY_RVREF (stack_symbol_type) that)
    : super_type (YY_MOVE (that.state), YY_MOVE (that.location))
  {
    switch (that.type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.YY_MOVE_OR_COPY< Assignment > (YY_MOVE (that.value));
        break;

      case 283: // BitStringType
        value.YY_MOVE_OR_COPY< BitStringType > (YY_MOVE (that.value));
        break;

      case 272: // BooleanType
        value.YY_MOVE_OR_COPY< BooleanType > (YY_MOVE (that.value));
        break;

      case 264: // BuiltinType
        value.YY_MOVE_OR_COPY< BuiltinType > (YY_MOVE (that.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.YY_MOVE_OR_COPY< CharacterStringType > (YY_MOVE (that.value));
        break;

      case 295: // ChoiceType
        value.YY_MOVE_OR_COPY< ChoiceType > (YY_MOVE (that.value));
        break;

      case 305: // Class
        value.YY_MOVE_OR_COPY< Class > (YY_MOVE (that.value));
        break;

      case 291: // ComponentType
        value.YY_MOVE_OR_COPY< ComponentType > (YY_MOVE (that.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.YY_MOVE_OR_COPY< ComponentTypeList > (YY_MOVE (that.value));
        break;

      case 326: // DateTimeType
        value.YY_MOVE_OR_COPY< DateTimeType > (YY_MOVE (that.value));
        break;

      case 324: // DateType
        value.YY_MOVE_OR_COPY< DateType > (YY_MOVE (that.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.YY_MOVE_OR_COPY< DefinedType > (YY_MOVE (that.value));
        break;

      case 253: // DefinedValue
        value.YY_MOVE_OR_COPY< DefinedValue > (YY_MOVE (that.value));
        break;

      case 327: // DurationType
        value.YY_MOVE_OR_COPY< DurationType > (YY_MOVE (that.value));
        break;

      case 320: // EmbeddedPDVType
        value.YY_MOVE_OR_COPY< EmbeddedPDVType > (YY_MOVE (that.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.YY_MOVE_OR_COPY< EnumeratedType > (YY_MOVE (that.value));
        break;

      case 281: // EnumerationItem
        value.YY_MOVE_OR_COPY< EnumerationValue > (YY_MOVE (that.value));
        break;

      case 321: // ExternalType
        value.YY_MOVE_OR_COPY< ExternalType > (YY_MOVE (that.value));
        break;

      case 314: // IRIType
        value.YY_MOVE_OR_COPY< IRIType > (YY_MOVE (that.value));
        break;

      case 245: // SymbolsFromModule
        value.YY_MOVE_OR_COPY< Import > (YY_MOVE (that.value));
        break;

      case 215: // InstanceOfType
        value.YY_MOVE_OR_COPY< InstanceOfType > (YY_MOVE (that.value));
        break;

      case 274: // IntegerType
        value.YY_MOVE_OR_COPY< IntegerType > (YY_MOVE (that.value));
        break;

      case 239: // ModuleBody
        value.YY_MOVE_OR_COPY< Module > (YY_MOVE (that.value));
        break;

      case 276: // NamedNumber
        value.YY_MOVE_OR_COPY< NamedNumber > (YY_MOVE (that.value));
        break;

      case 265: // NamedType
        value.YY_MOVE_OR_COPY< NamedType > (YY_MOVE (that.value));
        break;

      case 287: // NullType
        value.YY_MOVE_OR_COPY< NullType > (YY_MOVE (that.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.YY_MOVE_OR_COPY< ObjectClassAssignment > (YY_MOVE (that.value));
        break;

      case 202: // ObjectClassFieldType
        value.YY_MOVE_OR_COPY< ObjectClassFieldType > (YY_MOVE (that.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.YY_MOVE_OR_COPY< ObjectIdComponentValue > (YY_MOVE (that.value));
        break;

      case 306: // ObjectIdentifierType
        value.YY_MOVE_OR_COPY< ObjectIdentifierType > (YY_MOVE (that.value));
        break;

      case 286: // OctetStringType
        value.YY_MOVE_OR_COPY< OctetStringType > (YY_MOVE (that.value));
        break;

      case 210: // Parameter
        value.YY_MOVE_OR_COPY< Parameter > (YY_MOVE (that.value));
        break;

      case 300: // PrefixedType
        value.YY_MOVE_OR_COPY< PrefixedType > (YY_MOVE (that.value));
        break;

      case 282: // RealType
        value.YY_MOVE_OR_COPY< RealType > (YY_MOVE (that.value));
        break;

      case 319: // RelativeIRIType
        value.YY_MOVE_OR_COPY< RelativeIRIType > (YY_MOVE (that.value));
        break;

      case 313: // RelativeOIDType
        value.YY_MOVE_OR_COPY< RelativeOIDType > (YY_MOVE (that.value));
        break;

      case 292: // SequenceOfType
        value.YY_MOVE_OR_COPY< SequenceOfType > (YY_MOVE (that.value));
        break;

      case 288: // SequenceType
        value.YY_MOVE_OR_COPY< SequenceType > (YY_MOVE (that.value));
        break;

      case 294: // SetOfType
        value.YY_MOVE_OR_COPY< SetOfType > (YY_MOVE (that.value));
        break;

      case 293: // SetType
        value.YY_MOVE_OR_COPY< SetType > (YY_MOVE (that.value));
        break;

      case 302: // Tag
        value.YY_MOVE_OR_COPY< Tag > (YY_MOVE (that.value));
        break;

      case 301: // TaggedType
        value.YY_MOVE_OR_COPY< TaggedType > (YY_MOVE (that.value));
        break;

      case 237: // TagDefault
        value.YY_MOVE_OR_COPY< TaggingMode > (YY_MOVE (that.value));
        break;

      case 325: // TimeOfDayType
        value.YY_MOVE_OR_COPY< TimeOfDayType > (YY_MOVE (that.value));
        break;

      case 322: // TimeType
        value.YY_MOVE_OR_COPY< TimeType > (YY_MOVE (that.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.YY_MOVE_OR_COPY< Type > (YY_MOVE (that.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.YY_MOVE_OR_COPY< Value > (YY_MOVE (that.value));
        break;

      case 6: // realnumber
        value.YY_MOVE_OR_COPY< double > (YY_MOVE (that.value));
        break;

      case 304: // ClassNumber
        value.YY_MOVE_OR_COPY< int > (YY_MOVE (that.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.YY_MOVE_OR_COPY< long long > (YY_MOVE (that.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.YY_MOVE_OR_COPY< std::string > (YY_MOVE (that.value));
        break;

      case 250: // AssignmentList
        value.YY_MOVE_OR_COPY< std::vector<Assignment> > (YY_MOVE (that.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.YY_MOVE_OR_COPY< std::vector<ClassField> > (YY_MOVE (that.value));
        break;

      case 240: // Exports
        value.YY_MOVE_OR_COPY< std::vector<Export> > (YY_MOVE (that.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.YY_MOVE_OR_COPY< std::vector<Import> > (YY_MOVE (that.value));
        break;

      case 275: // NamedNumberList
        value.YY_MOVE_OR_COPY< std::vector<NamedNumber> > (YY_MOVE (that.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.YY_MOVE_OR_COPY< std::vector<NamedType> > (YY_MOVE (that.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.YY_MOVE_OR_COPY< std::vector<ObjectIdComponentValue> > (YY_MOVE (that.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.YY_MOVE_OR_COPY< std::vector<Parameter> > (YY_MOVE (that.value));
        break;

      case 256: // ActualParameterList
        value.YY_MOVE_OR_COPY< std::vector<Type> > (YY_MOVE (that.value));
        break;

      case 271: // SequenceOfValues
        value.YY_MOVE_OR_COPY< std::vector<Value> > (YY_MOVE (that.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.YY_MOVE_OR_COPY< std::vector<std::string> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

#if 201103L <= YY_CPLUSPLUS
    // that is emptied.
    that.state = empty_state;
#endif
  }

  asn1_parser::stack_symbol_type::stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) that)
    : super_type (s, YY_MOVE (that.location))
  {
    switch (that.type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.move< Assignment > (YY_MOVE (that.value));
        break;

      case 283: // BitStringType
        value.move< BitStringType > (YY_MOVE (that.value));
        break;

      case 272: // BooleanType
        value.move< BooleanType > (YY_MOVE (that.value));
        break;

      case 264: // BuiltinType
        value.move< BuiltinType > (YY_MOVE (that.value));
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.move< CharacterStringType > (YY_MOVE (that.value));
        break;

      case 295: // ChoiceType
        value.move< ChoiceType > (YY_MOVE (that.value));
        break;

      case 305: // Class
        value.move< Class > (YY_MOVE (that.value));
        break;

      case 291: // ComponentType
        value.move< ComponentType > (YY_MOVE (that.value));
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.move< ComponentTypeList > (YY_MOVE (that.value));
        break;

      case 326: // DateTimeType
        value.move< DateTimeType > (YY_MOVE (that.value));
        break;

      case 324: // DateType
        value.move< DateType > (YY_MOVE (that.value));
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.move< DefinedType > (YY_MOVE (that.value));
        break;

      case 253: // DefinedValue
        value.move< DefinedValue > (YY_MOVE (that.value));
        break;

      case 327: // DurationType
        value.move< DurationType > (YY_MOVE (that.value));
        break;

      case 320: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (YY_MOVE (that.value));
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.move< EnumeratedType > (YY_MOVE (that.value));
        break;

      case 281: // EnumerationItem
        value.move< EnumerationValue > (YY_MOVE (that.value));
        break;

      case 321: // ExternalType
        value.move< ExternalType > (YY_MOVE (that.value));
        break;

      case 314: // IRIType
        value.move< IRIType > (YY_MOVE (that.value));
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (YY_MOVE (that.value));
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (YY_MOVE (that.value));
        break;

      case 274: // IntegerType
        value.move< IntegerType > (YY_MOVE (that.value));
        break;

      case 239: // ModuleBody
        value.move< Module > (YY_MOVE (that.value));
        break;

      case 276: // NamedNumber
        value.move< NamedNumber > (YY_MOVE (that.value));
        break;

      case 265: // NamedType
        value.move< NamedType > (YY_MOVE (that.value));
        break;

      case 287: // NullType
        value.move< NullType > (YY_MOVE (that.value));
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.move< ObjectClassAssignment > (YY_MOVE (that.value));
        break;

      case 202: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (YY_MOVE (that.value));
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (YY_MOVE (that.value));
        break;

      case 306: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (YY_MOVE (that.value));
        break;

      case 286: // OctetStringType
        value.move< OctetStringType > (YY_MOVE (that.value));
        break;

      case 210: // Parameter
        value.move< Parameter > (YY_MOVE (that.value));
        break;

      case 300: // PrefixedType
        value.move< PrefixedType > (YY_MOVE (that.value));
        break;

      case 282: // RealType
        value.move< RealType > (YY_MOVE (that.value));
        break;

      case 319: // RelativeIRIType
        value.move< RelativeIRIType > (YY_MOVE (that.value));
        break;

      case 313: // RelativeOIDType
        value.move< RelativeOIDType > (YY_MOVE (that.value));
        break;

      case 292: // SequenceOfType
        value.move< SequenceOfType > (YY_MOVE (that.value));
        break;

      case 288: // SequenceType
        value.move< SequenceType > (YY_MOVE (that.value));
        break;

      case 294: // SetOfType
        value.move< SetOfType > (YY_MOVE (that.value));
        break;

      case 293: // SetType
        value.move< SetType > (YY_MOVE (that.value));
        break;

      case 302: // Tag
        value.move< Tag > (YY_MOVE (that.value));
        break;

      case 301: // TaggedType
        value.move< TaggedType > (YY_MOVE (that.value));
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (YY_MOVE (that.value));
        break;

      case 325: // TimeOfDayType
        value.move< TimeOfDayType > (YY_MOVE (that.value));
        break;

      case 322: // TimeType
        value.move< TimeType > (YY_MOVE (that.value));
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.move< Type > (YY_MOVE (that.value));
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.move< Value > (YY_MOVE (that.value));
        break;

      case 6: // realnumber
        value.move< double > (YY_MOVE (that.value));
        break;

      case 304: // ClassNumber
        value.move< int > (YY_MOVE (that.value));
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.move< long long > (YY_MOVE (that.value));
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (YY_MOVE (that.value));
        break;

      case 250: // AssignmentList
        value.move< std::vector<Assignment> > (YY_MOVE (that.value));
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (YY_MOVE (that.value));
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (YY_MOVE (that.value));
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (YY_MOVE (that.value));
        break;

      case 275: // NamedNumberList
        value.move< std::vector<NamedNumber> > (YY_MOVE (that.value));
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.move< std::vector<NamedType> > (YY_MOVE (that.value));
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (YY_MOVE (that.value));
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::vector<Parameter> > (YY_MOVE (that.value));
        break;

      case 256: // ActualParameterList
        value.move< std::vector<Type> > (YY_MOVE (that.value));
        break;

      case 271: // SequenceOfValues
        value.move< std::vector<Value> > (YY_MOVE (that.value));
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.move< std::vector<std::string> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

    // that is emptied.
    that.type = empty_symbol;
  }

#if YY_CPLUSPLUS < 201103L
  asn1_parser::stack_symbol_type&
  asn1_parser::stack_symbol_type::operator= (stack_symbol_type& that)
  {
    state = that.state;
    switch (that.type_get ())
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        value.move< Assignment > (that.value);
        break;

      case 283: // BitStringType
        value.move< BitStringType > (that.value);
        break;

      case 272: // BooleanType
        value.move< BooleanType > (that.value);
        break;

      case 264: // BuiltinType
        value.move< BuiltinType > (that.value);
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        value.move< CharacterStringType > (that.value);
        break;

      case 295: // ChoiceType
        value.move< ChoiceType > (that.value);
        break;

      case 305: // Class
        value.move< Class > (that.value);
        break;

      case 291: // ComponentType
        value.move< ComponentType > (that.value);
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        value.move< ComponentTypeList > (that.value);
        break;

      case 326: // DateTimeType
        value.move< DateTimeType > (that.value);
        break;

      case 324: // DateType
        value.move< DateType > (that.value);
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        value.move< DefinedType > (that.value);
        break;

      case 253: // DefinedValue
        value.move< DefinedValue > (that.value);
        break;

      case 327: // DurationType
        value.move< DurationType > (that.value);
        break;

      case 320: // EmbeddedPDVType
        value.move< EmbeddedPDVType > (that.value);
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        value.move< EnumeratedType > (that.value);
        break;

      case 281: // EnumerationItem
        value.move< EnumerationValue > (that.value);
        break;

      case 321: // ExternalType
        value.move< ExternalType > (that.value);
        break;

      case 314: // IRIType
        value.move< IRIType > (that.value);
        break;

      case 245: // SymbolsFromModule
        value.move< Import > (that.value);
        break;

      case 215: // InstanceOfType
        value.move< InstanceOfType > (that.value);
        break;

      case 274: // IntegerType
        value.move< IntegerType > (that.value);
        break;

      case 239: // ModuleBody
        value.move< Module > (that.value);
        break;

      case 276: // NamedNumber
        value.move< NamedNumber > (that.value);
        break;

      case 265: // NamedType
        value.move< NamedType > (that.value);
        break;

      case 287: // NullType
        value.move< NullType > (that.value);
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        value.move< ObjectClassAssignment > (that.value);
        break;

      case 202: // ObjectClassFieldType
        value.move< ObjectClassFieldType > (that.value);
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        value.move< ObjectIdComponentValue > (that.value);
        break;

      case 306: // ObjectIdentifierType
        value.move< ObjectIdentifierType > (that.value);
        break;

      case 286: // OctetStringType
        value.move< OctetStringType > (that.value);
        break;

      case 210: // Parameter
        value.move< Parameter > (that.value);
        break;

      case 300: // PrefixedType
        value.move< PrefixedType > (that.value);
        break;

      case 282: // RealType
        value.move< RealType > (that.value);
        break;

      case 319: // RelativeIRIType
        value.move< RelativeIRIType > (that.value);
        break;

      case 313: // RelativeOIDType
        value.move< RelativeOIDType > (that.value);
        break;

      case 292: // SequenceOfType
        value.move< SequenceOfType > (that.value);
        break;

      case 288: // SequenceType
        value.move< SequenceType > (that.value);
        break;

      case 294: // SetOfType
        value.move< SetOfType > (that.value);
        break;

      case 293: // SetType
        value.move< SetType > (that.value);
        break;

      case 302: // Tag
        value.move< Tag > (that.value);
        break;

      case 301: // TaggedType
        value.move< TaggedType > (that.value);
        break;

      case 237: // TagDefault
        value.move< TaggingMode > (that.value);
        break;

      case 325: // TimeOfDayType
        value.move< TimeOfDayType > (that.value);
        break;

      case 322: // TimeType
        value.move< TimeType > (that.value);
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        value.move< Type > (that.value);
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        value.move< Value > (that.value);
        break;

      case 6: // realnumber
        value.move< double > (that.value);
        break;

      case 304: // ClassNumber
        value.move< int > (that.value);
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        value.move< long long > (that.value);
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        value.move< std::string > (that.value);
        break;

      case 250: // AssignmentList
        value.move< std::vector<Assignment> > (that.value);
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        value.move< std::vector<ClassField> > (that.value);
        break;

      case 240: // Exports
        value.move< std::vector<Export> > (that.value);
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        value.move< std::vector<Import> > (that.value);
        break;

      case 275: // NamedNumberList
        value.move< std::vector<NamedNumber> > (that.value);
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        value.move< std::vector<NamedType> > (that.value);
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        value.move< std::vector<ObjectIdComponentValue> > (that.value);
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        value.move< std::vector<Parameter> > (that.value);
        break;

      case 256: // ActualParameterList
        value.move< std::vector<Type> > (that.value);
        break;

      case 271: // SequenceOfValues
        value.move< std::vector<Value> > (that.value);
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        value.move< std::vector<std::string> > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    // that is emptied.
    that.state = empty_state;
    return *this;
  }
#endif

  template <typename Base>
  void
  asn1_parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  asn1_parser::yy_print_ (std::ostream& yyo,
                                     const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    symbol_number_type yytype = yysym.type_get ();
#if defined __GNUC__ && ! defined __clang__ && ! defined __ICC && __GNUC__ * 100 + __GNUC_MINOR__ <= 408
    // Avoid a (spurious) G++ 4.8 warning about "array subscript is
    // below array bounds".
    if (yysym.empty ())
      std::abort ();
#endif
    yyo << (yytype < yyntokens_ ? "token" : "nterm")
        << ' ' << yytname_[yytype] << " ("
        << yysym.location << ": ";
    YYUSE (yytype);
    yyo << ')';
  }
#endif

  void
  asn1_parser::yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym)
  {
    if (m)
      YY_SYMBOL_PRINT (m, sym);
    yystack_.push (YY_MOVE (sym));
  }

  void
  asn1_parser::yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym)
  {
#if 201103L <= YY_CPLUSPLUS
    yypush_ (m, stack_symbol_type (s, std::move (sym)));
#else
    stack_symbol_type ss (s, sym);
    yypush_ (m, ss);
#endif
  }

  void
  asn1_parser::yypop_ (int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  asn1_parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  asn1_parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  asn1_parser::debug_level_type
  asn1_parser::debug_level () const
  {
    return yydebug_;
  }

  void
  asn1_parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  asn1_parser::state_type
  asn1_parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - yyntokens_] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - yyntokens_];
  }

  bool
  asn1_parser::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  bool
  asn1_parser::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  asn1_parser::operator() ()
  {
    return parse ();
  }

  int
  asn1_parser::parse ()
  {
    // State.
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

#if YY_EXCEPTIONS
    try
#endif // YY_EXCEPTIONS
      {
    YYCDEBUG << "Starting parse\n";


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, YY_MOVE (yyla));

  /*-----------------------------------------------.
  | yynewstate -- push a new symbol on the stack.  |
  `-----------------------------------------------*/
  yynewstate:
    YYCDEBUG << "Entering state " << yystack_[0].state << '\n';

    // Accept?
    if (yystack_[0].state == yyfinal_)
      YYACCEPT;

    goto yybackup;


  /*-----------.
  | yybackup.  |
  `-----------*/
  yybackup:
    // Try to take a decision without lookahead.
    yyn = yypact_[yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token: ";
#if YY_EXCEPTIONS
        try
#endif // YY_EXCEPTIONS
          {
            symbol_type yylookahead (yylex (context));
            yyla.move (yylookahead);
          }
#if YY_EXCEPTIONS
        catch (const syntax_error& yyexc)
          {
            YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
            error (yyexc);
            goto yyerrlab1;
          }
#endif // YY_EXCEPTIONS
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.type_get ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.type_get ())
      goto yydefault;

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", yyn, YY_MOVE (yyla));
    goto yynewstate;


  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;


  /*-----------------------------.
  | yyreduce -- do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_ (yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
      switch (yyr1_[yyn])
    {
      case 160: // ObjectClassAssignment
      case 199: // ObjectSetAssignment
      case 203: // ParameterizedAssignment
      case 204: // ParameterizedTypeAssignment
      case 205: // ParameterizedValueAssignment
      case 206: // ParameterizedValueSetTypeAssignment
      case 207: // ParameterizedObjectClassAssignment
      case 251: // Assignment
      case 260: // TypeAssignment
      case 261: // ValueAssignment
      case 262: // ValueSetTypeAssignment
        yylhs.value.emplace< Assignment > ();
        break;

      case 283: // BitStringType
        yylhs.value.emplace< BitStringType > ();
        break;

      case 272: // BooleanType
        yylhs.value.emplace< BooleanType > ();
        break;

      case 264: // BuiltinType
        yylhs.value.emplace< BuiltinType > ();
        break;

      case 328: // CharacterStringType
      case 329: // RestrictedCharacterStringType
      case 330: // UnrestrictedCharacterStringType
        yylhs.value.emplace< CharacterStringType > ();
        break;

      case 295: // ChoiceType
        yylhs.value.emplace< ChoiceType > ();
        break;

      case 305: // Class
        yylhs.value.emplace< Class > ();
        break;

      case 291: // ComponentType
        yylhs.value.emplace< ComponentType > ();
        break;

      case 289: // ComponentTypeLists
      case 290: // ComponentTypeList
        yylhs.value.emplace< ComponentTypeList > ();
        break;

      case 326: // DateTimeType
        yylhs.value.emplace< DateTimeType > ();
        break;

      case 324: // DateType
        yylhs.value.emplace< DateType > ();
        break;

      case 252: // DefinedType
      case 254: // ParameterizedType
      case 258: // ExternalTypeReference
        yylhs.value.emplace< DefinedType > ();
        break;

      case 253: // DefinedValue
        yylhs.value.emplace< DefinedValue > ();
        break;

      case 327: // DurationType
        yylhs.value.emplace< DurationType > ();
        break;

      case 320: // EmbeddedPDVType
        yylhs.value.emplace< EmbeddedPDVType > ();
        break;

      case 278: // EnumeratedType
      case 279: // Enumerations
      case 280: // Enumeration
        yylhs.value.emplace< EnumeratedType > ();
        break;

      case 281: // EnumerationItem
        yylhs.value.emplace< EnumerationValue > ();
        break;

      case 321: // ExternalType
        yylhs.value.emplace< ExternalType > ();
        break;

      case 314: // IRIType
        yylhs.value.emplace< IRIType > ();
        break;

      case 245: // SymbolsFromModule
        yylhs.value.emplace< Import > ();
        break;

      case 215: // InstanceOfType
        yylhs.value.emplace< InstanceOfType > ();
        break;

      case 274: // IntegerType
        yylhs.value.emplace< IntegerType > ();
        break;

      case 239: // ModuleBody
        yylhs.value.emplace< Module > ();
        break;

      case 276: // NamedNumber
        yylhs.value.emplace< NamedNumber > ();
        break;

      case 265: // NamedType
        yylhs.value.emplace< NamedType > ();
        break;

      case 287: // NullType
        yylhs.value.emplace< NullType > ();
        break;

      case 161: // ObjectClass
      case 162: // ObjectClassDefn
        yylhs.value.emplace< ObjectClassAssignment > ();
        break;

      case 202: // ObjectClassFieldType
        yylhs.value.emplace< ObjectClassFieldType > ();
        break;

      case 309: // ObjIdComponents
      case 310: // NameForm
      case 311: // NumberForm
      case 312: // NameAndNumberForm
        yylhs.value.emplace< ObjectIdComponentValue > ();
        break;

      case 306: // ObjectIdentifierType
        yylhs.value.emplace< ObjectIdentifierType > ();
        break;

      case 286: // OctetStringType
        yylhs.value.emplace< OctetStringType > ();
        break;

      case 210: // Parameter
        yylhs.value.emplace< Parameter > ();
        break;

      case 300: // PrefixedType
        yylhs.value.emplace< PrefixedType > ();
        break;

      case 282: // RealType
        yylhs.value.emplace< RealType > ();
        break;

      case 319: // RelativeIRIType
        yylhs.value.emplace< RelativeIRIType > ();
        break;

      case 313: // RelativeOIDType
        yylhs.value.emplace< RelativeOIDType > ();
        break;

      case 292: // SequenceOfType
        yylhs.value.emplace< SequenceOfType > ();
        break;

      case 288: // SequenceType
        yylhs.value.emplace< SequenceType > ();
        break;

      case 294: // SetOfType
        yylhs.value.emplace< SetOfType > ();
        break;

      case 293: // SetType
        yylhs.value.emplace< SetType > ();
        break;

      case 302: // Tag
        yylhs.value.emplace< Tag > ();
        break;

      case 301: // TaggedType
        yylhs.value.emplace< TaggedType > ();
        break;

      case 237: // TagDefault
        yylhs.value.emplace< TaggingMode > ();
        break;

      case 325: // TimeOfDayType
        yylhs.value.emplace< TimeOfDayType > ();
        break;

      case 322: // TimeType
        yylhs.value.emplace< TimeType > ();
        break;

      case 211: // ParamGovernor
      case 212: // Governor
      case 257: // ActualParameter
      case 263: // Type
      case 331: // ConstrainedType
      case 332: // TypeWithConstraint
        yylhs.value.emplace< Type > ();
        break;

      case 266: // ValueWithoutTypeIdentifier
      case 267: // Value
      case 349: // SingleValue
        yylhs.value.emplace< Value > ();
        break;

      case 6: // realnumber
        yylhs.value.emplace< double > ();
        break;

      case 304: // ClassNumber
        yylhs.value.emplace< int > ();
        break;

      case 4: // number
      case 5: // negativenumber
      case 277: // SignedNumber
        yylhs.value.emplace< long long > ();
        break;

      case 7: // bstring
      case 8: // xmlbstring
      case 9: // hstring
      case 10: // xmlhstring
      case 11: // cstring
      case 12: // xmlcstring
      case 13: // simplestring
      case 14: // xmltstring
      case 22: // objectreference
      case 24: // typefieldreference
      case 25: // valuefieldreference
      case 149: // GENERIC_IDENTIFIER_UPPERCASE
      case 150: // GENERIC_IDENTIFIER_LOWERCASE
      case 159: // UsefulObjectClassReference
      case 165: // FieldName
      case 216: // SimpleDefinedType
      case 228: // ModuleIdentifier
      case 246: // GlobalModuleReference
      case 248: // Symbol
      case 249: // Reference
      case 372: // typereference
      case 373: // identifier
      case 374: // valuereference
      case 375: // modulereference
      case 376: // objectclassreference
      case 377: // word
        yylhs.value.emplace< std::string > ();
        break;

      case 250: // AssignmentList
        yylhs.value.emplace< std::vector<Assignment> > ();
        break;

      case 163: // FieldSpecList
      case 164: // FieldSpec
      case 167: // TypeFieldSpec
      case 171: // FixedTypeValueFieldSpec
        yylhs.value.emplace< std::vector<ClassField> > ();
        break;

      case 240: // Exports
        yylhs.value.emplace< std::vector<Export> > ();
        break;

      case 242: // Imports
      case 243: // SymbolsImported
      case 244: // SymbolsFromModuleList
        yylhs.value.emplace< std::vector<Import> > ();
        break;

      case 275: // NamedNumberList
        yylhs.value.emplace< std::vector<NamedNumber> > ();
        break;

      case 296: // AlternativeTypeLists
      case 297: // RootAlternativeTypeList
      case 298: // AlternativeTypeList
        yylhs.value.emplace< std::vector<NamedType> > ();
        break;

      case 307: // ObjectIdentifierValue
      case 308: // ObjIdComponentsList
        yylhs.value.emplace< std::vector<ObjectIdComponentValue> > ();
        break;

      case 208: // ParameterList
      case 209: // ParameterSeries
        yylhs.value.emplace< std::vector<Parameter> > ();
        break;

      case 256: // ActualParameterList
        yylhs.value.emplace< std::vector<Type> > ();
        break;

      case 271: // SequenceOfValues
        yylhs.value.emplace< std::vector<Value> > ();
        break;

      case 166: // FieldNameList
      case 168: // OneOrManyTypeFieldReference
      case 247: // SymbolList
        yylhs.value.emplace< std::vector<std::string> > ();
        break;

      default:
        break;
    }


      // Default location.
      {
        stack_type::slice range (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, range, yylen);
        yyerror_range[1].location = yylhs.location;
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
#if YY_EXCEPTIONS
      try
#endif // YY_EXCEPTIONS
        {
          switch (yyn)
            {
  case 4:
#line 339 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yystack_[2].value.as < Module > ().module_reference = yystack_[9].value.as < std::string > ();
      yystack_[2].value.as < Module > ().tagging_default = yystack_[6].value.as < TaggingMode > ();
      context.asn1_tree.modules.push_back(yystack_[2].value.as < Module > ()); }
#line 7885 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 10:
#line 356 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = "TYPE-IDENTIFIER"; }
#line 7891 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 11:
#line 358 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = "TYPE-IDENTIFIER"; }
#line 7897 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 12:
#line 362 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{yystack_[2].value.as < std::string > (), yystack_[0].value.as < ObjectClassAssignment > ()}; }
#line 7903 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 13:
#line 366 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "ObjectClass"); }
#line 7909 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 14:
#line 368 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectClassAssignment > () = yystack_[0].value.as < ObjectClassAssignment > (); }
#line 7915 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 15:
#line 373 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectClassAssignment > () = {yystack_[2].value.as < std::vector<ClassField> > ()}; }
#line 7921 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 16:
#line 377 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > () = yystack_[0].value.as < std::vector<ClassField> > (); }
#line 7927 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 17:
#line 379 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > () = yystack_[2].value.as < std::vector<ClassField> > (); yylhs.value.as < std::vector<ClassField> > ().insert(yylhs.value.as < std::vector<ClassField> > ().end(), yystack_[0].value.as < std::vector<ClassField> > ().begin(), yystack_[0].value.as < std::vector<ClassField> > ().end()); }
#line 7933 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 18:
#line 383 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > () = yystack_[0].value.as < std::vector<ClassField> > (); }
#line 7939 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 19:
#line 385 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > () = yystack_[0].value.as < std::vector<ClassField> > (); }
#line 7945 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 24:
#line 393 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 7951 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 25:
#line 395 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 7957 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 26:
#line 403 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 7963 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 27:
#line 405 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > () = yystack_[2].value.as < std::vector<std::string> > (); yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 7969 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 28:
#line 409 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { for (const std::string& name : yystack_[1].value.as < std::vector<std::string> > ()) yylhs.value.as < std::vector<ClassField> > ().push_back(ClassField{name, TypeField{}}); }
#line 7975 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 29:
#line 413 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 7981 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 30:
#line 415 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > () = yystack_[1].value.as < std::vector<std::string> > (); yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 7987 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 37:
#line 429 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ClassField> > ().push_back(ClassField{yystack_[3].value.as < std::string > (), FixedTypeValueField{yystack_[2].value.as < Type > ()}}); }
#line 7993 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 86:
#line 544 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{yystack_[3].value.as < std::string > (), ObjectSetAssignment{}}; }
#line 7999 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 93:
#line 564 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectClassFieldType > () = {DefinedType{{}, }, yystack_[0].value.as < std::vector<std::string> > ()}; }
#line 8005 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 94:
#line 566 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectClassFieldType > () = {DefinedType{{}, yystack_[2].value.as < std::string > ()}, yystack_[0].value.as < std::vector<std::string> > ()}; }
#line 8011 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 95:
#line 573 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8017 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 96:
#line 575 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8023 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 97:
#line 577 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8029 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 98:
#line 579 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8035 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 99:
#line 586 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[3].value.as < std::string > (), TypeAssignment{yystack_[0].value.as < Type > ()}, {}, yystack_[2].value.as < std::vector<Parameter> > () }; }
#line 8041 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 100:
#line 590 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[4].value.as < std::string > (), ValueAssignment{} }; }
#line 8047 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 101:
#line 594 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[4].value.as < std::string > (), ValueAssignment{} }; }
#line 8053 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 102:
#line 598 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[3].value.as < std::string > (), ObjectClassAssignment{} }; }
#line 8059 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 103:
#line 610 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Parameter> > () = yystack_[1].value.as < std::vector<Parameter> > (); }
#line 8065 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 104:
#line 614 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Parameter> > ().push_back(yystack_[0].value.as < Parameter > ()); }
#line 8071 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 105:
#line 616 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Parameter> > () = yystack_[2].value.as < std::vector<Parameter> > (); yylhs.value.as < std::vector<Parameter> > ().push_back(yystack_[0].value.as < Parameter > ()); }
#line 8077 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 106:
#line 620 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Parameter > () = Parameter{yystack_[2].value.as < Type > (), yystack_[0].value.as < std::string > ()}; }
#line 8083 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 107:
#line 622 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Parameter > () = Parameter{{}, yystack_[0].value.as < std::string > ()}; }
#line 8089 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 108:
#line 626 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); }
#line 8095 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 109:
#line 628 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = DefinedType{{}, yystack_[0].value.as < std::string > ()}; }
#line 8101 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 110:
#line 632 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); }
#line 8107 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 111:
#line 634 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { }
#line 8113 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 114:
#line 671 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "InstanceOfType"); }
#line 8119 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 116:
#line 680 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8125 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 122:
#line 693 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "UserDefinedConstraint", "Not yet checking contraints. "); }
#line 8131 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 130:
#line 707 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << "Simple constraint\n"; }
#line 8137 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 131:
#line 709 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << "Relation constraint\n"; }
#line 8143 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 144:
#line 751 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    {
    yylhs.value.as < std::string > () = yystack_[1].value.as < std::string > ();
}
#line 8151 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 159:
#line 790 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggingMode > () = TaggingMode::explicit_; }
#line 8157 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 160:
#line 792 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggingMode > () = TaggingMode::implicit; }
#line 8163 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 161:
#line 794 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggingMode > () = TaggingMode::automatic; }
#line 8169 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 162:
#line 796 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggingMode > () = TaggingMode::explicit_; }
#line 8175 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 165:
#line 804 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Module > () = Module{ {}, TaggingMode(), yystack_[2].value.as < std::vector<Export> > (), yystack_[1].value.as < std::vector<Import> > (), yystack_[0].value.as < std::vector<Assignment> > ()}; }
#line 8181 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 166:
#line 806 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { }
#line 8187 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 172:
#line 819 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Import> > () = yystack_[1].value.as < std::vector<Import> > (); }
#line 8193 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 174:
#line 824 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Import> > () = yystack_[0].value.as < std::vector<Import> > (); }
#line 8199 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 176:
#line 829 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Import> > ().push_back(yystack_[0].value.as < Import > ()); }
#line 8205 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 177:
#line 831 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Import> > () = yystack_[1].value.as < std::vector<Import> > (); yylhs.value.as < std::vector<Import> > ().push_back(yystack_[0].value.as < Import > ()); }
#line 8211 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 178:
#line 835 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Import > () = Import{ yystack_[0].value.as < std::string > (), {}, {} };
      for (const std::string& ref: yystack_[2].value.as < std::vector<std::string> > ())
      {
        if (std::isupper(ref[0]))
        {
          yylhs.value.as < Import > ().imported_types.push_back(ref);
        }
        else
        {
          yylhs.value.as < Import > ().imported_values.push_back(ref);
        }
      }
    }
#line 8229 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 179:
#line 851 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8235 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 180:
#line 853 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[1].value.as < std::string > (); }
#line 8241 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 181:
#line 859 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 8247 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 182:
#line 861 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<std::string> > () = yystack_[2].value.as < std::vector<std::string> > (); yylhs.value.as < std::vector<std::string> > ().push_back(yystack_[0].value.as < std::string > ()); }
#line 8253 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 183:
#line 865 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8259 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 184:
#line 869 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8265 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 185:
#line 871 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[2].value.as < std::string > (); }
#line 8271 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 186:
#line 873 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 8277 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 187:
#line 882 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Assignment> > ().push_back(yystack_[0].value.as < Assignment > ()); }
#line 8283 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 188:
#line 884 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Assignment> > () = yystack_[0].value.as < std::vector<Assignment> > (); yylhs.value.as < std::vector<Assignment> > ().push_back(yystack_[1].value.as < Assignment > ()); }
#line 8289 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 189:
#line 888 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8295 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 190:
#line 890 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8301 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 191:
#line 892 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8307 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 192:
#line 894 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8313 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 193:
#line 897 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8319 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 194:
#line 899 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = yystack_[0].value.as < Assignment > (); }
#line 8325 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 195:
#line 903 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = yystack_[0].value.as < DefinedType > (); }
#line 8331 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 196:
#line 905 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = DefinedType{absl::nullopt, yystack_[0].value.as < std::string > (), {}}; }
#line 8337 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 197:
#line 907 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = yystack_[0].value.as < DefinedType > (); }
#line 8343 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 198:
#line 913 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedValue > () = DefinedValue{yystack_[0].value.as < std::string > ()}; }
#line 8349 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 200:
#line 918 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = DefinedType{ absl::nullopt, yystack_[3].value.as < std::string > (), yystack_[1].value.as < std::vector<Type> > ()}; }
#line 8355 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 202:
#line 925 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Type> > ().push_back(yystack_[0].value.as < Type > ()); }
#line 8361 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 203:
#line 927 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Type> > () = yystack_[0].value.as < std::vector<Type> > (); yylhs.value.as < std::vector<Type> > ().push_back(yystack_[2].value.as < Type > ()); }
#line 8367 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 204:
#line 931 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); }
#line 8373 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 205:
#line 933 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << "Warning: Not yet dealing with value paramaters\n"; }
#line 8379 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 207:
#line 946 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < DefinedType > () = DefinedType{yystack_[2].value.as < std::string > (), yystack_[0].value.as < std::string > (), {}}; }
#line 8385 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 209:
#line 975 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[2].value.as < std::string > (), TypeAssignment{yystack_[0].value.as < Type > ()}, {} }; }
#line 8391 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 210:
#line 979 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[3].value.as < std::string > (), ValueAssignment{yystack_[2].value.as < Type > (), yystack_[0].value.as < Value > ()}, {} }; }
#line 8397 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 211:
#line 983 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Assignment > () = Assignment{ yystack_[3].value.as < std::string > (), TypeAssignment{yystack_[2].value.as < Type > ()}, {} }; }
#line 8403 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 212:
#line 987 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < BuiltinType > (); }
#line 8409 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 213:
#line 989 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); }
#line 8415 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 214:
#line 991 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < DefinedType > (); }
#line 8421 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 215:
#line 993 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "SelectionType"); }
#line 8427 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 216:
#line 995 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "TypeFromObject"); }
#line 8433 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 217:
#line 999 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = AnyType(); }
#line 8439 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 218:
#line 1000 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < BitStringType > (); }
#line 8445 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 219:
#line 1001 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < BooleanType > (); }
#line 8451 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 220:
#line 1002 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < CharacterStringType > (); }
#line 8457 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 221:
#line 1003 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < ChoiceType > (); }
#line 8463 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 222:
#line 1004 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < DateType > (); feature_not_implemented(context.location, context.asn1_tree, "DateType"); }
#line 8469 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 223:
#line 1005 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < DateTimeType > (); feature_not_implemented(context.location, context.asn1_tree, "DateTimeType"); }
#line 8475 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 224:
#line 1006 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < DurationType > (); feature_not_implemented(context.location, context.asn1_tree, "DurationType"); }
#line 8481 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 225:
#line 1007 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < EmbeddedPDVType > (); feature_not_implemented(context.location, context.asn1_tree, "EmbeddedPDVType"); }
#line 8487 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 226:
#line 1008 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < EnumeratedType > (); }
#line 8493 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 227:
#line 1009 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < ExternalType > (); feature_not_implemented(context.location, context.asn1_tree, "ExternalType"); }
#line 8499 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 228:
#line 1010 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = GeneralizedTimeType(); }
#line 8505 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 229:
#line 1011 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < InstanceOfType > (); feature_not_implemented(context.location, context.asn1_tree, "InstanceOfType"); }
#line 8511 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 230:
#line 1012 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < IntegerType > (); }
#line 8517 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 231:
#line 1013 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < IRIType > (); feature_not_implemented(context.location, context.asn1_tree, "IRIType"); }
#line 8523 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 232:
#line 1014 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < NullType > (); }
#line 8529 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 233:
#line 1015 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < ObjectClassFieldType > (); feature_not_implemented(context.location, context.asn1_tree, "ObjectClassFieldType"); }
#line 8535 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 234:
#line 1016 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = ObjectDescriptorType(); }
#line 8541 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 235:
#line 1017 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < ObjectIdentifierType > (); }
#line 8547 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 236:
#line 1018 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < OctetStringType > (); }
#line 8553 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 237:
#line 1019 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < RealType > (); feature_not_implemented(context.location, context.asn1_tree, "RealType"); }
#line 8559 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 238:
#line 1020 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < RelativeIRIType > (); feature_not_implemented(context.location, context.asn1_tree, "RelativeIRIType"); }
#line 8565 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 239:
#line 1021 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < RelativeOIDType > (); feature_not_implemented(context.location, context.asn1_tree, "RelativeOIDType"); }
#line 8571 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 240:
#line 1022 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < SequenceType > (); }
#line 8577 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 241:
#line 1023 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < SequenceOfType > (); }
#line 8583 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 242:
#line 1024 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < SetType > (); feature_not_implemented(context.location, context.asn1_tree, "SET", "Currently SET is treated as a SEQUENCE type. "); }
#line 8589 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 243:
#line 1025 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < SetOfType > (); }
#line 8595 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 244:
#line 1026 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < PrefixedType > (); }
#line 8601 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 245:
#line 1027 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < TimeType > (); feature_not_implemented(context.location, context.asn1_tree, "TimeType"); }
#line 8607 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 246:
#line 1028 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = yystack_[0].value.as < TimeOfDayType > (); feature_not_implemented(context.location, context.asn1_tree, "TimeOfDayType"); }
#line 8613 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 247:
#line 1029 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BuiltinType > () = UTCTimeType(); feature_not_implemented(context.location, context.asn1_tree, "UTCTime"); }
#line 8619 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 248:
#line 1033 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < NamedType > () = NamedType{ yystack_[1].value.as < std::string > (), yystack_[0].value.as < Type > () }; }
#line 8625 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 249:
#line 1037 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: BooleanValue\n"); }
#line 8631 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 250:
#line 1039 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: IRIValue\n"); }
#line 8637 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 251:
#line 1041 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ASN_NULL\n"); }
#line 8643 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 252:
#line 1043 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: TimeValue\n"); }
#line 8649 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 253:
#line 1045 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = BitStringValue{yystack_[0].value.as < std::string > ()}; }
#line 8655 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 254:
#line 1047 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = HexStringValue{yystack_[0].value.as < std::string > ()}; }
#line 8661 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 255:
#line 1049 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = CharStringValue{yystack_[0].value.as < std::string > ()}; }
#line 8667 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 256:
#line 1051 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: CONTAINING\n"); }
#line 8673 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 257:
#line 1053 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < DefinedValue > (); }
#line 8679 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 258:
#line 1055 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = NamedNumber{yystack_[3].value.as < std::string > (), yystack_[1].value.as < long long > ()}; }
#line 8685 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 260:
#line 1058 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < long long > (); }
#line 8691 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 261:
#line 1060 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < double > (); }
#line 8697 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 262:
#line 1062 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ValueCommaListChoice\n"); }
#line 8703 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 263:
#line 1064 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ValueCommaListChoice\n"); }
#line 8709 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 268:
#line 1072 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[1].value.as < std::vector<Value> > (); }
#line 8715 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 269:
#line 1074 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ValueChoice\n"); }
#line 8721 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 270:
#line 1076 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: OPTIONAL\n"); }
#line 8727 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 271:
#line 1078 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: ValueCommaListChoice\n"); }
#line 8733 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 272:
#line 1080 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: BY\n"); }
#line 8739 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 273:
#line 1082 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << std::string("Warning: Unhandled field: WITH\n"); }
#line 8745 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 274:
#line 1087 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > () = yystack_[0].value.as < Value > (); }
#line 8751 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 275:
#line 1089 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Value > ().value_selection = yystack_[0].value.as < std::string > (); }
#line 8757 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 282:
#line 1105 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Value> > ().push_back(yystack_[0].value.as < Value > ()); }
#line 8763 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 283:
#line 1107 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<Value> > () = yystack_[1].value.as < std::vector<Value> > (); yylhs.value.as < std::vector<Value> > ().push_back(yystack_[0].value.as < Value > ()); }
#line 8769 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 287:
#line 1122 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < IntegerType > () = IntegerType{{}}; }
#line 8775 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 288:
#line 1124 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < IntegerType > () = IntegerType{yystack_[1].value.as < std::vector<NamedNumber> > ()}; }
#line 8781 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 289:
#line 1128 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedNumber> > () = {yystack_[0].value.as < NamedNumber > ()}; }
#line 8787 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 290:
#line 1130 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedNumber> > () = yystack_[2].value.as < std::vector<NamedNumber> > (); yylhs.value.as < std::vector<NamedNumber> > ().push_back(yystack_[0].value.as < NamedNumber > ()); }
#line 8793 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 291:
#line 1134 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < NamedNumber > () = NamedNumber{ yystack_[3].value.as < std::string > (), yystack_[1].value.as < long long > () }; }
#line 8799 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 292:
#line 1136 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < NamedNumber > () = NamedNumber{ yystack_[3].value.as < std::string > (), 0 }; }
#line 8805 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 293:
#line 1140 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < long long > () = yystack_[0].value.as < long long > (); }
#line 8811 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 294:
#line 1142 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < long long > () = yystack_[0].value.as < long long > (); }
#line 8817 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 295:
#line 1146 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[1].value.as < EnumeratedType > (); }
#line 8823 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 296:
#line 1150 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[0].value.as < EnumeratedType > ();
      yylhs.value.as < EnumeratedType > ().accept_anything = false; }
#line 8830 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 297:
#line 1153 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[3].value.as < EnumeratedType > ();
      yylhs.value.as < EnumeratedType > ().accept_anything = true; }
#line 8837 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 298:
#line 1156 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[5].value.as < EnumeratedType > ();
      yylhs.value.as < EnumeratedType > ().accept_anything = true;
      yylhs.value.as < EnumeratedType > ().enum_values.insert(yylhs.value.as < EnumeratedType > ().enum_values.end(), yystack_[0].value.as < EnumeratedType > ().enum_values.begin(), yystack_[0].value.as < EnumeratedType > ().enum_values.end()); }
#line 8845 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 300:
#line 1163 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > ().enum_values.push_back(yystack_[0].value.as < EnumerationValue > ()); }
#line 8851 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 301:
#line 1165 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumeratedType > () = yystack_[2].value.as < EnumeratedType > (); yylhs.value.as < EnumeratedType > ().enum_values.push_back(yystack_[0].value.as < EnumerationValue > ()); }
#line 8857 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 302:
#line 1169 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumerationValue > ().name  = yystack_[0].value.as < std::string > (); }
#line 8863 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 303:
#line 1171 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < EnumerationValue > ().name  = yystack_[0].value.as < NamedNumber > ().name;
      yylhs.value.as < EnumerationValue > ().value = yystack_[0].value.as < NamedNumber > ().number; }
#line 8870 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 305:
#line 1182 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BitStringType > () = BitStringType{}; }
#line 8876 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 306:
#line 1184 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < BitStringType > () = BitStringType{}; }
#line 8882 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 313:
#line 1213 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SequenceType > () = SequenceType(); }
#line 8888 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 314:
#line 1215 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SequenceType > () = SequenceType{yystack_[1].value.as < ComponentTypeList > ()}; }
#line 8894 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 315:
#line 1219 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[0].value.as < ComponentTypeList > (); }
#line 8900 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 316:
#line 1221 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[3].value.as < ComponentTypeList > (); }
#line 8906 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 317:
#line 1223 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[5].value.as < ComponentTypeList > (); yylhs.value.as < ComponentTypeList > ().insert(yylhs.value.as < ComponentTypeList > ().end(), yystack_[0].value.as < ComponentTypeList > ().begin(), yystack_[0].value.as < ComponentTypeList > ().end()); }
#line 8912 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 318:
#line 1225 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[7].value.as < ComponentTypeList > (); yylhs.value.as < ComponentTypeList > ().insert(yylhs.value.as < ComponentTypeList > ().end(), yystack_[2].value.as < ComponentTypeList > ().begin(), yystack_[2].value.as < ComponentTypeList > ().end()); }
#line 8918 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 319:
#line 1227 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[9].value.as < ComponentTypeList > (); yylhs.value.as < ComponentTypeList > ().insert(yylhs.value.as < ComponentTypeList > ().end(), yystack_[4].value.as < ComponentTypeList > ().begin(), yystack_[4].value.as < ComponentTypeList > ().end()); yylhs.value.as < ComponentTypeList > ().insert(yylhs.value.as < ComponentTypeList > ().end(), yystack_[0].value.as < ComponentTypeList > ().begin(), yystack_[0].value.as < ComponentTypeList > ().end()); }
#line 8924 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 320:
#line 1229 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[0].value.as < ComponentTypeList > (); }
#line 8930 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 321:
#line 1231 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = yystack_[2].value.as < ComponentTypeList > (); }
#line 8936 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 322:
#line 1233 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = {}; }
#line 8942 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 323:
#line 1235 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = {}; }
#line 8948 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 324:
#line 1239 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentTypeList > () = ComponentTypeList{yystack_[0].value.as < ComponentType > ()}; }
#line 8954 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 325:
#line 1241 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yystack_[2].value.as < ComponentTypeList > ().push_back(yystack_[0].value.as < ComponentType > ()); yylhs.value.as < ComponentTypeList > () = yystack_[2].value.as < ComponentTypeList > (); }
#line 8960 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 326:
#line 1245 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << context.location << " WARNING: unnamed type\n";
      yylhs.value.as < ComponentType > () = ComponentType{{gen_anon_member_name(), yystack_[0].value.as < Type > ()}, false, absl::nullopt, absl::nullopt, StorageMode::static_ }; }
#line 8967 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 327:
#line 1248 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { std::cerr << context.location << " WARNING: unnamed type\n";
      yylhs.value.as < ComponentType > () = ComponentType{{gen_anon_member_name(), yystack_[1].value.as < Type > ()}, true, absl::nullopt, absl::nullopt, StorageMode::static_ }; }
#line 8974 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 328:
#line 1251 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{{gen_anon_member_name(), yystack_[2].value.as < Type > ()}, false, yystack_[0].value.as < Value > (), absl::nullopt, StorageMode::static_ }; 
      feature_not_implemented(context.location, context.asn1_tree, "DEFAULT", "Not yet specifying default. ");
      std::cerr << context.location << " WARNING: unnamed type\n"; }
#line 8982 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 329:
#line 1255 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{yystack_[0].value.as < NamedType > (), false, absl::nullopt, absl::nullopt, StorageMode::static_ }; }
#line 8988 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 330:
#line 1257 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{yystack_[1].value.as < NamedType > (), true, absl::nullopt, absl::nullopt, StorageMode::static_ }; }
#line 8994 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 331:
#line 1259 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{yystack_[2].value.as < NamedType > (), false, yystack_[0].value.as < Value > (), absl::nullopt, StorageMode::static_ };
      feature_not_implemented(context.location, context.asn1_tree, "DEFAULT", "Not yet specifying default. "); }
#line 9001 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 332:
#line 1262 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ComponentType > () = ComponentType{{}, false, absl::nullopt, yystack_[0].value.as < Type > (), StorageMode::static_}; }
#line 9007 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 333:
#line 1274 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SequenceOfType > () = SequenceOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9013 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 334:
#line 1276 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SequenceOfType > () = SequenceOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9019 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 335:
#line 1280 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SetType > () = SetType{}; }
#line 9025 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 336:
#line 1282 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SetType > () = SetType{yystack_[1].value.as < ComponentTypeList > ()}; }
#line 9031 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 337:
#line 1286 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SetOfType > () = SetOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9037 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 338:
#line 1288 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < SetOfType > () = SetOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9043 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 339:
#line 1292 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ChoiceType > () = ChoiceType{ yystack_[1].value.as < std::vector<NamedType> > (), StorageMode::static_ }; }
#line 9049 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 340:
#line 1296 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = yystack_[0].value.as < std::vector<NamedType> > (); }
#line 9055 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 341:
#line 1300 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = yystack_[0].value.as < std::vector<NamedType> > (); }
#line 9061 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 342:
#line 1302 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = yystack_[2].value.as < std::vector<NamedType> > (); }
#line 9067 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 343:
#line 1304 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = yystack_[4].value.as < std::vector<NamedType> > (); yylhs.value.as < std::vector<NamedType> > ().insert(yylhs.value.as < std::vector<NamedType> > ().begin(), yystack_[0].value.as < std::vector<NamedType> > ().begin(), yystack_[0].value.as < std::vector<NamedType> > ().end()); }
#line 9073 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 344:
#line 1308 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<NamedType> > () = std::vector<NamedType> { yystack_[0].value.as < NamedType > () }; }
#line 9079 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 345:
#line 1310 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yystack_[2].value.as < std::vector<NamedType> > ().push_back( yystack_[0].value.as < NamedType > () ); yylhs.value.as < std::vector<NamedType> > () = yystack_[2].value.as < std::vector<NamedType> > (); }
#line 9085 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 347:
#line 1320 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < PrefixedType > () = PrefixedType(yystack_[0].value.as < TaggedType > ()); }
#line 9091 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 348:
#line 1324 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggedType > () = TaggedType{ yystack_[1].value.as < Tag > (), TaggingMode::automatic, yystack_[0].value.as < Type > () }; }
#line 9097 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 349:
#line 1326 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggedType > () = TaggedType{ yystack_[2].value.as < Tag > (), TaggingMode::implicit, yystack_[0].value.as < Type > () }; }
#line 9103 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 350:
#line 1328 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < TaggedType > () = TaggedType{ yystack_[2].value.as < Tag > (), TaggingMode::explicit_, yystack_[0].value.as < Type > () }; }
#line 9109 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 351:
#line 1332 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Tag > () = Tag{ yystack_[2].value.as < Class > (), yystack_[1].value.as < int > () }; }
#line 9115 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 354:
#line 1340 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < int > () = yystack_[0].value.as < long long > (); }
#line 9121 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 356:
#line 1345 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Class > () = Class::universal; }
#line 9127 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 357:
#line 1347 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Class > () = Class::application; }
#line 9133 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 358:
#line 1349 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Class > () = Class::private_; }
#line 9139 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 359:
#line 1351 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Class > () = Class::context_specific; }
#line 9145 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 361:
#line 1364 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as < std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as < std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as < std::vector<ObjectIdComponentValue> > ().end()); }
#line 9151 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 362:
#line 1366 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ObjectIdComponentValue> > () = yystack_[1].value.as < std::vector<ObjectIdComponentValue> > (); std::reverse(yylhs.value.as < std::vector<ObjectIdComponentValue> > ().begin(), yylhs.value.as < std::vector<ObjectIdComponentValue> > ().end()); }
#line 9157 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 363:
#line 1370 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ObjectIdComponentValue> > ().push_back(yystack_[0].value.as < ObjectIdComponentValue > ()); }
#line 9163 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 364:
#line 1372 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::vector<ObjectIdComponentValue> > () = yystack_[0].value.as < std::vector<ObjectIdComponentValue> > (); yylhs.value.as < std::vector<ObjectIdComponentValue> > ().push_back(yystack_[1].value.as < ObjectIdComponentValue > ()); }
#line 9169 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 365:
#line 1376 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > () = yystack_[0].value.as < ObjectIdComponentValue > (); }
#line 9175 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 366:
#line 1378 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > () = yystack_[0].value.as < ObjectIdComponentValue > (); }
#line 9181 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 367:
#line 1380 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > () = yystack_[0].value.as < ObjectIdComponentValue > (); }
#line 9187 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 368:
#line 1384 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > ().name = yystack_[0].value.as < std::string > (); }
#line 9193 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 369:
#line 1388 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > ().value = yystack_[0].value.as < long long > (); }
#line 9199 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 371:
#line 1393 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < ObjectIdComponentValue > () = yystack_[1].value.as < ObjectIdComponentValue > (); yylhs.value.as < ObjectIdComponentValue > ().name = yystack_[3].value.as < std::string > (); }
#line 9205 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 389:
#line 1466 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = yystack_[0].value.as < CharacterStringType > (); }
#line 9211 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 390:
#line 1468 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = yystack_[0].value.as < CharacterStringType > (); }
#line 9217 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 391:
#line 1472 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::bmp_string; }
#line 9223 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 392:
#line 1474 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::general_string; }
#line 9229 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 393:
#line 1476 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::graphic_string; }
#line 9235 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 394:
#line 1478 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::ia5_string; }
#line 9241 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 395:
#line 1480 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::iso646_string; }
#line 9247 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 396:
#line 1482 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::numeric_string; }
#line 9253 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 397:
#line 1484 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::printable_string; }
#line 9259 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 398:
#line 1486 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::teletex_string; }
#line 9265 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 399:
#line 1488 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::t61_string; }
#line 9271 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 400:
#line 1490 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::universal_string; }
#line 9277 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 401:
#line 1492 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::utf8_string; }
#line 9283 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 402:
#line 1494 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::videotex_string; }
#line 9289 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 403:
#line 1496 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::visible_string; }
#line 9295 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 404:
#line 1500 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < CharacterStringType > () = CharacterStringType::character_string; }
#line 9301 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 405:
#line 1504 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[1].value.as < Type > (); }
#line 9307 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 406:
#line 1506 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = yystack_[0].value.as < Type > (); feature_not_implemented(context.location, context.asn1_tree, "TypeWithConstraint", "Not yet checking contraints. ");  }
#line 9313 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 407:
#line 1510 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SetOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9319 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 408:
#line 1512 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SetOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9325 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 409:
#line 1514 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SequenceOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9331 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 410:
#line 1516 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SequenceOfType{ false, nullptr, std::unique_ptr<Type>(new Type(yystack_[0].value.as < Type > ())) }; }
#line 9337 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 411:
#line 1518 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SetOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9343 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 412:
#line 1520 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SetOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9349 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 413:
#line 1522 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SequenceOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9355 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 414:
#line 1524 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < Type > () = SequenceOfType{ true, std::unique_ptr<NamedType>(new NamedType(yystack_[0].value.as < NamedType > ())), nullptr }; }
#line 9361 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 415:
#line 1528 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { feature_not_implemented(context.location, context.asn1_tree, "ConstraintSpec", "Not yet checking contraints. "); }
#line 9367 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 497:
#line 1693 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9373 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 498:
#line 1697 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9379 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 499:
#line 1701 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9385 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 500:
#line 1705 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9391 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 501:
#line 1709 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9397 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;

  case 502:
#line 1712 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:919
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9403 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
    break;


#line 9407 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:919
            default:
              break;
            }
        }
#if YY_EXCEPTIONS
      catch (const syntax_error& yyexc)
        {
          YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
          error (yyexc);
          YYERROR;
        }
#endif // YY_EXCEPTIONS
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;
      YY_STACK_PRINT ();

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, YY_MOVE (yylhs));
    }
    goto yynewstate;


  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        error (yyla.location, yysyntax_error_ (yystack_[0].state, yyla));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.type_get () == yyeof_)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:
    /* Pacify compilers when the user code never invokes YYERROR and
       the label yyerrorlab therefore never appears in user code.  */
    if (false)
      YYERROR;

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    goto yyerrlab1;


  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    {
      stack_symbol_type error_token;
      for (;;)
        {
          yyn = yypact_[yystack_[0].state];
          if (!yy_pact_value_is_default_ (yyn))
            {
              yyn += yyterror_;
              if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
                {
                  yyn = yytable_[yyn];
                  if (0 < yyn)
                    break;
                }
            }

          // Pop the current state because it cannot handle the error token.
          if (yystack_.size () == 1)
            YYABORT;

          yyerror_range[1].location = yystack_[0].location;
          yy_destroy_ ("Error: popping", yystack_[0]);
          yypop_ ();
          YY_STACK_PRINT ();
        }

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = yyn;
      yypush_ ("Shifting", YY_MOVE (error_token));
    }
    goto yynewstate;


  /*-------------------------------------.
  | yyacceptlab -- YYACCEPT comes here.  |
  `-------------------------------------*/
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;


  /*-----------------------------------.
  | yyabortlab -- YYABORT comes here.  |
  `-----------------------------------*/
  yyabortlab:
    yyresult = 1;
    goto yyreturn;


  /*-----------------------------------------------------.
  | yyreturn -- parsing is finished, return the result.  |
  `-----------------------------------------------------*/
  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
#if YY_EXCEPTIONS
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack\n";
        // Do not try to display the values of the reclaimed symbols,
        // as their printers might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
#endif // YY_EXCEPTIONS
  }

  void
  asn1_parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what ());
  }

  // Generate an error message.
  std::string
  asn1_parser::yysyntax_error_ (state_type yystate, const symbol_type& yyla) const
  {
    // Number of reported tokens (one for the "unexpected", one per
    // "expected").
    size_t yycount = 0;
    // Its maximum.
    enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
    // Arguments of yyformat.
    char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state
         merging (from LALR or IELR) and default reductions corrupt the
         expected token list.  However, the list is correct for
         canonical LR with one exception: it will still contain any
         token that will not be accepted due to an error action in a
         later state.
    */
    if (!yyla.empty ())
      {
        int yytoken = yyla.type_get ();
        yyarg[yycount++] = yytname_[yytoken];
        int yyn = yypact_[yystate];
        if (!yy_pact_value_is_default_ (yyn))
          {
            /* Start YYX at -YYN if negative to avoid negative indexes in
               YYCHECK.  In other words, skip the first -YYN actions for
               this state because they are default actions.  */
            int yyxbegin = yyn < 0 ? -yyn : 0;
            // Stay within bounds of both yycheck and yytname.
            int yychecklim = yylast_ - yyn + 1;
            int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
            for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
              if (yycheck_[yyx + yyn] == yyx && yyx != yyterror_
                  && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
                {
                  if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                    {
                      yycount = 1;
                      break;
                    }
                  else
                    yyarg[yycount++] = yytname_[yyx];
                }
          }
      }

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
      default: // Avoid compiler warnings.
        YYCASE_ (0, YY_("syntax error"));
        YYCASE_ (1, YY_("syntax error, unexpected %s"));
        YYCASE_ (2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_ (3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_ (4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_ (5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    size_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += yytnamerr_ (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short asn1_parser::yypact_ninf_ = -647;

  const short asn1_parser::yytable_ninf_ = -502;

  const short
  asn1_parser::yypact_[] =
  {
     -69,  -647,   147,   -69,    91,    78,  -647,  -647,   152,    35,
    -647,   134,  -647,   162,    36,  -647,  -647,   171,    35,  -647,
    -647,  -647,   208,   204,  -647,  -647,   245,   255,   257,   309,
    -647,  -647,   373,   267,   239,  -647,  -647,  -647,   313,   269,
     265,  -647,  -647,  -647,   267,   261,  -647,   359,  -647,   239,
    -647,   144,  -647,    14,  -647,   324,   258,  -647,  -647,   259,
     260,  -647,  -647,   284,  -647,   354,   178,   178,  -647,  -647,
     178,   286,  -647,   270,   178,  -647,   -15,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,  -647,   178,  -647,  -647,  -647,  2461,
    3158,  -647,  -647,  -647,  -647,   -69,  -647,  -647,  -647,  -647,
    -647,   310,  -647,  -647,   314,   291,  -647,  -647,  -647,   328,
     296,  -647,  -647,  -647,  -647,  -647,   335,   301,  -647,  -647,
     357,  -647,   332,  -647,  -647,  -647,  -647,  -647,   -34,    -8,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
    3257,  3756,   411,  -647,   298,  -647,  -647,   316,  -647,  -647,
    3356,   302,  -647,  -647,   315,  -647,  -647,   317,   112,  -647,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,  -647,  2564,  -647,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
    -647,  -647,   101,   318,   305,  3855,   191,   -55,   306,  -647,
     325,   327,  -647,   311,  -647,   -62,    27,   311,  -647,  -647,
    3855,   326,  2263,  1271,   369,   378,  3855,  2362,   379,   380,
     336,  -647,  -647,  -647,   298,  -647,  -647,   326,   340,  -647,
     116,  -647,    12,  -647,   331,  -647,   339,   326,   110,   341,
      29,   329,   362,  3257,   197,   329,  1527,   363,  -647,  3855,
    3855,   326,    30,  3855,    22,   198,  2157,   459,    61,  -647,
     311,  -647,   358,  -647,   351,  3855,   360,  -647,   366,   356,
    -647,   370,   364,  -647,  -647,   365,   104,  -647,   370,   326,
    -647,  3459,  -647,   408,   360,  -647,   -19,     0,   375,   371,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,   443,   183,
     466,  3855,   467,  -647,   326,  -647,  -647,  2157,   499,  -647,
     312,  1396,  1652,   121,  -647,   391,  -647,  -647,  -647,  -647,
     326,  -647,  -647,  -647,   360,  -647,  -647,   381,   -54,   -40,
     -21,   -18,  -647,   443,   461,  -647,   186,  -647,  3855,  -647,
     394,   390,  -647,  -647,  -647,  -647,  -647,  -647,  3855,  3855,
     326,  -647,  -647,   396,  3855,  3855,   283,    25,  -647,  3756,
     178,  -647,  -647,  -647,  -647,    69,  -647,  -647,  -647,   384,
    -647,  -647,   326,  2157,   384,  -647,  -647,  -647,  -647,  -647,
    -647,   397,  -647,  2157,   207,  -647,  -647,  2157,  -647,   150,
     195,  -647,   383,   400,  -647,  -647,   401,   392,  -647,   326,
     124,   153,   398,   386,  -647,  -647,  -647,  -647,    57,   399,
    1652,  -647,   326,   326,   384,  -647,   326,  -647,  -647,  2157,
    -647,  -647,   118,   420,  -647,  -647,   153,   410,   412,  -647,
      61,   424,    61,  -647,  -647,  -647,   427,   431,   138,  -647,
     430,  -647,    40,   326,  2007,  -647,  -647,    66,    23,   409,
    -647,   311,  3855,   422,   464,  -647,   464,  -647,  -647,  2663,
    1908,  -647,   436,   -12,  2157,  -647,   153,  -647,   326,   438,
     426,   440,   429,   441,   432,   448,   456,  -647,  -647,  1908,
    -647,  -647,  1908,  -647,   326,   697,  -647,   326,  -647,   326,
    -647,  -647,   326,  -647,   326,  -647,  3954,  2762,    27,   139,
    -647,  -647,    43,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,   450,   329,   153,   153,   153,   825,
     577,  1527,  -647,  1527,  2157,  2157,  2157,  2157,  2157,   334,
      16,   457,   153,   329,   433,  -647,   460,  -647,  -647,    73,
    -647,   311,    82,   451,  -647,  -647,    41,  -647,  -647,   449,
     360,  -647,   462,   465,  -647,   326,  2861,  -647,  -647,  -647,
    -647,  -647,   360,  -647,  -647,  3558,   553,   153,  -647,  -647,
      70,  -647,  1652,  -647,   472,  -647,   128,   143,  -647,  -647,
     458,   -21,  -647,  -647,   763,  -647,  -647,  -647,    31,   -13,
      44,   -13,    32,   477,   283,  -647,  3855,  -647,  -647,  -647,
    -647,  -647,   153,   473,   474,  -647,   153,   153,   153,   153,
     153,  -647,  -647,  -647,  -647,  -647,   479,  -647,   482,   485,
     311,  2157,    19,   478,  -647,  -647,  -647,   480,   481,  -647,
     491,  -647,   463,   494,   247,   484,  2157,   149,   495,   486,
     326,  -647,   488,   490,   492,  -647,  -647,   432,  1652,  -647,
      21,  -647,  -647,  -647,  -647,    51,    52,    52,  -647,  -647,
    -647,   525,  -647,  -647,   326,  -647,  -647,  -647,  -647,  -647,
     496,   153,   311,  2960,  3657,  2125,  -647,    26,   153,  -647,
     311,  -647,   311,  -647,  -647,    34,  1652,   490,   311,   311,
    -647,  -647,  1146,  -647,  -647,  -647,  -647,  -647,   363,  -647,
    -647,   464,  -647,  -647,  -647,   507,   311,   497,  -647,   498,
    1146,  -647,   153,   500,   513,  -647,  -647,  -647,  -647,  -647,
    -647,  -647,   492,  -647,  4523,  4611,  -647,   501,  -647,  -647,
     397,  -647,  -647,   310,  -647,  -647,  -647,   314,   291,  -647,
    -647,  -647,  -647,  2157,  -647,  -647,  -647,  -647,  -647,   328,
    -647,  -647,  -647,   296,  -647,  -647,  -647,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,  -647,  -647,   335,  -647,   211,  -647,
    -647,  -647,  -647,  -647,   357,   332,  -647,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,   -34,    -8,  -647,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,   502,  -647,  -647,
    -647,  -647,  -647,   118,  1783,  -647,   505,   999,  -647,  -647,
     326,   153,  -647,  -647,  -647,  4427,  -647,   311,  3059,   153,
    -647,  -647,   504,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,  4427,  -647,  4193,
    -647,  -647,  -647,  4076,  -647,   509,   529,  4310,  -647,  -647,
    -647,  -647,  3657,  -647,  -647,   518,  3657
  };

  const unsigned short
  asn1_parser::yydefact_[] =
  {
       0,   500,     0,     2,     0,   147,     1,     3,   158,     0,
     144,   145,   146,     0,   162,   155,   498,     0,   150,   153,
     154,   152,   368,     0,   149,   157,     0,     0,     0,   164,
     148,   151,     0,     0,   377,   161,   159,   160,     0,     0,
       0,   378,   379,   375,     0,     0,   163,     0,   156,   377,
     374,   169,   376,   171,   143,   173,     0,   497,   499,     0,
     170,   181,   183,   184,   186,     0,   175,     0,   168,   167,
       0,     0,     4,     0,   174,   176,     0,   191,   193,   194,
      95,    96,    97,    98,   165,   187,   189,   190,   192,     0,
       0,   182,   185,   172,   177,     0,   188,    68,    11,   217,
     312,     0,   391,   284,     0,     0,   385,   387,   388,     0,
       0,   382,   228,   392,   393,   394,     0,   287,   395,   396,
       0,   234,     0,   373,   397,   304,   372,   380,     0,     0,
     399,   398,   383,   386,    10,   400,   247,   401,   402,   403,
       0,     0,   353,   497,     0,   112,    67,     0,    83,   233,
       0,     0,   216,   229,     0,   214,   197,   195,     0,   212,
     219,   230,   226,   237,   218,   236,   232,   240,   241,   242,
     243,   221,   215,   244,   347,     0,   235,   239,   231,   238,
     225,   227,   245,   222,   246,   223,   224,   220,   389,   390,
     213,   406,    84,     0,     0,     0,     0,   196,     0,   178,
     179,   305,   404,     0,   381,     0,     0,     0,   360,   311,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   497,    13,     6,     8,    12,    14,   209,     0,     7,
     498,   111,     0,   104,     0,   108,   107,   110,   184,     0,
     359,     0,     0,     0,     0,     0,     0,     0,   405,     0,
       0,   348,     0,     0,     0,     0,     0,     0,     0,   180,
       0,   344,     0,   340,   341,     0,   493,   303,     0,   296,
     300,   302,   501,   114,     8,     0,     0,   289,     0,   333,
     334,     0,   470,     0,   493,   313,   326,   329,     0,   315,
     324,   293,   294,   458,   452,   453,   454,   384,     0,   312,
       0,     0,     0,   286,     0,   460,   467,     0,     0,   285,
       0,     0,     0,   455,   456,   130,   417,   119,   120,   121,
     471,   449,   457,   451,   493,   416,   418,   419,   422,     0,
     424,     0,   427,     0,   430,   438,   440,   441,     0,   442,
       0,   462,   444,   445,   443,   446,   447,   448,     0,     0,
     337,   338,   335,     0,     0,     0,     0,     0,   103,     0,
       0,   352,   357,   358,   356,     0,    24,    25,    26,    93,
      86,   102,    99,     0,   113,   261,   253,   254,   255,   266,
     267,   251,   272,     0,   276,   270,   273,     0,   259,   497,
     499,   206,   233,     0,   257,   199,     0,   202,   117,   204,
     205,     0,   271,   269,   249,   260,   250,   252,   198,     0,
       0,   211,   350,   349,    94,   207,   346,    69,    85,     0,
     251,   276,   275,   499,   262,   274,   210,     0,     0,   369,
     370,     0,   363,   365,   366,   367,   368,   198,     0,   307,
       0,   339,     0,   248,     0,   299,   295,     0,     0,     0,
     288,     0,     0,   322,     0,   327,     0,   330,   314,     0,
       0,   423,     0,   140,     0,   472,   490,   491,     0,   476,
      90,     0,    88,     0,     0,     0,     0,   435,   434,     0,
     437,   436,     0,   431,   459,     0,   463,   409,   413,   410,
     414,   336,   407,   411,   408,   412,    29,     0,     0,     0,
      16,    18,    33,    19,    20,    21,    22,    23,   501,     9,
     105,   106,   354,   355,     0,     0,   101,   256,   282,     0,
       0,     0,   200,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   100,     0,     0,   370,     0,   361,   364,     0,
     306,     0,     0,   342,   345,   495,     0,   494,   492,     0,
     493,   301,     0,     0,   290,   332,     0,   450,   455,   456,
     328,   331,   493,   325,   433,   129,     0,   141,   475,   473,
       0,   474,     0,    87,     0,   439,     0,     0,   132,   415,
     420,   425,   428,   469,     0,   468,   461,   464,    49,    36,
      36,    36,    53,    55,     0,    30,     0,    31,    28,   351,
      27,   268,   283,     0,     0,   203,   277,   263,   279,   278,
     280,   264,   265,   208,   281,   362,     0,   308,     0,     0,
       0,     0,     0,   297,   292,   291,   323,   320,   316,   128,
     111,   125,     0,     0,   110,     0,     0,     0,     0,   480,
     485,    91,    89,   137,   134,   138,   131,     0,     0,   465,
       0,    47,    46,    34,    35,    45,    40,    40,    52,    51,
      50,     0,    15,    17,    32,   258,   201,   371,   309,   310,
     343,   496,     0,     0,     0,     0,   122,     0,   142,   477,
       0,   479,     0,   484,   482,   489,     0,   137,     0,     0,
     133,   421,     0,    70,    48,    71,    72,    73,     0,    43,
      42,     0,    38,    41,    37,     0,     0,   298,   321,   317,
       0,   124,   123,   497,     0,   481,   487,   488,   486,   483,
      92,   136,   135,   139,    24,    25,   503,   504,   505,   506,
     251,   508,   509,   510,   391,   284,   272,   514,   515,   516,
     517,   518,   519,   520,   385,   387,   523,   524,   388,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   382,   286,
     537,   538,   539,   540,   541,   542,   543,   544,   276,   546,
     547,   548,   549,   550,   551,   552,   553,   373,   270,   556,
     557,   558,   559,   560,   304,   372,   380,   564,   565,   566,
     567,   568,   569,   570,   383,   386,   285,   574,   575,   576,
     577,   273,    66,   275,     0,    79,     0,     0,    77,    80,
      81,    82,    65,    44,    39,    64,    54,     0,     0,    82,
     478,    75,     0,    76,    78,   504,   507,   510,   511,   512,
     513,   514,   515,   520,   521,   522,   525,   526,   530,   535,
     536,   543,   545,   551,   552,   554,   555,   561,   562,   563,
     564,   565,   571,   572,   573,   574,   578,    64,   502,    64,
      56,    59,    58,     0,    62,   318,     0,    64,     5,    57,
      61,    63,     0,    74,    60,   319,     0
  };

  const short
  asn1_parser::yypgoto_[] =
  {
    -647,   629,  -647,  -647,   -89,  -647,  -107,  -647,   407,  -647,
    -647,    62,  -480,    85,  -647,  -647,  -647,  -209,  -647,     1,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -200,  -557,
    -647,  -647,  -647,  -646,  -572,  -647,   -16,  -647,  -647,  -647,
    -647,  -647,  -147,  -137,   103,  -647,  -647,   434,  -647,  -159,
    -647,  -647,  -647,  -647,  -647,   584,  -647,   333,  -647,   119,
    -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
      38,   -10,    -5,  -647,  -647,  -647,  -647,  -647,  -647,   668,
    -647,   656,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
    -647,  -647,   617,  -647,   641,   625,  -105,   611,  -647,  -647,
    -239,  -647,  -647,  -180,  -647,  -647,  -647,  -647,  -647,  -647,
     -66,  -647,  -196,  -242,   218,  -647,  -647,     2,  -647,  -647,
     193,  -647,  -647,  -201,   142,  -647,  -647,    33,  -442,  -647,
    -647,  -647,   157,  -647,  -647,  -647,   493,  -543,  -447,  -647,
    -647,  -647,  -647,  -647,  -647,    79,  -647,  -647,  -647,  -647,
    -647,  -647,  -647,  -647,  -647,   -83,  -647,   188,   170,  -647,
    -647,  -647,   700,  -647,   664,   672,  -647,  -647,  -647,  -647,
     233,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,  -647,
    -126,  -647,  -647,  -275,  -310,  -647,  -647,   240,  -647,   241,
    -647,   388,  -647,  -647,   264,  -647,  -424,  -647,  -647,  -647,
    -647,  -647,  -647,   145,  -118,  -647,  -647,  -647,  -647,  -647,
    -332,  -647,  -647,  -647,  -647,  -647,  -647,  -258,  -647,    45,
      -9,   -45,    15,  -341,  -647
  };

  const short
  asn1_parser::yydefgoto_[] =
  {
      -1,     2,     3,   816,   391,   223,   144,    77,   225,   226,
     499,   500,   368,   414,   501,   502,   598,   655,   503,   703,
     504,   505,   700,   506,   652,   507,   660,   662,   859,   860,
     861,   862,   863,   864,   145,   146,   694,   695,   696,   806,
     697,   807,   808,   809,   147,   148,    78,   315,   471,   149,
      79,    80,    81,    82,    83,   150,   232,   233,   234,   235,
     151,   152,   153,   154,   393,   316,   317,   633,   318,   577,
     578,   688,   644,   319,    65,     4,    10,    11,    12,    17,
      18,    19,    20,    14,    29,    39,    54,    55,    59,    67,
      73,    74,    75,   199,    76,    61,    62,    84,    85,   155,
     394,   156,   395,   396,   397,   157,   398,    86,    87,    88,
     320,   159,   287,   425,   401,   402,   403,   411,   519,   160,
     404,   161,   276,   267,   405,   162,   268,   269,   270,   163,
     164,   438,   439,   165,   166,   167,   288,   289,   290,   168,
     169,   170,   171,   262,   263,   264,   172,   173,   174,   175,
     240,   514,   365,   176,   259,   431,   432,   433,   434,   435,
     177,   178,   406,    34,    45,    43,   179,   180,   181,   182,
     407,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     248,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   461,   479,   482,   334,   335,   336,   337,   338,   339,
     340,   586,   341,   587,   342,   343,   344,   345,   569,   571,
     638,   639,   684,   685,   719,   346,   347,   445,   548,   197,
     193,   408,   198,   229,   812
  };

  const short
  asn1_parser::yytable_[] =
  {
      22,   472,   214,   218,   400,   551,   277,   261,    64,    22,
     215,   219,   563,   627,   280,     5,   509,   590,     5,   430,
     351,    64,    90,   158,   196,    64,   453,   291,   292,    64,
     560,   454,   561,   224,   224,   600,   236,   473,   417,    15,
      90,   417,   566,    97,   417,    56,   805,   417,   417,    95,
     456,   222,   231,   210,   366,   367,  -429,    98,  -426,   480,
     266,   585,   362,   716,   805,   429,   475,   595,   211,  -116,
     455,    26,   477,   512,   227,   237,   653,   429,   693,   216,
       1,   650,   658,   252,   244,   282,   618,   392,    16,   457,
     212,  -426,   213,   596,   211,    27,    64,   424,    63,   274,
     654,   698,   701,   693,   194,   478,    28,   213,   509,   251,
     200,    63,    89,   213,   213,    63,   217,   273,   213,    63,
     651,   659,    70,   717,   363,  -429,   513,   718,   481,   255,
      89,   709,   597,   653,   192,   531,   224,   358,   134,   224,
     699,   702,     8,   364,   279,   692,   286,     6,   424,   359,
     350,   286,   488,   490,   222,   228,   228,   654,   493,   495,
     585,   805,   543,    57,    58,   508,    58,   213,    13,    58,
       1,    57,     1,    58,   508,   713,   272,   372,   465,    57,
     399,  -118,   621,   412,   413,    16,   238,   416,   550,   509,
      16,   535,   637,   535,   265,   529,   271,    21,   278,   443,
    -166,   281,     9,   281,    53,   545,    21,   281,   281,   552,
       1,   230,   804,   437,   424,   443,    16,   871,     1,    58,
      16,   275,     1,    58,   424,  -116,   563,  -196,   424,   450,
     804,     1,    58,   247,    71,   463,  -196,    25,   213,   252,
    -499,   451,  -196,  -499,  -497,  -497,   544,  -497,   252,   436,
     554,   440,   224,  -499,   236,   511,  -497,  -499,   228,  -497,
     424,   409,   641,   540,   593,  -274,   643,    23,   646,  -274,
     231,   428,   484,   428,   679,   541,   594,   814,    16,   400,
     647,   400,   487,   489,    41,    42,   680,  -275,   492,   494,
     524,  -275,   623,   237,   525,  -275,    30,   415,   526,   418,
     535,   427,   869,   619,   628,   424,  -450,   496,   497,  -466,
     869,   498,   256,  -450,    64,    64,  -466,   213,   373,   419,
     437,   520,   428,   213,   213,  -498,   369,    57,    58,   875,
     374,   207,  -287,  -287,    32,   207,   509,  -287,   691,   281,
     281,   604,   568,   605,    33,   281,   281,   536,   714,   538,
     715,    35,   427,   366,   367,   322,   468,   469,   611,   612,
     424,    36,   392,    37,   392,   424,   424,   424,   424,   424,
      38,   563,  -126,   213,   228,   551,   720,    15,   546,    44,
     428,   656,   657,   870,    46,   437,   555,   437,   428,   224,
      47,   274,    48,   286,    50,    51,    66,    70,   428,   437,
      68,    69,   428,   437,   238,    63,   321,   588,    71,   592,
      72,    92,    93,   201,   224,   203,   224,   202,   427,   204,
     205,   436,   206,   436,   261,   207,   208,   239,   427,   563,
     589,   591,   427,   265,   428,   209,   241,   242,   271,   246,
     245,  -115,   278,   254,   257,   428,   323,   428,   253,   258,
     281,   260,   213,   322,   322,   399,   348,   399,   224,   549,
     356,    16,   424,   428,   427,   349,   354,   355,   291,   292,
     293,   294,   360,   295,   426,   296,   630,   424,   357,   428,
    -109,   417,   361,   441,   297,   613,   311,   410,   442,   613,
     286,   446,   444,   447,   437,   452,   448,   437,   557,   634,
     458,   460,  -500,   449,   321,   321,   462,   464,   459,   427,
     544,   228,   467,   275,   683,   474,   424,   485,   476,  -432,
     486,   491,   515,  -312,   521,   466,   522,   303,  -262,   523,
     664,   528,   440,   392,   428,   527,   409,   530,   409,   428,
     428,   428,   428,   428,   323,   323,   520,   281,   533,   537,
     534,   392,   322,   539,   428,  -118,   542,   428,   508,   556,
     565,   640,   570,   572,   427,   573,   574,   645,   575,   427,
     427,   427,   427,   427,   309,   579,   576,   613,   580,   599,
     635,   603,   614,    58,   424,   615,   547,   622,   620,   624,
     553,   516,   625,   636,   642,   648,   322,   661,   322,   666,
     665,   517,   322,   321,   675,   518,   667,   286,   286,   668,
     192,   265,   669,   558,   559,   672,  -127,   673,   674,   676,
     681,   322,   677,   682,   322,   686,   810,   322,   687,   705,
     689,   815,     7,   706,   817,   818,   428,   532,   820,   -11,
     -10,  -501,   822,   323,   810,   392,   872,   321,   392,   321,
     371,   428,   866,   321,   873,   876,   663,   867,   704,   711,
     824,   214,   218,   271,   281,   281,   427,   821,   631,   215,
     219,   640,   321,   640,   195,   321,   370,   721,   321,   645,
     723,   427,   567,   722,   632,   690,    31,   323,    40,   323,
     549,    94,   510,   323,    60,    91,    96,   265,   617,   670,
     813,   291,   292,   293,   294,   707,   295,   549,   296,   616,
     353,    24,   323,    52,   322,   323,    49,   297,   323,   581,
     427,   483,   418,   582,   564,   549,   322,     0,     0,   649,
       0,   557,     0,     0,     0,     0,     0,   602,   810,     0,
       0,   810,   606,   607,   608,   609,   610,     0,     0,     0,
       0,     0,   286,     0,     0,     0,     0,     0,   428,     0,
     303,     0,     0,     0,     0,   321,     0,   291,   292,   293,
     294,     0,   295,     0,   296,     0,   583,   321,     0,     0,
       0,     0,     0,   297,     0,     0,     0,     0,   427,     0,
     322,     0,     0,     0,     0,     0,     0,   557,     0,     0,
       0,     0,     0,     0,     0,   323,   286,   309,   271,   281,
     286,     0,     0,     0,     0,     0,     0,   323,     0,   549,
       0,     0,   549,     0,     0,     0,   303,   584,   322,   291,
     292,   375,   376,     0,   377,     0,   378,     0,     0,   671,
       0,   321,   583,   322,     0,   297,   558,   559,     0,   379,
     380,     0,     0,     0,   678,    98,     0,     0,     0,   420,
       0,     0,     0,   281,     0,   382,     0,   281,     0,     0,
       0,     0,   383,   309,     0,     0,     0,     0,     0,   321,
       0,   323,     0,     0,     0,     0,     0,     0,   303,     0,
       0,     0,     0,   712,   321,     0,     0,     0,     0,     0,
       0,   421,     0,     0,     0,     0,     0,     0,     0,     0,
     811,     0,   558,   559,   385,     0,     0,     0,     0,   323,
       0,     0,     0,     0,     0,     0,     0,     0,   819,     0,
       0,     0,     0,     0,   323,   309,   134,     0,     0,     0,
       0,     0,     0,     0,     0,   386,     0,     0,     0,   387,
     601,     0,     0,     0,     0,     0,     0,     0,    23,     0,
       0,   517,     0,     0,     0,     0,   388,     0,     0,     0,
       0,     0,     0,     0,   422,   423,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   291,   292,   375,   376,     0,   377,     0,
     378,     0,     0,     0,     0,     0,     0,     0,     0,   297,
       0,    97,   811,   379,   380,   811,     0,     0,   726,   727,
     728,    99,   729,   730,   731,   732,   733,   734,   735,   736,
     737,   738,   739,   740,   741,   742,   743,   744,   745,   746,
     747,   748,   749,   750,   751,   752,   753,   754,   755,   756,
     757,   758,   759,   760,   112,   113,   114,   115,   761,   762,
     763,   764,   765,   766,   767,   768,   769,   118,   770,   771,
     772,   773,   119,   774,   121,   775,   776,   777,   778,   779,
     780,   781,   782,   124,   783,   784,   785,   786,   787,   788,
     789,   790,   791,   792,   130,   793,   131,   794,   795,   796,
     797,   798,   799,   800,   135,   136,   137,   138,   139,   801,
       0,     0,     0,   387,   823,     0,     0,   142,     0,     0,
       0,     0,    23,     0,     0,     0,   802,     0,     0,     0,
     388,     0,     0,     0,     0,     0,     0,     0,   803,   390,
     291,   292,   375,   376,     0,   377,     0,   378,     0,     0,
       0,     0,     0,     0,     0,     0,   297,     0,    97,     0,
     724,   725,     0,     0,     0,   726,   727,   728,    99,   729,
     730,   731,   732,   733,   734,   735,   736,   737,   738,   739,
     740,   741,   742,   743,   744,   745,   746,   747,   748,   749,
     750,   751,   752,   753,   754,   755,   756,   757,   758,   759,
     760,   112,   113,   114,   115,   761,   762,   763,   764,   765,
     766,   767,   768,   769,   118,   770,   771,   772,   773,   119,
     774,   121,   775,   776,   777,   778,   779,   780,   781,   782,
     124,   783,   784,   785,   786,   787,   788,   789,   790,   791,
     792,   130,   793,   131,   794,   795,   796,   797,   798,   799,
     800,   135,   136,   137,   138,   139,   801,     0,     0,     0,
     387,     0,     0,     0,   142,   291,   292,   293,   294,    23,
     295,     0,   296,   802,     0,     0,     0,   388,     0,     0,
       0,   297,     0,    97,     0,   803,   390,     0,     0,     0,
       0,    98,   298,    99,     0,   299,     0,     0,   101,   102,
     103,     0,   104,   105,     0,     0,     0,   300,   301,   106,
     107,     0,     0,   108,   109,   302,     0,     0,   110,     0,
       0,     0,     0,   111,   303,   304,   112,   113,   114,   115,
       0,     0,     0,     0,   305,   116,     0,   117,     0,   118,
       0,   306,     0,     0,   119,   120,   121,   122,     0,   123,
       0,   307,     0,     0,     0,   124,     0,   125,   126,   127,
     128,   129,   308,   211,     0,     0,   130,     0,   131,   132,
     133,   309,   134,     0,     0,     0,   135,   136,   137,   138,
     139,   310,     0,     0,     0,   311,     0,   312,     0,   142,
     291,   292,   293,   294,     0,   295,     0,   296,     0,     0,
       0,     0,     0,     0,     0,     0,   297,     0,    97,     0,
     313,   314,     0,     0,     0,     0,    98,   298,    99,     0,
     299,     0,     0,   101,   102,   103,     0,   104,   105,     0,
       0,     0,     0,     0,   106,   107,     0,     0,   108,   109,
       0,     0,     0,   110,     0,     0,     0,     0,   111,   303,
     304,   112,   113,   114,   115,     0,     0,     0,     0,   305,
     116,     0,   117,     0,   118,     0,   306,     0,     0,   119,
     120,   121,   122,     0,   123,     0,   307,     0,     0,     0,
     124,     0,   125,   126,   127,   128,   129,   308,   211,     0,
       0,   130,     0,   131,   132,   133,   309,   134,     0,     0,
       0,   135,   136,   137,   138,   139,   310,     0,   470,     0,
       0,     0,   312,     0,   142,     0,     0,     0,     0,     0,
       0,   291,   292,   375,   376,     0,   377,     0,   378,     0,
       0,     0,     0,     0,     0,   313,   314,   297,     0,    97,
       0,   379,   380,     0,     0,     0,     0,    98,     0,    99,
       0,   381,     0,     0,   101,   102,   103,   382,   104,   105,
       0,     0,     0,     0,   383,   106,   107,     0,     0,   108,
     109,     0,     0,     0,   110,     0,     0,     0,     0,   111,
     303,     0,   112,   113,   114,   115,     0,     0,     0,     0,
       0,   116,     0,   384,     0,   118,     0,     0,     0,     0,
     119,   120,   121,   122,     0,   123,   385,     0,     0,     0,
       0,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,     0,   130,     0,   131,   132,   133,   309,   134,     0,
       0,     0,   135,   136,   137,   138,   139,   386,     0,     0,
       0,   387,     0,     0,     0,   142,   291,   292,   293,   294,
      23,   295,     0,   296,     0,     0,     0,     0,   388,     0,
       0,     0,   297,     0,    97,     0,   389,   390,     0,     0,
       0,     0,    98,   298,    99,     0,   299,     0,     0,   101,
     102,   103,     0,   104,   105,     0,     0,     0,     0,     0,
     106,   107,     0,     0,   108,   109,     0,     0,     0,   110,
       0,     0,     0,     0,   111,   303,   304,   112,   113,   114,
     115,     0,     0,     0,     0,   305,   116,     0,   117,     0,
     118,     0,   306,     0,     0,   119,   120,   121,   122,     0,
     123,     0,   307,     0,     0,     0,   124,     0,   125,   126,
     127,   128,   129,   308,   211,     0,     0,   130,     0,   131,
     132,   133,   309,   134,     0,     0,     0,   135,   136,   137,
     138,   139,   310,     0,     0,     0,     0,     0,   312,     0,
     142,     0,     0,     0,     0,     0,     0,   291,   292,   375,
     376,     0,   377,     0,   378,     0,     0,     0,     0,     0,
       0,   313,   314,   297,     0,    97,     0,   379,   380,     0,
       0,     0,     0,    98,     0,    99,     0,   381,     0,     0,
     101,   102,   103,   382,   104,   105,     0,     0,     0,     0,
     383,   106,   107,     0,     0,   108,   109,     0,     0,     0,
     110,     0,     0,     0,     0,   111,   303,     0,   112,   113,
     114,   115,     0,     0,     0,     0,     0,   116,     0,   384,
       0,   118,     0,     0,     0,     0,   119,   120,   121,   122,
       0,   123,   385,     0,     0,     0,     0,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,     0,   130,     0,
     131,   132,   133,   309,   134,     0,     0,     0,   135,   136,
     137,   138,   139,   386,     0,     0,     0,   387,     0,     0,
       0,   142,   291,   292,   293,   294,    23,   295,     0,   296,
       0,     0,     0,     0,   388,     0,     0,     0,   297,     0,
      97,     0,   422,   390,     0,     0,     0,     0,    98,     0,
      99,     0,   299,     0,     0,   101,   102,   103,     0,   104,
     105,     0,     0,     0,     0,     0,   106,   107,     0,     0,
     108,   109,     0,     0,     0,   110,     0,     0,     0,     0,
     111,   303,   304,   112,   113,   114,   115,     0,     0,     0,
       0,   305,   116,     0,   117,     0,   118,     0,   306,     0,
       0,   119,   120,   121,   122,     0,   123,     0,   307,     0,
       0,     0,   124,     0,   125,   126,   127,   128,   129,   308,
     211,   291,   292,   130,     0,   131,   132,   133,   309,   134,
       0,     0,     0,   135,   136,   137,   138,   139,   310,    97,
       0,     0,     0,     0,   312,     0,   142,    98,     0,    99,
       0,   100,     0,     0,   101,   102,   103,     0,   104,   105,
       0,     0,     0,     0,     0,   106,   107,   313,   314,   108,
     109,     0,     0,     0,   110,     0,     0,     0,     0,   111,
       0,     0,   112,   113,   114,   115,     0,     0,     0,     0,
       0,   116,     0,   117,     0,   118,     0,     0,     0,     0,
     119,   120,   121,   122,     0,   123,     0,     0,     0,     0,
       0,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,     0,   130,     0,   131,   132,   133,     0,   134,     0,
       0,     0,   135,   136,   137,   138,   139,     0,     0,   291,
     292,   375,   376,     0,   377,   142,   378,     0,     0,     0,
       0,     0,     0,     0,     0,   297,     0,    97,     0,   379,
     380,     0,     0,     0,     0,    98,   143,   230,     0,   420,
       0,   291,   292,   375,   376,   382,   377,     0,   378,     0,
       0,     0,   383,     0,     0,     0,     0,   297,     0,     0,
       0,   379,   380,     0,     0,     0,     0,    98,   303,     0,
       0,   420,     0,     0,     0,     0,     0,   382,     0,     0,
       0,   421,     0,     0,   383,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   385,     0,     0,     0,     0,     0,
     303,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   421,     0,   309,   134,     0,     0,     0,
       0,     0,     0,     0,     0,   386,   385,     0,     0,   710,
       0,     0,     0,     0,     0,     0,     0,     0,    23,     0,
       0,     0,     0,     0,     0,     0,   388,   309,   134,     0,
       0,     0,     0,     0,   422,   423,     0,   386,     0,     0,
       0,   387,     0,     0,     0,    97,     0,     0,     0,     0,
      23,     0,     0,    98,     0,    99,     0,   100,   388,     0,
     101,   102,   103,     0,   104,   105,   422,   423,   283,     0,
       0,   106,   107,     0,     0,   108,   109,     0,     0,     0,
     110,     0,     0,     0,     0,   111,     0,     0,   112,   113,
     114,   115,     0,     0,     0,     0,     0,   116,     0,   117,
       0,   118,     0,     0,     0,     0,   119,   120,   121,   122,
       0,   123,     0,     0,     0,     0,     0,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,     0,   130,     0,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,   138,   139,     0,    97,   284,     0,     0,   285,     0,
       0,   142,    98,     0,    99,     0,   100,     0,     0,   101,
     102,   103,     0,   104,   105,     0,     0,   283,     0,     0,
     106,   107,   143,    16,   108,   109,     0,     0,     0,   110,
       0,     0,     0,     0,   111,     0,     0,   112,   113,   114,
     115,     0,     0,     0,     0,     0,   116,     0,   117,     0,
     118,     0,     0,     0,     0,   119,   120,   121,   122,     0,
     123,     0,     0,     0,     0,     0,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,     0,   130,     0,   131,
     132,   133,     0,   134,     0,     0,     0,   135,   136,   137,
     138,   139,     0,    97,   284,     0,     0,   352,     0,     0,
     142,    98,     0,    99,     0,   100,     0,     0,   101,   102,
     103,     0,   104,   105,     0,     0,     0,     0,     0,   106,
     107,   143,    16,   108,   109,     0,     0,     0,   110,     0,
       0,     0,     0,   111,     0,     0,   112,   113,   114,   115,
       0,     0,     0,     0,     0,   116,     0,   117,     0,   118,
       0,     0,     0,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,     0,   124,     0,   125,   126,   127,
     128,   129,     0,     0,     0,     0,   130,     0,   131,   132,
     133,     0,   134,     0,     0,     0,   135,   136,   137,   138,
     139,     0,   140,     0,     0,   141,    97,     0,     0,   142,
       0,     0,     0,     0,    98,     0,    99,     0,   100,     0,
       0,   101,   102,   103,     0,   104,   105,     0,     0,     0,
     143,    16,   106,   107,     0,     0,   108,   109,     0,     0,
       0,   110,     0,   249,     0,     0,   111,     0,     0,   112,
     113,   114,   115,     0,   250,     0,     0,     0,   116,     0,
     117,     0,   118,     0,     0,     0,     0,   119,   120,   121,
     122,     0,   123,     0,     0,     0,     0,     0,   124,     0,
     125,   126,   127,   128,   129,     0,     0,     0,     0,   130,
       0,   131,   132,   133,     0,   134,     0,     0,     0,   135,
     136,   137,   138,   139,     0,    97,     0,     0,     0,     0,
       0,     0,   142,    98,     0,    99,     0,   100,     0,     0,
     101,   102,   103,     0,   104,   105,     0,     0,   283,     0,
       0,   106,   107,   143,    16,   108,   109,     0,     0,     0,
     110,     0,     0,     0,     0,   111,     0,     0,   112,   113,
     114,   115,     0,     0,     0,     0,     0,   116,     0,   117,
       0,   118,     0,     0,     0,     0,   119,   120,   121,   122,
       0,   123,     0,     0,     0,     0,     0,   124,     0,   125,
     126,   127,   128,   129,     0,     0,     0,     0,   130,     0,
     131,   132,   133,     0,   134,     0,     0,     0,   135,   136,
     137,   138,   139,     0,    97,   562,   366,   367,     0,     0,
       0,   142,    98,     0,    99,     0,   100,     0,     0,   101,
     102,   103,     0,   104,   105,     0,     0,     0,     0,     0,
     106,   107,   143,    16,   108,   109,     0,     0,     0,   110,
       0,     0,     0,     0,   111,     0,     0,   112,   113,   114,
     115,     0,     0,     0,     0,     0,   116,     0,   117,     0,
     118,     0,     0,     0,     0,   119,   120,   121,   122,     0,
     123,     0,     0,     0,     0,     0,   124,     0,   125,   126,
     127,   128,   129,     0,     0,     0,     0,   130,     0,   131,
     132,   133,     0,   134,     0,     0,     0,   135,   136,   137,
     138,   139,     0,    97,     0,     0,     0,     0,     0,     0,
     142,    98,     0,    99,     0,   100,     0,     0,   101,   102,
     103,     0,   104,   105,     0,     0,   283,     0,     0,   106,
     107,   143,    16,   108,   109,     0,     0,     0,   110,     0,
       0,     0,     0,   111,     0,     0,   112,   113,   114,   115,
       0,     0,     0,     0,     0,   116,     0,   117,     0,   118,
       0,     0,     0,     0,   119,   120,   121,   122,     0,   123,
       0,     0,     0,     0,     0,   124,     0,   125,   126,   127,
     128,   129,     0,     0,     0,     0,   130,     0,   131,   132,
     133,     0,   134,     0,     0,     0,   135,   136,   137,   138,
     139,     0,    97,   626,     0,     0,     0,     0,     0,   142,
      98,     0,    99,     0,   100,     0,     0,   101,   102,   103,
       0,   104,   105,     0,     0,   283,     0,     0,   106,   107,
     143,    16,   108,   109,     0,     0,     0,   110,     0,     0,
       0,     0,   111,     0,     0,   112,   113,   114,   115,     0,
       0,     0,     0,     0,   116,     0,   117,     0,   118,     0,
       0,     0,     0,   119,   120,   121,   122,     0,   123,     0,
       0,     0,     0,     0,   124,     0,   125,   126,   127,   128,
     129,     0,     0,     0,     0,   130,     0,   131,   132,   133,
       0,   134,     0,     0,     0,   135,   136,   137,   138,   139,
       0,    97,   708,     0,     0,     0,     0,     0,   142,    98,
       0,    99,     0,   100,     0,     0,   101,   102,   103,     0,
     104,   105,     0,     0,   283,     0,     0,   106,   107,   143,
      16,   108,   109,     0,     0,     0,   110,     0,     0,     0,
       0,   111,     0,     0,   112,   113,   114,   115,     0,     0,
       0,     0,     0,   116,     0,   117,     0,   118,     0,     0,
       0,     0,   119,   120,   121,   122,     0,   123,     0,     0,
       0,     0,     0,   124,     0,   125,   126,   127,   128,   129,
       0,     0,     0,     0,   130,     0,   131,   132,   133,     0,
     134,     0,     0,     0,   135,   136,   137,   138,   139,     0,
      97,   865,     0,     0,     0,     0,     0,   142,    98,     0,
      99,     0,   100,     0,     0,   101,   102,   103,     0,   104,
     105,     0,     0,     0,     0,     0,   106,   107,   143,    16,
     108,   109,     0,     0,     0,   110,     0,     0,     0,     0,
     111,     0,     0,   112,   113,   114,   115,     0,     0,     0,
       0,     0,   116,     0,   117,     0,   118,     0,     0,     0,
       0,   119,   120,   121,   122,     0,   123,     0,     0,     0,
       0,     0,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,     0,   130,     0,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,   138,   139,     0,    97,
       0,     0,   141,     0,     0,     0,   142,    98,     0,    99,
       0,   100,     0,     0,   101,   102,   103,     0,   104,   105,
     220,     0,     0,     0,     0,   106,   107,   143,    16,   108,
     109,     0,     0,     0,   110,     0,     0,     0,     0,   111,
       0,     0,   112,   113,   114,   115,     0,     0,     0,     0,
       0,   116,     0,   117,     0,   118,     0,     0,     0,     0,
     119,   120,   121,   122,     0,   123,     0,     0,     0,     0,
       0,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,     0,   130,     0,   131,   132,   133,     0,   134,     0,
       0,     0,   135,   136,   137,   138,   139,     0,    97,     0,
       0,     0,     0,     0,     0,   142,    98,     0,    99,     0,
     100,     0,     0,   101,   102,   103,     0,   104,   105,     0,
       0,     0,     0,     0,   106,   107,   221,    16,   108,   109,
       0,     0,     0,   110,     0,     0,     0,     0,   111,     0,
       0,   112,   113,   114,   115,     0,     0,     0,     0,     0,
     116,     0,   117,     0,   118,     0,     0,     0,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,     0,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
       0,   130,     0,   131,   132,   133,     0,   134,     0,     0,
       0,   135,   136,   137,   138,   139,     0,   243,     0,     0,
       0,    97,     0,     0,   142,     0,     0,     0,     0,    98,
       0,    99,     0,   100,     0,     0,   101,   102,   103,     0,
     104,   105,     0,     0,     0,   143,    16,   106,   107,     0,
       0,   108,   109,     0,     0,     0,   110,     0,     0,     0,
       0,   111,     0,     0,   112,   113,   114,   115,     0,     0,
       0,     0,     0,   116,     0,   117,     0,   118,     0,     0,
       0,     0,   119,   120,   121,   122,     0,   123,     0,     0,
       0,     0,     0,   124,     0,   125,   126,   127,   128,   129,
       0,     0,     0,     0,   130,     0,   131,   132,   133,     0,
     134,     0,     0,     0,   135,   136,   137,   138,   139,     0,
      97,     0,     0,     0,     0,     0,     0,   142,    98,   253,
      99,     0,   100,     0,     0,   101,   102,   103,     0,   104,
     105,     0,     0,     0,     0,     0,   106,   107,   143,    16,
     108,   109,     0,     0,     0,   110,     0,     0,     0,     0,
     111,     0,     0,   112,   113,   114,   115,     0,     0,     0,
       0,     0,   116,     0,   117,     0,   118,     0,     0,     0,
       0,   119,   120,   121,   122,     0,   123,     0,     0,     0,
       0,     0,   124,     0,   125,   126,   127,   128,   129,     0,
       0,     0,     0,   130,     0,   131,   132,   133,     0,   134,
       0,     0,     0,   135,   136,   137,   138,   139,     0,    97,
     629,     0,     0,     0,     0,     0,   142,    98,     0,    99,
       0,   100,     0,     0,   101,   102,   103,     0,   104,   105,
       0,     0,   283,     0,     0,   106,   107,   221,    16,   108,
     109,     0,     0,     0,   110,     0,     0,     0,     0,   111,
       0,     0,   112,   113,   114,   115,     0,     0,     0,     0,
       0,   116,     0,   117,     0,   118,     0,     0,     0,     0,
     119,   120,   121,   122,     0,   123,     0,     0,     0,     0,
       0,   124,     0,   125,   126,   127,   128,   129,     0,     0,
       0,     0,   130,     0,   131,   132,   133,     0,   134,     0,
       0,     0,   135,   136,   137,   138,   139,     0,    97,     0,
       0,     0,     0,     0,     0,   142,    98,     0,    99,     0,
     100,     0,     0,   101,   102,   103,     0,   104,   105,     0,
       0,     0,     0,     0,   106,   107,   143,    16,   108,   109,
       0,     0,     0,   110,     0,     0,     0,     0,   111,     0,
       0,   112,   113,   114,   115,     0,     0,     0,     0,     0,
     116,     0,   117,     0,   118,     0,     0,     0,     0,   119,
     120,   121,   122,     0,   123,     0,     0,     0,     0,     0,
     124,     0,   125,   126,   127,   128,   129,     0,     0,     0,
       0,   130,     0,   131,   132,   133,     0,   134,     0,     0,
       0,   135,   136,   137,   138,   139,     0,    97,     0,     0,
       0,     0,     0,     0,   142,    98,     0,    99,     0,   100,
       0,     0,   101,   102,   103,     0,   104,   105,     0,     0,
       0,     0,     0,   106,   107,   221,   230,   108,   109,     0,
       0,     0,   110,     0,     0,     0,     0,   111,     0,     0,
     112,   113,   114,   115,     0,     0,     0,     0,     0,   116,
       0,   117,     0,   118,     0,     0,     0,     0,   119,   120,
     121,   122,     0,   123,     0,     0,     0,     0,     0,   124,
       0,   125,   126,   127,   128,   129,     0,     0,     0,     0,
     130,     0,   131,   132,   133,     0,   134,     0,     0,     0,
     135,   136,   137,   138,   139,     0,    97,     0,     0,     0,
       0,     0,     0,   142,    98,     0,    99,     0,   100,     0,
       0,   101,   102,   103,     0,   104,   105,     0,     0,     0,
       0,     0,   106,   107,   143,    16,   108,   109,     0,     0,
       0,   110,     0,     0,     0,     0,   111,     0,     0,   112,
     113,   114,   115,     0,     0,     0,     0,     0,   116,     0,
     117,     0,   118,     0,     0,     0,     0,   119,   120,   121,
     122,     0,   123,     0,     0,     0,     0,     0,   124,     0,
     125,   126,   127,   128,   129,     0,     0,     0,     0,   130,
       0,   131,   132,   133,     0,   134,     0,     0,     0,   135,
     136,   137,   138,   139,     0,     0,     0,     0,     0,     0,
       0,     0,   142,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,     0,   221,    16,   726,   825,   728,     0,   729,
     826,   731,   732,   827,   828,   829,   830,   831,   832,   739,
     740,   741,   742,   833,   834,   835,   746,   747,   836,   837,
     750,   751,   752,   838,   754,   755,   756,   757,   839,   840,
     760,     0,     0,     0,     0,   761,   762,   763,   764,   765,
     841,   767,   842,   769,     0,   770,   771,   772,   773,     0,
     843,     0,   844,   776,   845,   846,   779,   780,   781,   782,
       0,   783,   847,   848,   849,   850,   851,   789,   790,   791,
     792,     0,   793,     0,   852,   853,   854,   855,   798,   799,
     800,     0,     0,     0,     0,     0,   856,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   802,     0,     0,     0,     0,     0,     0,
       0,     0,   726,   825,   728,   858,   729,   826,   731,   732,
     827,   828,   829,   830,   831,   832,   739,   740,   741,   742,
     833,   834,   835,   746,   747,   836,   837,   750,   751,   752,
     838,   754,   755,   756,   757,   839,   840,   760,     0,     0,
       0,     0,   761,   762,   763,   764,   765,   841,   767,   842,
     769,     0,   770,   771,   772,   773,     0,   843,     0,   844,
     776,   845,   846,   779,   780,   781,   782,     0,   783,   847,
     848,   849,   850,   851,   789,   790,   791,   792,     0,   793,
       0,   852,   853,   854,   855,   798,   799,   800,     0,     0,
       0,     0,     0,   856,     0,     0,     0,     0,   868,     0,
       0,   857,     0,     0,     0,     0,     0,     0,     0,     0,
     802,     0,     0,     0,     0,     0,     0,     0,     0,   726,
     825,   728,   858,   729,   826,   731,   732,   827,   828,   829,
     830,   831,   832,   739,   740,   741,   742,   833,   834,   835,
     746,   747,   836,   837,   750,   751,   752,   838,   754,   755,
     756,   757,   839,   840,   760,     0,     0,     0,     0,   761,
     762,   763,   764,   765,   841,   767,   842,   769,     0,   770,
     771,   772,   773,     0,   843,     0,   844,   776,   845,   846,
     779,   780,   781,   782,     0,   783,   847,   848,   849,   850,
     851,   789,   790,   791,   792,     0,   793,     0,   852,   853,
     854,   855,   798,   799,   800,     0,     0,     0,     0,     0,
     856,     0,     0,     0,     0,     0,     0,     0,   857,   874,
       0,     0,     0,     0,     0,     0,     0,   802,     0,     0,
       0,     0,     0,     0,     0,     0,   726,   825,   728,   858,
     729,   826,   731,   732,   827,   828,   829,   830,   831,   832,
     739,   740,   741,   742,   833,   834,   835,   746,   747,   836,
     837,   750,   751,   752,   838,   754,   755,   756,   757,   839,
     840,   760,     0,     0,     0,     0,   761,   762,   763,   764,
     765,   841,   767,   842,   769,     0,   770,   771,   772,   773,
       0,   843,     0,   844,   776,   845,   846,   779,   780,   781,
     782,     0,   783,   847,   848,   849,   850,   851,   789,   790,
     791,   792,     0,   793,     0,   852,   853,   854,   855,   798,
     799,   800,     0,     0,     0,     0,     0,   856,     0,     0,
       0,     0,  -266,     0,  -266,   857,  -266,     0,  -266,  -266,
       0,     0,     0,     0,   802,     0,  -266,  -266,  -266,  -266,
       0,     0,     0,  -266,  -266,     0,   858,  -266,  -266,  -266,
       0,  -266,  -266,  -266,  -266,     0,     0,  -266,     0,     0,
       0,     0,  -266,  -266,  -266,  -266,  -266,     0,  -266,     0,
    -266,     0,  -266,  -266,  -266,  -266,     0,     0,     0,     0,
    -266,     0,     0,  -266,  -266,  -266,  -266,     0,  -266,     0,
       0,     0,     0,     0,  -266,  -266,  -266,  -266,     0,  -266,
       0,     0,     0,     0,     0,  -266,  -266,  -266,     0,     0,
    -267,     0,  -267,     0,  -267,     0,  -267,  -267,  -266,     0,
       0,     0,     0,     0,  -267,  -267,  -267,  -267,     0,     0,
    -266,  -267,  -267,     0,     0,  -267,  -267,  -267,  -266,  -267,
    -267,  -267,  -267,     0,     0,  -267,     0,     0,     0,     0,
    -267,  -267,  -267,  -267,  -267,     0,  -267,     0,  -267,     0,
    -267,  -267,  -267,  -267,     0,     0,     0,     0,  -267,     0,
       0,  -267,  -267,  -267,  -267,     0,  -267,     0,     0,     0,
       0,     0,  -267,  -267,  -267,  -267,     0,  -267,     0,     0,
       0,     0,     0,  -267,  -267,  -267,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -267,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -267,     0,
       0,     0,     0,     0,     0,     0,  -267
  };

  const short
  asn1_parser::yycheck_[] =
  {
       9,   311,   128,   129,   246,   447,   207,   203,    53,    18,
     128,   129,   459,   556,   210,     0,   357,   497,     3,   258,
     216,    66,    67,    89,    90,    70,   284,     4,     5,    74,
     454,    50,   456,   140,   141,   515,   141,   312,    22,     4,
      85,    22,    54,    22,    22,    31,   692,    22,    22,    64,
      50,   140,   141,    87,    24,    25,    77,    30,   112,    77,
     122,   485,    33,    29,   710,     4,   324,    24,   102,   124,
      89,    35,   112,     4,   140,   141,    89,     4,   650,    87,
     149,    50,    50,   138,   150,   211,     4,   246,   150,    89,
     124,   145,   126,    50,   102,    59,   141,   256,    53,   206,
     113,    50,    50,   675,    89,   145,    70,   126,   449,   175,
      95,    66,    67,   126,   126,    70,   124,   206,   126,    74,
      89,    89,   137,    89,    95,   146,   365,    93,   146,   195,
      85,   674,    89,    89,    89,   410,   243,   125,   111,   246,
      89,    89,    51,   114,   210,   124,   212,     0,   307,   137,
     216,   217,   348,   349,   243,   140,   141,   113,   354,   355,
     584,   807,   122,   149,   150,   149,   150,   126,    16,   150,
     149,   149,   149,   150,   149,   149,   149,   243,   304,   149,
     246,   124,   141,   249,   250,   150,   141,   253,   122,   530,
     150,   430,   122,   432,   203,   138,   205,     9,   207,   265,
      56,   210,   124,   212,    60,   444,    18,   216,   217,   448,
     149,   150,   692,   258,   373,   281,   150,   863,   149,   150,
     150,   206,   149,   150,   383,   124,   673,   126,   387,   125,
     710,   149,   150,   121,   124,   301,   126,    75,   126,   138,
     124,   137,   141,   127,   126,   124,   442,   126,   138,   258,
     451,   260,   359,   137,   359,   360,   138,   141,   243,   138,
     419,   246,   572,   125,   125,   141,   138,   133,   125,   145,
     359,   256,   338,   258,   125,   137,   137,   701,   150,   521,
     137,   523,   348,   349,    17,    18,   137,   137,   354,   355,
     137,   141,   550,   359,   141,   145,   125,   252,   145,   254,
     539,   256,   859,   542,   562,   464,   123,    24,    25,   123,
     867,    28,   121,   130,   359,   360,   130,   126,   121,   121,
     365,   126,   307,   126,   126,   130,   241,   149,   150,   872,
     245,   124,   125,   126,   126,   124,   677,   126,   648,   348,
     349,   521,   468,   523,   140,   354,   355,   430,   680,   432,
     682,   106,   307,    24,    25,   213,    44,    45,    24,    25,
     519,   106,   521,   106,   523,   524,   525,   526,   527,   528,
      61,   818,   125,   126,   359,   817,   686,     4,   444,   140,
     365,   590,   591,   863,    71,   430,   452,   432,   373,   496,
     121,   498,   127,   459,   133,    36,    72,   137,   383,   444,
     142,   142,   387,   448,   359,   360,   213,   496,   124,   498,
      56,   125,   142,   103,   521,   124,   523,   103,   373,    91,
     124,   430,    87,   432,   620,   124,    69,    16,   383,   876,
     496,   497,   387,   442,   419,   103,   138,   121,   447,   124,
     138,   124,   451,   138,   138,   430,   213,   432,   130,   124,
     459,   124,   126,   311,   312,   521,    87,   523,   565,   444,
     124,   150,   621,   448,   419,    87,    87,    87,     4,     5,
       6,     7,   141,     9,   256,    11,   565,   636,   138,   464,
     141,    22,   141,   125,    20,   530,   124,   124,   137,   534,
     556,   125,   132,   137,   539,    87,   126,   542,    34,   565,
     125,    58,   138,   138,   311,   312,    40,    40,   137,   464,
     706,   496,    13,   498,   640,   124,   675,   123,   137,    58,
     130,   125,   138,   126,   124,   307,   125,    63,   145,   137,
     596,   145,   541,   692,   519,   137,   521,   138,   523,   524,
     525,   526,   527,   528,   311,   312,   126,   556,   138,   125,
     138,   710,   410,   126,   539,   124,   126,   542,   149,   137,
     124,   570,   124,   137,   519,   125,   137,   576,   127,   524,
     525,   526,   527,   528,   110,   127,   144,   622,   122,   129,
     565,     4,   125,   150,   743,   125,   444,   138,   137,   127,
     448,   373,   127,    40,   122,   137,   454,   120,   456,   125,
     127,   383,   460,   410,   141,   387,   127,   673,   674,   127,
     565,   620,   127,   149,   150,   137,   125,   137,   137,   125,
     125,   479,   138,   137,   482,   137,   692,   485,   138,   104,
     138,   124,     3,   137,   137,   137,   621,   419,   125,   138,
     138,   141,   137,   410,   710,   804,   137,   454,   807,   456,
     243,   636,   148,   460,   125,   137,   594,   857,   657,   675,
     807,   787,   788,   672,   673,   674,   621,   804,   565,   787,
     788,   680,   479,   682,    90,   482,   242,   687,   485,   688,
     689,   636,   464,   688,   565,   647,    18,   454,    32,   456,
     675,    74,   359,   460,    53,    70,    85,   706,   541,   620,
     698,     4,     5,     6,     7,   672,     9,   692,    11,   539,
     217,    11,   479,    49,   572,   482,    44,    20,   485,   479,
     675,   333,   677,   482,   460,   710,   584,    -1,    -1,   584,
      -1,    34,    -1,    -1,    -1,    -1,    -1,   519,   804,    -1,
      -1,   807,   524,   525,   526,   527,   528,    -1,    -1,    -1,
      -1,    -1,   818,    -1,    -1,    -1,    -1,    -1,   743,    -1,
      63,    -1,    -1,    -1,    -1,   572,    -1,     4,     5,     6,
       7,    -1,     9,    -1,    11,    -1,    79,   584,    -1,    -1,
      -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,   743,    -1,
     648,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   572,   872,   110,   817,   818,
     876,    -1,    -1,    -1,    -1,    -1,    -1,   584,    -1,   804,
      -1,    -1,   807,    -1,    -1,    -1,    63,   130,   686,     4,
       5,     6,     7,    -1,     9,    -1,    11,    -1,    -1,   621,
      -1,   648,    79,   701,    -1,    20,   149,   150,    -1,    24,
      25,    -1,    -1,    -1,   636,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,   872,    -1,    40,    -1,   876,    -1,    -1,
      -1,    -1,    47,   110,    -1,    -1,    -1,    -1,    -1,   686,
      -1,   648,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,
      -1,    -1,    -1,   675,   701,    -1,    -1,    -1,    -1,    -1,
      -1,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     692,    -1,   149,   150,    89,    -1,    -1,    -1,    -1,   686,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   710,    -1,
      -1,    -1,    -1,    -1,   701,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,   124,
     125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,   743,    -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     4,     5,     6,     7,    -1,     9,    -1,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      -1,    22,   804,    24,    25,   807,    -1,    -1,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,   124,   125,    -1,    -1,   128,    -1,    -1,
      -1,    -1,   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,
       4,     5,     6,     7,    -1,     9,    -1,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
     124,    -1,    -1,    -1,   128,     4,     5,     6,     7,   133,
       9,    -1,    11,   137,    -1,    -1,    -1,   141,    -1,    -1,
      -1,    20,    -1,    22,    -1,   149,   150,    -1,    -1,    -1,
      -1,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    -1,    41,    42,    -1,    -1,    -1,    46,    47,    48,
      49,    -1,    -1,    52,    53,    54,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    68,
      -1,    -1,    -1,    -1,    73,    74,    -1,    76,    -1,    78,
      -1,    80,    -1,    -1,    83,    84,    85,    86,    -1,    88,
      -1,    90,    -1,    -1,    -1,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,    -1,    -1,   105,    -1,   107,   108,
     109,   110,   111,    -1,    -1,    -1,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,   124,    -1,   126,    -1,   128,
       4,     5,     6,     7,    -1,     9,    -1,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,
     149,   150,    -1,    -1,    -1,    -1,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,
      -1,    -1,    -1,    -1,    48,    49,    -1,    -1,    52,    53,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    67,    68,    -1,    -1,    -1,    -1,    73,
      74,    -1,    76,    -1,    78,    -1,    80,    -1,    -1,    83,
      84,    85,    86,    -1,    88,    -1,    90,    -1,    -1,    -1,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,    -1,
      -1,   105,    -1,   107,   108,   109,   110,   111,    -1,    -1,
      -1,   115,   116,   117,   118,   119,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,    -1,    -1,    -1,    -1,    -1,
      -1,     4,     5,     6,     7,    -1,     9,    -1,    11,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,    20,    -1,    22,
      -1,    24,    25,    -1,    -1,    -1,    -1,    30,    -1,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    52,
      53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    89,    -1,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,    -1,   107,   108,   109,   110,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,   124,    -1,    -1,    -1,   128,     4,     5,     6,     7,
     133,     9,    -1,    11,    -1,    -1,    -1,    -1,   141,    -1,
      -1,    -1,    20,    -1,    22,    -1,   149,   150,    -1,    -1,
      -1,    -1,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      68,    -1,    -1,    -1,    -1,    73,    74,    -1,    76,    -1,
      78,    -1,    80,    -1,    -1,    83,    84,    85,    86,    -1,
      88,    -1,    90,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,    -1,    -1,   105,    -1,   107,
     108,   109,   110,   111,    -1,    -1,    -1,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,    -1,    -1,   126,    -1,
     128,    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,
       7,    -1,     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,
      -1,   149,   150,    20,    -1,    22,    -1,    24,    25,    -1,
      -1,    -1,    -1,    30,    -1,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    -1,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    -1,    65,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    88,    89,    -1,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,
     107,   108,   109,   110,   111,    -1,    -1,    -1,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,   124,    -1,    -1,
      -1,   128,     4,     5,     6,     7,   133,     9,    -1,    11,
      -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,    20,    -1,
      22,    -1,   149,   150,    -1,    -1,    -1,    -1,    30,    -1,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
      42,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,
      52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    68,    -1,    -1,    -1,
      -1,    73,    74,    -1,    76,    -1,    78,    -1,    80,    -1,
      -1,    83,    84,    85,    86,    -1,    88,    -1,    90,    -1,
      -1,    -1,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,     4,     5,   105,    -1,   107,   108,   109,   110,   111,
      -1,    -1,    -1,   115,   116,   117,   118,   119,   120,    22,
      -1,    -1,    -1,    -1,   126,    -1,   128,    30,    -1,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    42,
      -1,    -1,    -1,    -1,    -1,    48,    49,   149,   150,    52,
      53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,    -1,    -1,     4,
       5,     6,     7,    -1,     9,   128,    11,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    -1,    24,
      25,    -1,    -1,    -1,    -1,    30,   149,   150,    -1,    34,
      -1,     4,     5,     6,     7,    40,     9,    -1,    11,    -1,
      -1,    -1,    47,    -1,    -1,    -1,    -1,    20,    -1,    -1,
      -1,    24,    25,    -1,    -1,    -1,    -1,    30,    63,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      -1,    76,    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,    -1,    -1,
      63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,    89,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   141,   110,   111,    -1,
      -1,    -1,    -1,    -1,   149,   150,    -1,   120,    -1,    -1,
      -1,   124,    -1,    -1,    -1,    22,    -1,    -1,    -1,    -1,
     133,    -1,    -1,    30,    -1,    32,    -1,    34,   141,    -1,
      37,    38,    39,    -1,    41,    42,   149,   150,    45,    -1,
      -1,    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,
     107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,   118,   119,    -1,    22,   122,    -1,    -1,   125,    -1,
      -1,   128,    30,    -1,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    45,    -1,    -1,
      48,    49,   149,   150,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,
      78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,
     108,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
     118,   119,    -1,    22,   122,    -1,    -1,   125,    -1,    -1,
     128,    30,    -1,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,    48,
      49,   149,   150,    52,    53,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    22,    -1,    -1,   128,
      -1,    -1,    -1,    -1,    30,    -1,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,
     149,   150,    48,    49,    -1,    -1,    52,    53,    -1,    -1,
      -1,    57,    -1,    59,    -1,    -1,    62,    -1,    -1,    65,
      66,    67,    68,    -1,    70,    -1,    -1,    -1,    74,    -1,
      76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,
      86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
      -1,   107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,   118,   119,    -1,    22,    -1,    -1,    -1,    -1,
      -1,    -1,   128,    30,    -1,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    -1,    41,    42,    -1,    -1,    45,    -1,
      -1,    48,    49,   149,   150,    52,    53,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,
      67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,
     107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,   118,   119,    -1,    22,   122,    24,    25,    -1,    -1,
      -1,   128,    30,    -1,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      48,    49,   149,   150,    52,    53,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,
      68,    -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,
      78,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      88,    -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,
     108,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
     118,   119,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
     128,    30,    -1,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    -1,    41,    42,    -1,    -1,    45,    -1,    -1,    48,
      49,   149,   150,    52,    53,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,   118,
     119,    -1,    22,   122,    -1,    -1,    -1,    -1,    -1,   128,
      30,    -1,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      -1,    41,    42,    -1,    -1,    45,    -1,    -1,    48,    49,
     149,   150,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,
      -1,    -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,   118,   119,
      -1,    22,   122,    -1,    -1,    -1,    -1,    -1,   128,    30,
      -1,    32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,
      41,    42,    -1,    -1,    45,    -1,    -1,    48,    49,   149,
     150,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,
      22,   122,    -1,    -1,    -1,    -1,    -1,   128,    30,    -1,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
      42,    -1,    -1,    -1,    -1,    -1,    48,    49,   149,   150,
      52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,
      -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,
      -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,
      -1,    -1,    94,    -1,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,
      -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,    22,
      -1,    -1,   124,    -1,    -1,    -1,   128,    30,    -1,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    42,
      43,    -1,    -1,    -1,    -1,    48,    49,   149,   150,    52,
      53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,    -1,    22,    -1,
      -1,    -1,    -1,    -1,    -1,   128,    30,    -1,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,
      -1,    -1,    -1,    -1,    48,    49,   149,   150,    52,    53,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,
      74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,
      84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,
      94,    -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,   118,   119,    -1,   121,    -1,    -1,
      -1,    22,    -1,    -1,   128,    -1,    -1,    -1,    -1,    30,
      -1,    32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,
      41,    42,    -1,    -1,    -1,   149,   150,    48,    49,    -1,
      -1,    52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    -1,    65,    66,    67,    68,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,   105,    -1,   107,   108,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,
      22,    -1,    -1,    -1,    -1,    -1,    -1,   128,    30,   130,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
      42,    -1,    -1,    -1,    -1,    -1,    48,    49,   149,   150,
      52,    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,
      -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,
      -1,    83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,
      -1,    -1,    94,    -1,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,
      -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,    22,
     122,    -1,    -1,    -1,    -1,    -1,   128,    30,    -1,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    42,
      -1,    -1,    45,    -1,    -1,    48,    49,   149,   150,    52,
      53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,
      -1,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,   118,   119,    -1,    22,    -1,
      -1,    -1,    -1,    -1,    -1,   128,    30,    -1,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,
      -1,    -1,    -1,    -1,    48,    49,   149,   150,    52,    53,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    65,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,
      74,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,
      84,    85,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,
      94,    -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,   105,    -1,   107,   108,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,   118,   119,    -1,    22,    -1,    -1,
      -1,    -1,    -1,    -1,   128,    30,    -1,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,
      -1,    -1,    -1,    48,    49,   149,   150,    52,    53,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      65,    66,    67,    68,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,
      85,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,
      -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
     105,    -1,   107,   108,   109,    -1,   111,    -1,    -1,    -1,
     115,   116,   117,   118,   119,    -1,    22,    -1,    -1,    -1,
      -1,    -1,    -1,   128,    30,    -1,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    -1,    41,    42,    -1,    -1,    -1,
      -1,    -1,    48,    49,   149,   150,    52,    53,    -1,    -1,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,
      66,    67,    68,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      76,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,    85,
      86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    94,    -1,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,   105,
      -1,   107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      24,    25,    -1,   149,   150,    29,    30,    31,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    -1,    79,    80,    81,    82,    -1,
      84,    -1,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,    -1,   106,    -1,   108,   109,   110,   111,   112,   113,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    29,    30,    31,   149,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      -1,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    -1,    79,    80,    81,    82,    -1,    84,    -1,    86,
      87,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
      -1,   108,   109,   110,   111,   112,   113,   114,    -1,    -1,
      -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,
      30,    31,   149,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    -1,    -1,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    -1,    79,
      80,    81,    82,    -1,    84,    -1,    86,    87,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,    -1,   106,    -1,   108,   109,
     110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,
     120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    30,    31,   149,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    -1,    -1,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
      -1,    84,    -1,    86,    87,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,    -1,   106,    -1,   108,   109,   110,   111,   112,
     113,   114,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
      -1,    -1,    29,    -1,    31,   128,    33,    -1,    35,    36,
      -1,    -1,    -1,    -1,   137,    -1,    43,    44,    45,    46,
      -1,    -1,    -1,    50,    51,    -1,   149,    54,    55,    56,
      -1,    58,    59,    60,    61,    -1,    -1,    64,    -1,    -1,
      -1,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      77,    -1,    79,    80,    81,    82,    -1,    -1,    -1,    -1,
      87,    -1,    -1,    90,    91,    92,    93,    -1,    95,    -1,
      -1,    -1,    -1,    -1,   101,   102,   103,   104,    -1,   106,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,
      29,    -1,    31,    -1,    33,    -1,    35,    36,   125,    -1,
      -1,    -1,    -1,    -1,    43,    44,    45,    46,    -1,    -1,
     137,    50,    51,    -1,    -1,    54,    55,    56,   145,    58,
      59,    60,    61,    -1,    -1,    64,    -1,    -1,    -1,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    -1,
      79,    80,    81,    82,    -1,    -1,    -1,    -1,    87,    -1,
      -1,    90,    91,    92,    93,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,   104,    -1,   106,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   145
  };

  const unsigned short
  asn1_parser::yystos_[] =
  {
       0,   149,   154,   155,   228,   375,     0,   154,    51,   124,
     229,   230,   231,    16,   236,     4,   150,   232,   233,   234,
     235,   310,   373,   133,   315,    75,    35,    59,    70,   237,
     125,   232,   126,   140,   316,   106,   106,   106,    61,   238,
     234,    17,    18,   318,   140,   317,    71,   121,   127,   318,
     133,    36,   317,    60,   239,   240,    31,   149,   150,   241,
     247,   248,   249,   372,   374,   227,    72,   242,   142,   142,
     137,   124,    56,   243,   244,   245,   247,   160,   199,   203,
     204,   205,   206,   207,   250,   251,   260,   261,   262,   372,
     374,   248,   125,   142,   245,    64,   250,    22,    30,    32,
      34,    37,    38,    39,    41,    42,    48,    49,    52,    53,
      57,    62,    65,    66,    67,    68,    74,    76,    78,    83,
      84,    85,    86,    88,    94,    96,    97,    98,    99,   100,
     105,   107,   108,   109,   111,   115,   116,   117,   118,   119,
     121,   124,   128,   149,   159,   187,   188,   197,   198,   202,
     208,   213,   214,   215,   216,   252,   254,   258,   263,   264,
     272,   274,   278,   282,   283,   286,   287,   288,   292,   293,
     294,   295,   299,   300,   301,   302,   306,   313,   314,   319,
     320,   321,   322,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   372,   373,   375,   208,   263,   372,   375,   246,
     375,   103,   103,   124,    91,   124,    87,   124,    69,   103,
      87,   102,   124,   126,   333,   357,    87,   124,   333,   357,
      43,   149,   157,   158,   159,   161,   162,   263,   375,   376,
     150,   157,   209,   210,   211,   212,   249,   263,   372,    16,
     303,   138,   121,   121,   263,   138,   124,   121,   333,    59,
      70,   263,   138,   130,   138,   263,   121,   138,   124,   307,
     124,   265,   296,   297,   298,   373,   122,   276,   279,   280,
     281,   373,   149,   157,   159,   375,   275,   276,   373,   263,
     265,   373,   333,    45,   122,   125,   263,   265,   289,   290,
     291,     4,     5,     6,     7,     9,    11,    20,    31,    34,
      46,    47,    54,    63,    64,    73,    80,    90,   101,   110,
     120,   124,   126,   149,   150,   200,   218,   219,   221,   226,
     263,   273,   277,   323,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   347,   348,   349,   350,   351,   352,
     353,   355,   357,   358,   359,   360,   368,   369,    87,    87,
     263,   265,   125,   289,    87,    87,   124,   138,   125,   137,
     141,   141,    33,    95,   114,   305,    24,    25,   165,   166,
     200,   161,   263,   121,   166,     6,     7,     9,    11,    24,
      25,    34,    40,    47,    76,    89,   120,   124,   141,   149,
     150,   157,   202,   217,   253,   255,   256,   257,   259,   263,
     266,   267,   268,   269,   273,   277,   315,   323,   374,   375,
     124,   270,   263,   263,   166,   372,   263,    22,   372,   121,
      34,    76,   149,   150,   202,   266,   267,   372,   375,     4,
     253,   308,   309,   310,   311,   312,   373,   374,   284,   285,
     373,   125,   137,   263,   132,   370,   125,   137,   126,   138,
     125,   137,    87,   370,    50,    89,    50,    89,   125,   137,
      58,   344,    40,   263,    40,   333,   267,    13,    44,    45,
     122,   201,   337,   336,   124,   370,   137,   112,   145,   345,
      77,   146,   346,   344,   263,   123,   130,   263,   265,   263,
     265,   125,   263,   265,   263,   265,    24,    25,    28,   163,
     164,   167,   168,   171,   173,   174,   176,   178,   149,   376,
     210,   249,     4,   253,   304,   138,   267,   267,   267,   271,
     126,   124,   125,   137,   137,   141,   145,   137,   145,   138,
     138,   336,   267,   138,   138,   253,   308,   125,   308,   126,
     125,   137,   126,   122,   265,   253,   263,   277,   371,   375,
     122,   281,   253,   277,   276,   263,   137,    34,   149,   150,
     349,   349,   122,   291,   347,   124,    54,   267,   333,   361,
     124,   362,   137,   125,   137,   127,   144,   222,   223,   127,
     122,   340,   342,    79,   130,   349,   354,   356,   157,   263,
     165,   263,   157,   125,   137,    24,    50,    89,   169,   129,
     165,   125,   267,     4,   256,   256,   267,   267,   267,   267,
     267,    24,    25,   374,   125,   125,   311,   285,     4,   253,
     137,   141,   138,   370,   127,   127,   122,   290,   370,   122,
     157,   197,   212,   220,   263,   375,    40,   122,   363,   364,
     373,   337,   122,   138,   225,   373,   125,   137,   137,   356,
      50,    89,   177,    89,   113,   170,   170,   170,    50,    89,
     179,   120,   180,   164,   263,   127,   125,   127,   127,   127,
     298,   267,   137,   137,   137,   141,   125,   138,   267,   125,
     137,   125,   137,   333,   365,   366,   137,   138,   224,   138,
     223,   337,   124,   187,   189,   190,   191,   193,    50,    89,
     175,    50,    89,   172,   172,   104,   137,   280,   122,   290,
     124,   189,   267,   149,   363,   363,    29,    89,    93,   367,
     337,   224,   225,   373,    24,    25,    29,    30,    31,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      79,    80,    81,    82,    84,    86,    87,    88,    89,    90,
      91,    92,    93,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   106,   108,   109,   110,   111,   112,   113,
     114,   120,   137,   149,   165,   186,   192,   194,   195,   196,
     263,   267,   377,   270,   349,   124,   156,   137,   137,   267,
     125,   196,   137,   125,   195,    30,    34,    37,    38,    39,
      40,    41,    42,    47,    48,    49,    52,    53,    57,    62,
      63,    74,    76,    84,    86,    88,    89,    96,    97,    98,
      99,   100,   108,   109,   110,   111,   120,   128,   149,   181,
     182,   183,   184,   185,   186,   122,   148,   181,   125,   182,
     165,   186,   137,   125,   129,   290,   137
  };

  const unsigned short
  asn1_parser::yyr1_[] =
  {
       0,   153,   154,   154,   155,   156,   157,   157,   157,   158,
     159,   159,   160,   161,   161,   162,   163,   163,   164,   164,
     164,   164,   164,   164,   165,   165,   166,   166,   167,   168,
     168,   169,   169,   169,   170,   170,   170,   171,   172,   172,
     172,   173,   174,   175,   175,   175,   176,   177,   177,   177,
     178,   179,   179,   179,   180,   180,   181,   181,   182,   182,
     183,   184,   185,   185,   185,   186,   186,   187,   187,   188,
     189,   189,   190,   190,   191,   192,   193,   194,   194,   195,
     195,   196,   196,   197,   197,   198,   199,   200,   201,   201,
     201,   201,   201,   202,   202,   203,   203,   203,   203,   204,
     205,   206,   207,   208,   209,   209,   210,   210,   211,   211,
     212,   212,   213,   214,   215,   216,   216,   217,   217,   218,
     218,   218,   219,   220,   220,   220,   220,   220,   220,   220,
     221,   221,   222,   222,   223,   223,   224,   224,   225,   225,
     226,   226,   226,   227,   228,   229,   229,   229,   230,   231,
     232,   232,   233,   233,   233,   234,   235,   236,   236,   237,
     237,   237,   237,   238,   238,   239,   239,   240,   240,   240,
     241,   241,   242,   242,   243,   243,   244,   244,   245,   246,
     246,   247,   247,   248,   249,   249,   249,   250,   250,   251,
     251,   251,   251,   251,   251,   252,   252,   252,   253,   253,
     254,   255,   256,   256,   257,   257,   257,   258,   259,   260,
     261,   262,   263,   263,   263,   263,   263,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   265,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   267,   267,   267,   268,   268,   269,
     269,   270,   271,   271,   272,   273,   273,   274,   274,   275,
     275,   276,   276,   277,   277,   278,   279,   279,   279,   279,
     280,   280,   281,   281,   282,   283,   283,   284,   284,   285,
     285,   286,   287,   288,   288,   289,   289,   289,   289,   289,
     289,   289,   289,   289,   290,   290,   291,   291,   291,   291,
     291,   291,   291,   292,   292,   293,   293,   294,   294,   295,
     296,   297,   297,   297,   298,   298,   299,   300,   301,   301,
     301,   302,   303,   303,   304,   304,   305,   305,   305,   305,
     306,   307,   307,   308,   308,   309,   309,   309,   310,   311,
     311,   312,   313,   314,   315,   316,   317,   317,   318,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     328,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   330,   331,   331,   332,   332,   332,
     332,   332,   332,   332,   332,   333,   334,   334,   335,   336,
     336,   336,   337,   337,   338,   338,   339,   340,   340,   341,
     342,   342,   343,   344,   345,   345,   346,   346,   347,   347,
     348,   348,   348,   348,   348,   348,   348,   348,   348,   349,
     349,   349,   349,   349,   349,   349,   349,   349,   349,   350,
     351,   352,   353,   353,   354,   354,   355,   355,   356,   356,
     357,   358,   359,   360,   360,   361,   362,   362,   362,   362,
     363,   363,   364,   365,   366,   366,   367,   367,   367,   367,
     368,   369,   370,   370,   371,   371,   371,   372,   373,   374,
     375,   376,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377,   377,
     377,   377,   377,   377,   377,   377,   377,   377,   377
  };

  const unsigned char
  asn1_parser::yyr2_[] =
  {
       0,     2,     1,     2,    10,     3,     1,     1,     1,     3,
       1,     1,     3,     1,     1,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       2,     1,     2,     0,     1,     1,     0,     4,     1,     2,
       0,     4,     4,     1,     2,     0,     3,     1,     2,     0,
       3,     1,     1,     0,     3,     0,     1,     2,     1,     1,
       3,     2,     1,     2,     0,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     5,     2,     3,     1,     2,     1,
       1,     1,     1,     1,     1,     3,     4,     3,     1,     3,
       1,     3,     5,     3,     3,     1,     1,     1,     1,     4,
       5,     5,     4,     3,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     5,     3,     3,     1,     1,     1,     1,     0,
       1,     4,     1,     3,     2,     4,     2,     0,     1,     3,
       2,     3,     5,     0,     2,     1,     1,     0,     3,     2,
       1,     2,     1,     1,     1,     1,     4,     2,     0,     2,
       2,     2,     0,     2,     0,     3,     0,     3,     3,     0,
       1,     0,     3,     0,     1,     0,     1,     2,     3,     1,
       2,     1,     3,     1,     1,     3,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     4,     1,     3,     1,     1,     1,     3,     3,     3,
       4,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     4,     1,
       1,     1,     1,     3,     3,     3,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     1,     2,     1,     1,     1,     1,     4,     1,
       3,     4,     4,     1,     1,     4,     1,     4,     6,     2,
       1,     3,     1,     1,     1,     2,     5,     1,     3,     4,
       4,     2,     1,     3,     4,     1,     4,     6,     8,    10,
       4,     6,     2,     4,     1,     3,     1,     2,     3,     1,
       2,     3,     3,     3,     3,     3,     4,     3,     3,     4,
       1,     1,     3,     5,     1,     3,     3,     1,     2,     3,
       3,     5,     2,     0,     1,     1,     1,     1,     1,     0,
       2,     3,     4,     1,     2,     1,     1,     1,     1,     1,
       1,     4,     1,     1,     4,     2,     3,     0,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     1,     1,     1,     1,
       3,     5,     1,     2,     1,     3,     1,     1,     3,     1,
       1,     2,     1,     2,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     3,     1,     2,     1,     2,     1,     1,     1,     1,
       2,     1,     2,     3,     3,     1,     0,     3,     5,     3,
       1,     3,     2,     2,     1,     0,     1,     1,     1,     0,
       2,     2,     2,     0,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1
  };



  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a yyntokens_, nonterminals.
  const char*
  const asn1_parser::yytname_[] =
  {
  "END_OF_FILE", "error", "$undefined", "comment", "number",
  "negativenumber", "realnumber", "bstring", "xmlbstring", "hstring",
  "xmlhstring", "cstring", "xmlcstring", "simplestring", "xmltstring",
  "psname", "encodingreference", "integerUnicodeLabel",
  "non-integerUnicodeLabel", "extended-true", "tstring", "extended-false",
  "objectreference", "objectsetreference", "typefieldreference",
  "valuefieldreference", "valuesetfieldreference", "objectfieldreference",
  "objectsetfieldreference", "ABSENT", "ABSTRACT_SYNTAX", "ALL", "ANY",
  "APPLICATION", "ASN_NULL", "AUTOMATIC", "BEGIN", "BIT", "BMPString",
  "BOOLEAN", "BY", "CHARACTER", "CHOICE", "CLASS", "COMPONENT",
  "COMPONENTS", "CONSTRAINED", "CONTAINING", "DATE", "DATE_TIME",
  "DEFAULT", "DEFINITIONS", "DURATION", "EMBEDDED", "ENCODED",
  "ENCODING_CONTROL", "END", "ENUMERATED", "EXCEPT", "EXPLICIT", "EXPORTS",
  "EXTENSIBILITY", "EXTERNAL", "FALSE", "FROM", "GeneralizedTime",
  "GeneralString", "GraphicString", "IA5String", "IDENTIFIER", "IMPLICIT",
  "IMPLIED", "IMPORTS", "\"INCLUDES\"", "INSTANCE", "INSTRUCTIONS",
  "INTEGER", "INTERSECTION", "ISO646String", "MAX", "MIN",
  "MINUS_INFINITY", "NOT_A_NUMBER", "NumericString", "OBJECT",
  "ObjectDescriptor", "OCTET", "OF", "OID_IRI", "OPTIONAL", "PATTERN",
  "PDV", "PLUS_INFINITY", "PRESENT", "PrintableString", "PRIVATE", "REAL",
  "RELATIVE_OID", "RELATIVE_OID_IRI", "SEQUENCE", "SET", "SETTINGS",
  "SIZE", "STRING", "SYNTAX", "T61String", "TAGS", "TeletexString", "TIME",
  "TIME_OF_DAY", "TRUE", "TYPE_IDENTIFIER", "UNION", "UNIQUE", "UNIVERSAL",
  "UniversalString", "UTCTime", "UTF8String", "VideotexString",
  "VisibleString", "WITH", "\"::=\"", "\"...\"", "\"..\"", "\"{\"",
  "\"}\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"<\"", "\">\"", "\"!\"",
  "\"\\\"\"", "\"&\"", "\"'\"", "\"*\"", "\",\"", "\".\"", "\"-\"",
  "\"/\"", "\":\"", "\";\"", "\"=\"", "\"@\"", "\"|\"", "\"^\"", "PLUS",
  "STAR", "GENERIC_IDENTIFIER_UPPERCASE", "GENERIC_IDENTIFIER_LOWERCASE",
  "GENERIC_INTEGER", "xmlasn1typename", "$accept", "ModuleDefinitionList",
  "ModuleDefinition", "SyntaxList", "DefinedObjectClass",
  "ExternalObjectClassReference", "UsefulObjectClassReference",
  "ObjectClassAssignment", "ObjectClass", "ObjectClassDefn",
  "FieldSpecList", "FieldSpec", "FieldName", "FieldNameList",
  "TypeFieldSpec", "OneOrManyTypeFieldReference", "TypeOptionalitySpec",
  "OptionalUnique", "FixedTypeValueFieldSpec", "ValueOptionalitySpec",
  "VariableTypeValueFieldSpec", "FixedTypeValueSetFieldSpec",
  "ValueSetDefaultSpec", "ObjectFieldSpec", "ObjectOptionalitySpec",
  "ObjectSetFieldSpec", "ObjectSetOptionalitySpec", "WithSyntaxSpec",
  "TokenOrGroupSpecList", "TokenOrGroupSpec", "OptionalGroup",
  "RequiredToken", "LiteralList", "Literal", "DefinedObject",
  "ExternalObjectReference", "Object", "ObjectDefn", "DefaultSyntax",
  "FieldSetting", "DefinedSyntax", "DefinedSyntaxList",
  "DefinedSyntaxToken", "Setting", "DefinedObjectSet",
  "ExternalObjectSetReference", "ObjectSetAssignment", "ObjectSet",
  "ObjectSetSpec", "ObjectClassFieldType", "ParameterizedAssignment",
  "ParameterizedTypeAssignment", "ParameterizedValueAssignment",
  "ParameterizedValueSetTypeAssignment",
  "ParameterizedObjectClassAssignment", "ParameterList", "ParameterSeries",
  "Parameter", "ParamGovernor", "Governor", "ReferencedObjects",
  "TypeFromObject", "InstanceOfType", "SimpleDefinedType",
  "SimpleDefinedValue", "GeneralConstraint", "UserDefinedConstraint",
  "UserDefinedConstraintParameter", "TableConstraint", "AtNotationList",
  "AtNotation", "Level", "ComponentIdList", "ContentsConstraint",
  "EncodingControlSections", "ModuleIdentifier",
  "DefinitiveIdentification", "DefinitiveOID", "DefinitiveOIDandIRI",
  "DefinitiveObjIdComponentList", "DefinitiveObjIdComponent",
  "DefinitiveNumberForm", "DefinitiveNameAndNumberForm",
  "EncodingReferenceDefault", "TagDefault", "ExtensionDefault",
  "ModuleBody", "Exports", "SymbolsExported", "Imports", "SymbolsImported",
  "SymbolsFromModuleList", "SymbolsFromModule", "GlobalModuleReference",
  "SymbolList", "Symbol", "Reference", "AssignmentList", "Assignment",
  "DefinedType", "DefinedValue", "ParameterizedType", "ParameterizedValue",
  "ActualParameterList", "ActualParameter", "ExternalTypeReference",
  "ExternalValueReference", "TypeAssignment", "ValueAssignment",
  "ValueSetTypeAssignment", "Type", "BuiltinType", "NamedType",
  "ValueWithoutTypeIdentifier", "Value", "ValueCommaListChoice",
  "ValueChoice", "ValueSet", "SequenceOfValues", "BooleanType",
  "BooleanValue", "IntegerType", "NamedNumberList", "NamedNumber",
  "SignedNumber", "EnumeratedType", "Enumerations", "Enumeration",
  "EnumerationItem", "RealType", "BitStringType", "NamedBitList",
  "NamedBit", "OctetStringType", "NullType", "SequenceType",
  "ComponentTypeLists", "ComponentTypeList", "ComponentType",
  "SequenceOfType", "SetType", "SetOfType", "ChoiceType",
  "AlternativeTypeLists", "RootAlternativeTypeList", "AlternativeTypeList",
  "SelectionType", "PrefixedType", "TaggedType", "Tag",
  "EncodingReference", "ClassNumber", "Class", "ObjectIdentifierType",
  "ObjectIdentifierValue", "ObjIdComponentsList", "ObjIdComponents",
  "NameForm", "NumberForm", "NameAndNumberForm", "RelativeOIDType",
  "IRIType", "IRIValue", "FirstArcIdentifier", "SubsequentArcIdentifier",
  "ArcIdentifier", "RelativeIRIType", "EmbeddedPDVType", "ExternalType",
  "TimeType", "TimeValue", "DateType", "TimeOfDayType", "DateTimeType",
  "DurationType", "CharacterStringType", "RestrictedCharacterStringType",
  "UnrestrictedCharacterStringType", "ConstrainedType",
  "TypeWithConstraint", "Constraint", "ConstraintSpec",
  "SubtypeConstraint", "ElementSetSpecs", "ElementSetSpec", "Unions",
  "UElems", "Intersections", "IElems", "IntersectionElements", "Elems",
  "Exclusions", "UnionMark", "IntersectionMark", "Elements",
  "SubtypeElements", "SingleValue", "ContainedSubtype", "Includes",
  "ValueRange", "LowerEndpoint", "UpperEndpoint", "LowerEndValue",
  "UpperEndValue", "SizeConstraint", "TypeConstraint", "PermittedAlphabet",
  "InnerTypeConstraints", "SingleTypeConstraint",
  "MultipleTypeConstraints", "TypeConstraints", "NamedConstraint",
  "ComponentConstraint", "ValueConstraint", "PresenceConstraint",
  "PatternConstraint", "PropertySettings", "ExceptionSpec",
  "ExceptionIdentification", "typereference", "identifier",
  "valuereference", "modulereference", "objectclassreference", "word", YY_NULLPTR
  };

#if YYDEBUG
  const unsigned short
  asn1_parser::yyrline_[] =
  {
       0,   325,   325,   326,   329,   344,   347,   348,   349,   352,
     355,   357,   361,   365,   367,   372,   376,   378,   382,   384,
     386,   387,   388,   389,   392,   394,   402,   404,   408,   412,
     414,   418,   419,   420,   423,   424,   425,   428,   432,   433,
     434,   437,   440,   443,   444,   445,   448,   451,   452,   453,
     456,   459,   460,   461,   467,   468,   471,   472,   475,   476,
     479,   482,   485,   486,   487,   490,   491,   494,   495,   498,
     504,   505,   510,   511,   514,   517,   520,   523,   524,   527,
     528,   531,   532,   536,   537,   540,   543,   547,   550,   551,
     552,   553,   554,   563,   565,   572,   574,   576,   578,   585,
     589,   593,   597,   609,   613,   615,   619,   621,   625,   627,
     631,   633,   649,   661,   670,   678,   679,   683,   684,   687,
     688,   689,   692,   697,   698,   699,   700,   701,   702,   703,
     706,   708,   712,   713,   716,   717,   720,   721,   724,   725,
     728,   729,   730,   741,   749,   756,   757,   758,   761,   764,
     768,   769,   773,   774,   775,   778,   781,   785,   786,   789,
     791,   793,   795,   799,   800,   803,   805,   809,   810,   811,
     814,   815,   818,   820,   823,   825,   828,   830,   834,   850,
     852,   858,   860,   864,   868,   870,   872,   881,   883,   887,
     889,   891,   893,   896,   898,   902,   904,   906,   912,   914,
     917,   921,   924,   926,   930,   932,   935,   945,   949,   974,
     978,   982,   986,   988,   990,   992,   994,   999,  1000,  1001,
    1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,  1010,  1011,
    1012,  1013,  1014,  1015,  1016,  1017,  1018,  1019,  1020,  1021,
    1022,  1023,  1024,  1025,  1026,  1027,  1028,  1029,  1032,  1036,
    1038,  1040,  1042,  1044,  1046,  1048,  1050,  1052,  1054,  1056,
    1057,  1059,  1061,  1063,  1067,  1068,  1069,  1070,  1071,  1073,
    1075,  1077,  1079,  1081,  1086,  1088,  1090,  1093,  1094,  1097,
    1098,  1101,  1104,  1106,  1114,  1117,  1118,  1121,  1123,  1127,
    1129,  1133,  1135,  1139,  1141,  1145,  1149,  1152,  1155,  1159,
    1162,  1164,  1168,  1170,  1178,  1181,  1183,  1187,  1188,  1191,
    1192,  1206,  1209,  1212,  1214,  1218,  1220,  1222,  1224,  1226,
    1228,  1230,  1232,  1234,  1238,  1240,  1244,  1247,  1250,  1254,
    1256,  1258,  1261,  1273,  1275,  1279,  1281,  1285,  1287,  1291,
    1295,  1299,  1301,  1303,  1307,  1309,  1316,  1319,  1323,  1325,
    1327,  1331,  1335,  1336,  1339,  1341,  1344,  1346,  1348,  1350,
    1360,  1363,  1365,  1369,  1371,  1375,  1377,  1379,  1383,  1387,
    1389,  1392,  1396,  1408,  1411,  1417,  1420,  1421,  1424,  1425,
    1428,  1434,  1441,  1447,  1450,  1453,  1456,  1459,  1462,  1465,
    1467,  1471,  1473,  1475,  1477,  1479,  1481,  1483,  1485,  1487,
    1489,  1491,  1493,  1495,  1499,  1503,  1505,  1509,  1511,  1513,
    1515,  1517,  1519,  1521,  1523,  1527,  1531,  1532,  1535,  1538,
    1539,  1540,  1543,  1544,  1547,  1548,  1551,  1554,  1555,  1558,
    1561,  1562,  1565,  1568,  1571,  1572,  1575,  1576,  1579,  1581,
    1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,  1598,
    1600,  1601,  1602,  1603,  1604,  1605,  1606,  1607,  1608,  1611,
    1614,  1617,  1620,  1621,  1624,  1625,  1628,  1629,  1632,  1633,
    1636,  1639,  1642,  1645,  1646,  1649,  1651,  1652,  1653,  1654,
    1657,  1658,  1661,  1664,  1667,  1668,  1671,  1672,  1673,  1674,
    1677,  1680,  1683,  1684,  1687,  1688,  1689,  1692,  1696,  1700,
    1704,  1708,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,
    1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,
    1730,  1731,  1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,
    1740,  1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,
    1750,  1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,
    1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,
    1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,
    1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788
  };

  // Print the state stack on the debug stream.
  void
  asn1_parser::yystack_print_ ()
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << i->state;
    *yycdebug_ << '\n';
  }

  // Report on the debug stream that the rule \a yyrule is going to be reduced.
  void
  asn1_parser::yy_reduce_print_ (int yyrule)
  {
    unsigned yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):\n";
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG



} // yy
#line 11306 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re" // lalr1.cc:1242
#line 1790 "/home/styler/git/fast_ber/src/compiler/asn_compiler.yacc" // lalr1.cc:1243



namespace yy {

    asn1_parser::symbol_type yylex(Context& context)
    {
        const char* start = context.cursor;
        const char* YYMARKER = nullptr;
        context.location.step();
        // Lexer

#line 11322 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *context.cursor;
	switch (yych) {
	case 0x00:	goto yy2;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy6;
	case '\n':	goto yy8;
	case '\r':	goto yy10;
	case '!':	goto yy11;
	case '"':	goto yy13;
	case '&':	goto yy15;
	case '\'':	goto yy16;
	case '(':	goto yy18;
	case ')':	goto yy20;
	case ',':	goto yy22;
	case '-':	goto yy24;
	case '.':	goto yy26;
	case '/':	goto yy28;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy29;
	case ':':	goto yy32;
	case ';':	goto yy34;
	case '<':	goto yy36;
	case '@':	goto yy38;
	case 'A':	goto yy40;
	case 'B':	goto yy42;
	case 'C':	goto yy43;
	case 'D':	goto yy44;
	case 'E':	goto yy45;
	case 'F':	goto yy46;
	case 'G':	goto yy47;
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'Q':
	case 'X':
	case 'Y':
	case 'Z':	goto yy48;
	case 'I':	goto yy50;
	case 'M':	goto yy51;
	case 'N':	goto yy52;
	case 'O':	goto yy53;
	case 'P':	goto yy54;
	case 'R':	goto yy55;
	case 'S':	goto yy56;
	case 'T':	goto yy57;
	case 'U':	goto yy58;
	case 'V':	goto yy59;
	case 'W':	goto yy60;
	case '[':	goto yy61;
	case ']':	goto yy63;
	case '^':	goto yy65;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	case '{':	goto yy70;
	case '|':	goto yy72;
	case '}':	goto yy74;
	default:	goto yy4;
	}
yy2:
	++context.cursor;
#line 11441 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END_OF_FILE(context.location); }
#line 11424 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy4:
	++context.cursor;
yy5:
#line 11467 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ std::cerr << "Ignoring unknown symbol: " <<  static_cast<int>(*start) << std::endl; return yylex(context); }
#line 11430 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy6:
	++context.cursor;
#line 11445 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.columns(); return yylex(context); }
#line 11435 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy8:
	++context.cursor;
#line 11444 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); context.location.lines();   return yylex(context); }
#line 11440 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy10:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':	goto yy8;
	default:	goto yy5;
	}
yy11:
	++context.cursor;
#line 11463 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCLAMATION_MARK (context.location); }
#line 11451 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy13:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy78;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy15:
	yych = *++context.cursor;
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':	goto yy81;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy5;
	}
yy16:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy87;
	case '0':
	case '1':	goto yy16;
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy88;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy18:
	++context.cursor;
#line 11453 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_PARENTHESIS (context.location); }
#line 11551 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy20:
	++context.cursor;
#line 11454 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_PARENTHESIS (context.location); }
#line 11556 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy22:
	++context.cursor;
#line 11459 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMMA (context.location); }
#line 11561 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy24:
	yych = *++context.cursor;
	switch (yych) {
	case '-':	goto yy90;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy93;
	default:	goto yy25;
	}
yy25:
#line 11460 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_HYPHEN_MINUS (context.location); }
#line 11581 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy26:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy96;
	default:	goto yy27;
	}
yy27:
#line 11461 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FULL_STOP (context.location); }
#line 11591 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy28:
	yych = *++context.cursor;
	switch (yych) {
	case '*':	goto yy98;
	default:	goto yy5;
	}
yy29:
	yyaccept = 0;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '.':	goto yy100;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy29;
	default:	goto yy31;
	}
yy31:
#line 11427 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_number(std::stoll(std::string(start, context.cursor)), context.location); }
#line 11618 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy32:
	yyaccept = 1;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case ':':	goto yy102;
	default:	goto yy33;
	}
yy33:
#line 11457 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COLON (context.location); }
#line 11629 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy34:
	++context.cursor;
#line 11458 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEMICOLON (context.location); }
#line 11634 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy36:
	++context.cursor;
#line 11464 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_LESS_THAN (context.location); }
#line 11639 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy38:
	++context.cursor;
#line 11466 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AT (context.location); }
#line 11644 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy40:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy104;
	case 'L':	goto yy105;
	case 'N':	goto yy106;
	case 'P':	goto yy107;
	case 'U':	goto yy108;
	default:	goto yy49;
	}
yy41:
#line 11435 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_UPPERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 11659 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy42:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy109;
	case 'I':	goto yy110;
	case 'M':	goto yy111;
	case 'O':	goto yy112;
	case 'Y':	goto yy113;
	default:	goto yy49;
	}
yy43:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'H':	goto yy115;
	case 'L':	goto yy116;
	case 'O':	goto yy117;
	default:	goto yy49;
	}
yy44:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy118;
	case 'E':	goto yy119;
	case 'U':	goto yy120;
	default:	goto yy49;
	}
yy45:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy121;
	case 'N':	goto yy122;
	case 'X':	goto yy123;
	default:	goto yy49;
	}
yy46:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy124;
	case 'R':	goto yy125;
	default:	goto yy49;
	}
yy47:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy126;
	case 'r':	goto yy127;
	default:	goto yy49;
	}
yy48:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
yy49:
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy41;
	}
yy50:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy128;
	case 'D':	goto yy129;
	case 'M':	goto yy130;
	case 'N':	goto yy131;
	case 'S':	goto yy132;
	default:	goto yy49;
	}
yy51:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy133;
	case 'I':	goto yy134;
	default:	goto yy49;
	}
yy52:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy135;
	case 'U':	goto yy136;
	case 'u':	goto yy137;
	default:	goto yy49;
	}
yy53:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy138;
	case 'C':	goto yy139;
	case 'F':	goto yy140;
	case 'I':	goto yy142;
	case 'P':	goto yy143;
	case 'b':	goto yy144;
	default:	goto yy49;
	}
yy54:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy145;
	case 'D':	goto yy146;
	case 'L':	goto yy147;
	case 'R':	goto yy148;
	case 'r':	goto yy149;
	default:	goto yy49;
	}
yy55:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy150;
	default:	goto yy49;
	}
yy56:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy151;
	case 'I':	goto yy152;
	case 'T':	goto yy153;
	case 'Y':	goto yy154;
	default:	goto yy49;
	}
yy57:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '6':	goto yy155;
	case 'A':	goto yy156;
	case 'I':	goto yy157;
	case 'R':	goto yy158;
	case 'Y':	goto yy159;
	case 'e':	goto yy160;
	default:	goto yy49;
	}
yy58:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy161;
	case 'T':	goto yy162;
	case 'n':	goto yy163;
	default:	goto yy49;
	}
yy59:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy164;
	default:	goto yy49;
	}
yy60:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy165;
	default:	goto yy49;
	}
yy61:
	++context.cursor;
#line 11455 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_SQUARE_BRACKET (context.location); }
#line 11892 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy63:
	++context.cursor;
#line 11456 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_SQUARE_BRACKET (context.location); }
#line 11897 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy65:
	++context.cursor;
#line 11465 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ACCENT (context.location); }
#line 11902 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy67:
	yyaccept = 3;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy166;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	default:	goto yy69;
	}
yy69:
#line 11436 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GENERIC_IDENTIFIER_LOWERCASE(santize_name(std::string(start, context.cursor)), context.location); }
#line 11976 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy70:
	++context.cursor;
#line 11451 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPEN_BRACE (context.location); }
#line 11981 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy72:
	++context.cursor;
#line 11462 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VERTICAL_LINE (context.location); }
#line 11986 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy74:
	++context.cursor;
#line 11452 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLOSE_BRACE (context.location); }
#line 11991 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy76:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy13;
	default:	goto yy77;
	}
yy77:
#line 11430 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_cstring(std::string(start, context.cursor), context.location); }
#line 12001 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy78:
	++context.cursor;
	goto yy77;
yy79:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy167;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy81:
	yyaccept = 4;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy169;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy81;
	default:	goto yy83;
	}
yy83:
#line 11437 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_typefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 12085 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy84:
	yyaccept = 5;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy170;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy86;
	}
yy86:
#line 11438 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_valuefieldreference(santize_name(std::string(start, context.cursor)), context.location); }
#line 12159 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy87:
	yych = *++context.cursor;
	switch (yych) {
	case 'B':	goto yy171;
	case 'H':	goto yy173;
	default:	goto yy77;
	}
yy88:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy76;
	case '\'':	goto yy175;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy88;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy90:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy92;
	case '-':	goto yy176;
	default:	goto yy90;
	}
yy92:
#line 11421 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 12208 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy93:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy93;
	default:	goto yy95;
	}
yy95:
#line 11428 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_negativenumber(std::stoll(std::string(start, context.cursor)), context.location); }
#line 12227 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy96:
	yych = *++context.cursor;
	switch (yych) {
	case '.':	goto yy177;
	default:	goto yy97;
	}
yy97:
#line 11450 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RANGE (context.location); }
#line 12237 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy98:
	yych = *++context.cursor;
	switch (yych) {
	case '*':	goto yy179;
	default:	goto yy98;
	}
yy100:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy180;
	default:	goto yy101;
	}
yy101:
	context.cursor = YYMARKER;
	switch (yyaccept) {
	case 0: 	goto yy31;
	case 1: 	goto yy33;
	case 2: 	goto yy41;
	case 3: 	goto yy69;
	case 4: 	goto yy83;
	case 5: 	goto yy86;
	case 6: 	goto yy114;
	case 7: 	goto yy141;
	case 8: 	goto yy187;
	case 9: 	goto yy189;
	case 10: 	goto yy194;
	case 11: 	goto yy208;
	case 12: 	goto yy225;
	case 13: 	goto yy227;
	case 14: 	goto yy238;
	case 15: 	goto yy247;
	case 16: 	goto yy282;
	case 17: 	goto yy295;
	case 18: 	goto yy309;
	case 19: 	goto yy322;
	case 20: 	goto yy327;
	case 21: 	goto yy332;
	case 22: 	goto yy334;
	case 23: 	goto yy336;
	case 24: 	goto yy348;
	case 25: 	goto yy354;
	case 26: 	goto yy360;
	case 27: 	goto yy377;
	case 28: 	goto yy395;
	case 29: 	goto yy414;
	case 30: 	goto yy423;
	case 31: 	goto yy431;
	case 32: 	goto yy444;
	case 33: 	goto yy466;
	case 34: 	goto yy479;
	case 35: 	goto yy481;
	case 36: 	goto yy487;
	case 37: 	goto yy499;
	case 38: 	goto yy506;
	case 39: 	goto yy511;
	case 40: 	goto yy516;
	case 41: 	goto yy525;
	case 42: 	goto yy527;
	case 43: 	goto yy532;
	case 44: 	goto yy539;
	case 45: 	goto yy543;
	case 46: 	goto yy546;
	case 47: 	goto yy548;
	case 48: 	goto yy559;
	case 49: 	goto yy575;
	case 50: 	goto yy577;
	case 51: 	goto yy581;
	case 52: 	goto yy584;
	case 53: 	goto yy591;
	case 54: 	goto yy593;
	case 55: 	goto yy595;
	case 56: 	goto yy603;
	case 57: 	goto yy609;
	case 58: 	goto yy611;
	case 59: 	goto yy624;
	case 60: 	goto yy626;
	case 61: 	goto yy628;
	case 62: 	goto yy630;
	case 63: 	goto yy634;
	case 64: 	goto yy643;
	case 65: 	goto yy656;
	case 66: 	goto yy661;
	case 67: 	goto yy669;
	case 68: 	goto yy672;
	case 69: 	goto yy676;
	case 70: 	goto yy682;
	case 71: 	goto yy697;
	case 72: 	goto yy703;
	case 73: 	goto yy705;
	case 74: 	goto yy707;
	case 75: 	goto yy724;
	case 76: 	goto yy737;
	case 77: 	goto yy739;
	case 78: 	goto yy741;
	case 79: 	goto yy744;
	case 80: 	goto yy750;
	case 81: 	goto yy759;
	case 82: 	goto yy761;
	case 83: 	goto yy764;
	case 84: 	goto yy767;
	case 85: 	goto yy770;
	case 86: 	goto yy775;
	case 87: 	goto yy779;
	case 88: 	goto yy784;
	case 89: 	goto yy791;
	case 90: 	goto yy793;
	case 91: 	goto yy796;
	case 92: 	goto yy799;
	case 93: 	goto yy802;
	case 94: 	goto yy804;
	case 95: 	goto yy806;
	case 96: 	goto yy808;
	default:	goto yy810;
	}
yy102:
	yych = *++context.cursor;
	switch (yych) {
	case '=':	goto yy183;
	default:	goto yy101;
	}
yy103:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy101;
	}
yy104:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy185;
	default:	goto yy49;
	}
yy105:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy186;
	default:	goto yy49;
	}
yy106:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy188;
	default:	goto yy49;
	}
yy107:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy190;
	default:	goto yy49;
	}
yy108:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy191;
	default:	goto yy49;
	}
yy109:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy192;
	default:	goto yy49;
	}
yy110:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy193;
	default:	goto yy49;
	}
yy111:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy195;
	default:	goto yy49;
	}
yy112:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy196;
	default:	goto yy49;
	}
yy113:
	yyaccept = 6;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy114;
	}
yy114:
#line 11334 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BY (context.location); }
#line 12571 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy115:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy197;
	case 'O':	goto yy198;
	default:	goto yy49;
	}
yy116:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy199;
	default:	goto yy49;
	}
yy117:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy200;
	case 'N':	goto yy201;
	default:	goto yy49;
	}
yy118:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy202;
	default:	goto yy49;
	}
yy119:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy203;
	default:	goto yy49;
	}
yy120:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy204;
	default:	goto yy49;
	}
yy121:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy205;
	default:	goto yy49;
	}
yy122:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy206;
	case 'D':	goto yy207;
	case 'U':	goto yy209;
	default:	goto yy49;
	}
yy123:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy210;
	case 'P':	goto yy211;
	case 'T':	goto yy212;
	default:	goto yy49;
	}
yy124:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy213;
	default:	goto yy49;
	}
yy125:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy214;
	default:	goto yy49;
	}
yy126:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy215;
	default:	goto yy49;
	}
yy127:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'a':	goto yy216;
	default:	goto yy49;
	}
yy128:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '5':	goto yy217;
	default:	goto yy49;
	}
yy129:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy218;
	default:	goto yy49;
	}
yy130:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy219;
	default:	goto yy49;
	}
yy131:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy220;
	case 'S':	goto yy221;
	case 'T':	goto yy222;
	default:	goto yy49;
	}
yy132:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy223;
	default:	goto yy49;
	}
yy133:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'X':	goto yy224;
	default:	goto yy49;
	}
yy134:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy226;
	default:	goto yy49;
	}
yy135:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy228;
	default:	goto yy49;
	}
yy136:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy229;
	default:	goto yy49;
	}
yy137:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'm':	goto yy230;
	default:	goto yy49;
	}
yy138:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'J':	goto yy231;
	default:	goto yy49;
	}
yy139:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy232;
	default:	goto yy49;
	}
yy140:
	yyaccept = 7;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy141;
	}
yy141:
#line 11382 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OF (context.location); }
#line 12828 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy142:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy233;
	default:	goto yy49;
	}
yy143:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy234;
	default:	goto yy49;
	}
yy144:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'j':	goto yy235;
	default:	goto yy49;
	}
yy145:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy236;
	default:	goto yy49;
	}
yy146:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'V':	goto yy237;
	default:	goto yy49;
	}
yy147:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy239;
	default:	goto yy49;
	}
yy148:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy240;
	case 'I':	goto yy241;
	default:	goto yy49;
	}
yy149:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy242;
	default:	goto yy49;
	}
yy150:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy243;
	case 'L':	goto yy244;
	default:	goto yy49;
	}
yy151:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Q':	goto yy245;
	case 'T':	goto yy246;
	default:	goto yy49;
	}
yy152:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Z':	goto yy248;
	default:	goto yy49;
	}
yy153:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy249;
	default:	goto yy49;
	}
yy154:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy250;
	default:	goto yy49;
	}
yy155:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '1':	goto yy251;
	default:	goto yy49;
	}
yy156:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy252;
	default:	goto yy49;
	}
yy157:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy253;
	default:	goto yy49;
	}
yy158:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy254;
	default:	goto yy49;
	}
yy159:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy255;
	default:	goto yy49;
	}
yy160:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy256;
	default:	goto yy49;
	}
yy161:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy257;
	default:	goto yy49;
	}
yy162:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy258;
	case 'F':	goto yy259;
	default:	goto yy49;
	}
yy163:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy260;
	default:	goto yy49;
	}
yy164:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'd':	goto yy261;
	case 's':	goto yy262;
	default:	goto yy49;
	}
yy165:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy263;
	default:	goto yy49;
	}
yy166:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy67;
	default:	goto yy101;
	}
yy167:
	yych = *++context.cursor;
	switch (yych) {
	case '"':	goto yy167;
	case '\'':	goto yy78;
	case '\\':	goto yy79;
	default:	goto yy13;
	}
yy169:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy81;
	default:	goto yy101;
	}
yy170:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy84;
	default:	goto yy101;
	}
yy171:
	++context.cursor;
#line 11432 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_bstring(std::string(start + 1, context.cursor - 2), context.location); }
#line 13218 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy173:
	++context.cursor;
#line 11434 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_hstring(std::string(start + 1, context.cursor - 2), context.location); }
#line 13223 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy175:
	yych = *++context.cursor;
	switch (yych) {
	case 'H':	goto yy173;
	default:	goto yy77;
	}
yy176:
	yych = *++context.cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy92;
	case '-':	goto yy264;
	default:	goto yy90;
	}
yy177:
	++context.cursor;
#line 11449 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ELIPSIS (context.location); }
#line 13242 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy179:
	yych = *++context.cursor;
	switch (yych) {
	case '/':	goto yy266;
	default:	goto yy98;
	}
yy180:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy180;
	default:	goto yy182;
	}
yy182:
#line 11426 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_realnumber(std::stod(std::string(start, context.cursor)), context.location); }
#line 13267 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy183:
	++context.cursor;
#line 11448 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINED_AS (context.location); }
#line 13272 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy185:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy268;
	case 'T':	goto yy269;
	default:	goto yy49;
	}
yy186:
	yyaccept = 8;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy187;
	}
yy187:
#line 11326 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ALL (context.location); }
#line 13354 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy188:
	yyaccept = 9;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy189;
	}
yy189:
#line 11327 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ANY (context.location); }
#line 13428 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy190:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy270;
	default:	goto yy49;
	}
yy191:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy271;
	default:	goto yy49;
	}
yy192:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy272;
	default:	goto yy49;
	}
yy193:
	yyaccept = 10;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy194;
	}
yy194:
#line 11331 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BIT (context.location); }
#line 13523 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy195:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy273;
	default:	goto yy49;
	}
yy196:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy274;
	default:	goto yy49;
	}
yy197:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy275;
	default:	goto yy49;
	}
yy198:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy276;
	default:	goto yy49;
	}
yy199:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy277;
	default:	goto yy49;
	}
yy200:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy278;
	default:	goto yy49;
	}
yy201:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy279;
	case 'T':	goto yy280;
	default:	goto yy49;
	}
yy202:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy281;
	default:	goto yy49;
	}
yy203:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy283;
	case 'I':	goto yy284;
	default:	goto yy49;
	}
yy204:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy285;
	default:	goto yy49;
	}
yy205:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy286;
	default:	goto yy49;
	}
yy206:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy287;
	default:	goto yy49;
	}
yy207:
	yyaccept = 11;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy208;
	}
yy208:
#line 11350 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_END (context.location); }
#line 13683 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy209:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy288;
	default:	goto yy49;
	}
yy210:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy289;
	default:	goto yy49;
	}
yy211:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy290;
	case 'O':	goto yy291;
	default:	goto yy49;
	}
yy212:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy292;
	default:	goto yy49;
	}
yy213:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy293;
	default:	goto yy49;
	}
yy214:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy294;
	default:	goto yy49;
	}
yy215:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy296;
	default:	goto yy49;
	}
yy216:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'p':	goto yy297;
	default:	goto yy49;
	}
yy217:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy298;
	default:	goto yy49;
	}
yy218:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy299;
	default:	goto yy49;
	}
yy219:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy300;
	case 'O':	goto yy301;
	default:	goto yy49;
	}
yy220:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy302;
	default:	goto yy49;
	}
yy221:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy303;
	default:	goto yy49;
	}
yy222:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy304;
	default:	goto yy49;
	}
yy223:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '6':	goto yy305;
	default:	goto yy49;
	}
yy224:
	yyaccept = 12;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy225;
	}
yy225:
#line 11373 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MAX (context.location); }
#line 13864 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy226:
	yyaccept = 13;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'U':	goto yy306;
	default:	goto yy227;
	}
yy227:
#line 11374 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MIN (context.location); }
#line 13938 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy228:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy307;
	default:	goto yy49;
	}
yy229:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy308;
	default:	goto yy49;
	}
yy230:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy310;
	default:	goto yy49;
	}
yy231:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy311;
	default:	goto yy49;
	}
yy232:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy312;
	default:	goto yy49;
	}
yy233:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '_':	goto yy313;
	default:	goto yy49;
	}
yy234:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy314;
	default:	goto yy49;
	}
yy235:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy315;
	default:	goto yy49;
	}
yy236:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy316;
	default:	goto yy49;
	}
yy237:
	yyaccept = 14;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy238;
	}
yy238:
#line 11386 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PDV (context.location); }
#line 14075 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy239:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy317;
	default:	goto yy49;
	}
yy240:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy318;
	default:	goto yy49;
	}
yy241:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'V':	goto yy319;
	default:	goto yy49;
	}
yy242:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy320;
	default:	goto yy49;
	}
yy243:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy321;
	default:	goto yy49;
	}
yy244:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy323;
	default:	goto yy49;
	}
yy245:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy324;
	default:	goto yy49;
	}
yy246:
	yyaccept = 15;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'T':	goto yy325;
	default:	goto yy247;
	}
yy247:
#line 11395 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SET (context.location); }
#line 14198 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy248:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy326;
	default:	goto yy49;
	}
yy249:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy328;
	default:	goto yy49;
	}
yy250:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy329;
	default:	goto yy49;
	}
yy251:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy330;
	default:	goto yy49;
	}
yy252:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy331;
	default:	goto yy49;
	}
yy253:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy333;
	default:	goto yy49;
	}
yy254:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy335;
	default:	goto yy49;
	}
yy255:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy337;
	default:	goto yy49;
	}
yy256:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy338;
	default:	goto yy49;
	}
yy257:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy339;
	case 'Q':	goto yy340;
	case 'V':	goto yy341;
	default:	goto yy49;
	}
yy258:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy342;
	default:	goto yy49;
	}
yy259:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '8':	goto yy343;
	default:	goto yy49;
	}
yy260:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'v':	goto yy344;
	default:	goto yy49;
	}
yy261:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy345;
	default:	goto yy49;
	}
yy262:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy346;
	default:	goto yy49;
	}
yy263:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'H':	goto yy347;
	default:	goto yy49;
	}
yy264:
	++context.cursor;
#line 11419 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return yylex(context); }
#line 14317 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy266:
	++context.cursor;
#line 11423 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ for (char c: std::string(start, context.cursor)) { context.location.columns(); if (c == '\n') context.location.lines(); } return yylex(context); }
#line 14322 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy268:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy349;
	default:	goto yy49;
	}
yy269:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy350;
	default:	goto yy49;
	}
yy270:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy351;
	default:	goto yy49;
	}
yy271:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy352;
	default:	goto yy49;
	}
yy272:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy353;
	default:	goto yy49;
	}
yy273:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy355;
	default:	goto yy49;
	}
yy274:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy356;
	default:	goto yy49;
	}
yy275:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy357;
	default:	goto yy49;
	}
yy276:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy358;
	default:	goto yy49;
	}
yy277:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy359;
	default:	goto yy49;
	}
yy278:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy361;
	default:	goto yy49;
	}
yy279:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy362;
	default:	goto yy49;
	}
yy280:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy363;
	default:	goto yy49;
	}
yy281:
	yyaccept = 16;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy364;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy282;
	}
yy282:
#line 11342 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE (context.location); }
#line 14487 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy283:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy365;
	default:	goto yy49;
	}
yy284:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy366;
	default:	goto yy49;
	}
yy285:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy367;
	default:	goto yy49;
	}
yy286:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy368;
	default:	goto yy49;
	}
yy287:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy369;
	default:	goto yy49;
	}
yy288:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy370;
	default:	goto yy49;
	}
yy289:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'P':	goto yy371;
	default:	goto yy49;
	}
yy290:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy372;
	default:	goto yy49;
	}
yy291:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy373;
	default:	goto yy49;
	}
yy292:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy374;
	case 'R':	goto yy375;
	default:	goto yy49;
	}
yy293:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy376;
	default:	goto yy49;
	}
yy294:
	yyaccept = 17;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy295;
	}
yy295:
#line 11358 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FROM (context.location); }
#line 14639 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy296:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy378;
	default:	goto yy49;
	}
yy297:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'h':	goto yy379;
	default:	goto yy49;
	}
yy298:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy380;
	default:	goto yy49;
	}
yy299:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy381;
	default:	goto yy49;
	}
yy300:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy382;
	default:	goto yy49;
	}
yy301:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy383;
	default:	goto yy49;
	}
yy302:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy384;
	default:	goto yy49;
	}
yy303:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy385;
	case 'R':	goto yy386;
	default:	goto yy49;
	}
yy304:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy387;
	case 'R':	goto yy388;
	default:	goto yy49;
	}
yy305:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '4':	goto yy389;
	default:	goto yy49;
	}
yy306:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy390;
	default:	goto yy49;
	}
yy307:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'A':	goto yy391;
	default:	goto yy101;
	}
yy308:
	yyaccept = 18;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy309;
	}
yy309:
#line 11377 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ASN_NULL (context.location); }
#line 14860 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy310:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy392;
	default:	goto yy49;
	}
yy311:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy393;
	default:	goto yy49;
	}
yy312:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy394;
	default:	goto yy49;
	}
yy313:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy396;
	default:	goto yy49;
	}
yy314:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy397;
	default:	goto yy49;
	}
yy315:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'c':	goto yy398;
	default:	goto yy49;
	}
yy316:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy399;
	default:	goto yy49;
	}
yy317:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '_':	goto yy400;
	default:	goto yy49;
	}
yy318:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy401;
	default:	goto yy49;
	}
yy319:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy402;
	default:	goto yy49;
	}
yy320:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy403;
	default:	goto yy49;
	}
yy321:
	yyaccept = 19;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy322;
	}
yy322:
#line 11391 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_REAL (context.location); }
#line 15011 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy323:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy404;
	default:	goto yy49;
	}
yy324:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy405;
	default:	goto yy49;
	}
yy325:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy406;
	default:	goto yy49;
	}
yy326:
	yyaccept = 20;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy327;
	}
yy327:
#line 11397 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SIZE (context.location); }
#line 15106 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy328:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy407;
	default:	goto yy49;
	}
yy329:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy408;
	default:	goto yy49;
	}
yy330:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy409;
	default:	goto yy49;
	}
yy331:
	yyaccept = 21;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy332;
	}
yy332:
#line 11401 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TAGS (context.location); }
#line 15201 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy333:
	yyaccept = 22;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy410;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy334;
	}
yy334:
#line 11403 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME (context.location); }
#line 15275 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy335:
	yyaccept = 23;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy336;
	}
yy336:
#line 11405 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TRUE (context.location); }
#line 15349 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy337:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy411;
	default:	goto yy49;
	}
yy338:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy412;
	default:	goto yy49;
	}
yy339:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy413;
	default:	goto yy49;
	}
yy340:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy415;
	default:	goto yy49;
	}
yy341:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy416;
	default:	goto yy49;
	}
yy342:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy417;
	default:	goto yy49;
	}
yy343:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy418;
	default:	goto yy49;
	}
yy344:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy419;
	default:	goto yy49;
	}
yy345:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'o':	goto yy420;
	default:	goto yy49;
	}
yy346:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'b':	goto yy421;
	default:	goto yy49;
	}
yy347:
	yyaccept = 24;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy348;
	}
yy348:
#line 11415 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_WITH (context.location); }
#line 15493 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy349:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy422;
	default:	goto yy49;
	}
yy350:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy424;
	default:	goto yy49;
	}
yy351:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy425;
	default:	goto yy49;
	}
yy352:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy426;
	default:	goto yy49;
	}
yy353:
	yyaccept = 25;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy354;
	}
yy354:
#line 11330 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BEGIN (context.location); }
#line 15595 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy355:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy427;
	default:	goto yy49;
	}
yy356:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy428;
	default:	goto yy49;
	}
yy357:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy429;
	default:	goto yy49;
	}
yy358:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy430;
	default:	goto yy49;
	}
yy359:
	yyaccept = 26;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy360;
	}
yy360:
#line 11337 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CLASS (context.location); }
#line 15697 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy361:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy432;
	default:	goto yy49;
	}
yy362:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy433;
	default:	goto yy49;
	}
yy363:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy434;
	default:	goto yy49;
	}
yy364:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'T':	goto yy435;
	default:	goto yy101;
	}
yy365:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy436;
	default:	goto yy49;
	}
yy366:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy437;
	default:	goto yy49;
	}
yy367:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy438;
	default:	goto yy49;
	}
yy368:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy439;
	default:	goto yy49;
	}
yy369:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy440;
	case 'I':	goto yy441;
	default:	goto yy49;
	}
yy370:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy442;
	default:	goto yy49;
	}
yy371:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy443;
	default:	goto yy49;
	}
yy372:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy445;
	default:	goto yy49;
	}
yy373:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy446;
	default:	goto yy49;
	}
yy374:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy447;
	default:	goto yy49;
	}
yy375:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy448;
	default:	goto yy49;
	}
yy376:
	yyaccept = 27;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy377;
	}
yy377:
#line 11357 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_FALSE (context.location); }
#line 15938 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy378:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'a':	goto yy449;
	default:	goto yy49;
	}
yy379:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy450;
	default:	goto yy49;
	}
yy380:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy451;
	default:	goto yy49;
	}
yy381:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy452;
	default:	goto yy49;
	}
yy382:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy453;
	case 'E':	goto yy454;
	default:	goto yy49;
	}
yy383:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy455;
	default:	goto yy49;
	}
yy384:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy456;
	default:	goto yy49;
	}
yy385:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy457;
	default:	goto yy49;
	}
yy386:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy458;
	default:	goto yy49;
	}
yy387:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy459;
	default:	goto yy49;
	}
yy388:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy460;
	default:	goto yy49;
	}
yy389:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '6':	goto yy461;
	default:	goto yy49;
	}
yy390:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy462;
	default:	goto yy49;
	}
yy391:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy463;
	default:	goto yy49;
	}
yy392:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy464;
	default:	goto yy49;
	}
yy393:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy465;
	default:	goto yy49;
	}
yy394:
	yyaccept = 28;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy395;
	}
yy395:
#line 11381 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OCTET (context.location); }
#line 16125 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy396:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy467;
	default:	goto yy49;
	}
yy397:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy468;
	default:	goto yy49;
	}
yy398:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy469;
	default:	goto yy49;
	}
yy399:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy470;
	default:	goto yy49;
	}
yy400:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy471;
	default:	goto yy49;
	}
yy401:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy472;
	default:	goto yy49;
	}
yy402:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy473;
	default:	goto yy49;
	}
yy403:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'a':	goto yy474;
	default:	goto yy49;
	}
yy404:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy475;
	default:	goto yy49;
	}
yy405:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy476;
	default:	goto yy49;
	}
yy406:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy477;
	default:	goto yy49;
	}
yy407:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy478;
	default:	goto yy49;
	}
yy408:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'X':	goto yy480;
	default:	goto yy49;
	}
yy409:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy482;
	default:	goto yy49;
	}
yy410:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'O':	goto yy483;
	default:	goto yy101;
	}
yy411:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'I':	goto yy484;
	default:	goto yy101;
	}
yy412:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy485;
	default:	goto yy49;
	}
yy413:
	yyaccept = 29;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy414;
	}
yy414:
#line 11407 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNION (context.location); }
#line 16440 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy415:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy486;
	default:	goto yy49;
	}
yy416:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy488;
	default:	goto yy49;
	}
yy417:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'm':	goto yy489;
	default:	goto yy49;
	}
yy418:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy490;
	default:	goto yy49;
	}
yy419:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy491;
	default:	goto yy49;
	}
yy420:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy492;
	default:	goto yy49;
	}
yy421:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy493;
	default:	goto yy49;
	}
yy422:
	yyaccept = 30;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy423;
	}
yy423:
#line 11324 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSENT (context.location); }
#line 16563 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy424:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy494;
	default:	goto yy49;
	}
yy425:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy495;
	default:	goto yy49;
	}
yy426:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy496;
	default:	goto yy49;
	}
yy427:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy497;
	default:	goto yy49;
	}
yy428:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy498;
	default:	goto yy49;
	}
yy429:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy500;
	default:	goto yy49;
	}
yy430:
	yyaccept = 31;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy431;
	}
yy431:
#line 11336 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHOICE (context.location); }
#line 16679 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy432:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy501;
	default:	goto yy49;
	}
yy433:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy502;
	default:	goto yy49;
	}
yy434:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy503;
	default:	goto yy49;
	}
yy435:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy504;
	default:	goto yy49;
	}
yy436:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy505;
	default:	goto yy49;
	}
yy437:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy507;
	default:	goto yy49;
	}
yy438:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy508;
	default:	goto yy49;
	}
yy439:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy509;
	default:	goto yy49;
	}
yy440:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy510;
	default:	goto yy49;
	}
yy441:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy512;
	default:	goto yy49;
	}
yy442:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy513;
	default:	goto yy49;
	}
yy443:
	yyaccept = 32;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy444;
	}
yy444:
#line 11352 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXCEPT (context.location); }
#line 16830 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy445:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy514;
	default:	goto yy49;
	}
yy446:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy515;
	default:	goto yy49;
	}
yy447:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy517;
	default:	goto yy49;
	}
yy448:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy518;
	default:	goto yy49;
	}
yy449:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy519;
	default:	goto yy49;
	}
yy450:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'c':	goto yy520;
	default:	goto yy49;
	}
yy451:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy521;
	default:	goto yy49;
	}
yy452:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy522;
	default:	goto yy49;
	}
yy453:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy523;
	default:	goto yy49;
	}
yy454:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy524;
	default:	goto yy49;
	}
yy455:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy526;
	default:	goto yy49;
	}
yy456:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy528;
	default:	goto yy49;
	}
yy457:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy529;
	default:	goto yy49;
	}
yy458:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy530;
	default:	goto yy49;
	}
yy459:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy531;
	default:	goto yy49;
	}
yy460:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy533;
	default:	goto yy49;
	}
yy461:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy534;
	default:	goto yy49;
	}
yy462:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'I':	goto yy535;
	default:	goto yy101;
	}
yy463:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'N':	goto yy536;
	default:	goto yy101;
	}
yy464:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'c':	goto yy537;
	default:	goto yy49;
	}
yy465:
	yyaccept = 33;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy466;
	}
yy466:
#line 11379 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OBJECT (context.location); }
#line 17166 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy467:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy538;
	default:	goto yy49;
	}
yy468:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy540;
	default:	goto yy49;
	}
yy469:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy541;
	default:	goto yy49;
	}
yy470:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy542;
	default:	goto yy49;
	}
yy471:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy544;
	default:	goto yy49;
	}
yy472:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy545;
	default:	goto yy49;
	}
yy473:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy547;
	default:	goto yy49;
	}
yy474:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'b':	goto yy549;
	default:	goto yy49;
	}
yy475:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'V':	goto yy550;
	default:	goto yy49;
	}
yy476:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy551;
	default:	goto yy49;
	}
yy477:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy552;
	default:	goto yy49;
	}
yy478:
	yyaccept = 34;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy479;
	}
yy479:
#line 11398 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_STRING (context.location); }
#line 17317 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy480:
	yyaccept = 35;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy481;
	}
yy481:
#line 11399 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SYNTAX (context.location); }
#line 17391 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy482:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy553;
	default:	goto yy49;
	}
yy483:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy554;
	default:	goto yy49;
	}
yy484:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy555;
	default:	goto yy49;
	}
yy485:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'x':	goto yy556;
	default:	goto yy49;
	}
yy486:
	yyaccept = 36;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy487;
	}
yy487:
#line 11408 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIQUE (context.location); }
#line 17493 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy488:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy557;
	default:	goto yy49;
	}
yy489:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy558;
	default:	goto yy49;
	}
yy490:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy560;
	default:	goto yy49;
	}
yy491:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 's':	goto yy561;
	default:	goto yy49;
	}
yy492:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy562;
	default:	goto yy49;
	}
yy493:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy563;
	default:	goto yy49;
	}
yy494:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy564;
	default:	goto yy49;
	}
yy495:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy565;
	default:	goto yy49;
	}
yy496:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy566;
	default:	goto yy49;
	}
yy497:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy567;
	default:	goto yy49;
	}
yy498:
	yyaccept = 37;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy499;
	}
yy499:
#line 11333 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BOOLEAN (context.location); }
#line 17637 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy500:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy568;
	default:	goto yy49;
	}
yy501:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy569;
	default:	goto yy49;
	}
yy502:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy570;
	default:	goto yy49;
	}
yy503:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy571;
	default:	goto yy49;
	}
yy504:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy572;
	default:	goto yy49;
	}
yy505:
	yyaccept = 38;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy506;
	}
yy506:
#line 11344 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFAULT (context.location); }
#line 17746 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy507:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy573;
	default:	goto yy49;
	}
yy508:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy574;
	default:	goto yy49;
	}
yy509:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy576;
	default:	goto yy49;
	}
yy510:
	yyaccept = 39;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy511;
	}
yy511:
#line 11348 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODED (context.location); }
#line 17841 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy512:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy578;
	default:	goto yy49;
	}
yy513:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy579;
	default:	goto yy49;
	}
yy514:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy580;
	default:	goto yy49;
	}
yy515:
	yyaccept = 40;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy516;
	}
yy516:
#line 11354 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPORTS (context.location); }
#line 17936 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy517:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy582;
	default:	goto yy49;
	}
yy518:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy583;
	default:	goto yy49;
	}
yy519:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy585;
	case 'i':	goto yy586;
	default:	goto yy49;
	}
yy520:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy587;
	default:	goto yy49;
	}
yy521:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy588;
	default:	goto yy49;
	}
yy522:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy589;
	default:	goto yy49;
	}
yy523:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy590;
	default:	goto yy49;
	}
yy524:
	yyaccept = 41;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy525;
	}
yy525:
#line 11365 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLIED (context.location); }
#line 18060 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy526:
	yyaccept = 42;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy527;
	}
yy527:
#line 11366 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPORTS (context.location); }
#line 18134 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy528:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy592;
	default:	goto yy49;
	}
yy529:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy594;
	default:	goto yy49;
	}
yy530:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy596;
	default:	goto yy49;
	}
yy531:
	yyaccept = 43;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy532;
	}
yy532:
#line 11370 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTEGER (context.location); }
#line 18229 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy533:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy597;
	default:	goto yy49;
	}
yy534:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy598;
	default:	goto yy49;
	}
yy535:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy599;
	default:	goto yy49;
	}
yy536:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'U':	goto yy600;
	default:	goto yy49;
	}
yy537:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy601;
	default:	goto yy49;
	}
yy538:
	yyaccept = 44;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy539;
	}
yy539:
#line 11383 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OID_IRI (context.location); }
#line 18338 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy540:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy602;
	default:	goto yy49;
	}
yy541:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy604;
	default:	goto yy49;
	}
yy542:
	yyaccept = 45;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy543;
	}
yy543:
#line 11385 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PATTERN (context.location); }
#line 18426 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy544:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy605;
	default:	goto yy49;
	}
yy545:
	yyaccept = 46;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy546;
	}
yy546:
#line 11388 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRESENT (context.location); }
#line 18507 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy547:
	yyaccept = 47;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy548;
	}
yy548:
#line 11390 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PRIVATE (context.location); }
#line 18581 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy549:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy606;
	default:	goto yy49;
	}
yy550:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy607;
	default:	goto yy49;
	}
yy551:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy608;
	default:	goto yy49;
	}
yy552:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy610;
	default:	goto yy49;
	}
yy553:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy612;
	default:	goto yy49;
	}
yy554:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy613;
	default:	goto yy49;
	}
yy555:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy614;
	default:	goto yy49;
	}
yy556:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy615;
	default:	goto yy49;
	}
yy557:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy616;
	default:	goto yy49;
	}
yy558:
	yyaccept = 48;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy559;
	}
yy559:
#line 11411 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTCTime (context.location); }
#line 18718 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy560:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy617;
	default:	goto yy49;
	}
yy561:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'a':	goto yy618;
	default:	goto yy49;
	}
yy562:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'x':	goto yy619;
	default:	goto yy49;
	}
yy563:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy620;
	default:	goto yy49;
	}
yy564:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy621;
	default:	goto yy49;
	}
yy565:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy622;
	default:	goto yy49;
	}
yy566:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy623;
	default:	goto yy49;
	}
yy567:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy625;
	default:	goto yy49;
	}
yy568:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy627;
	default:	goto yy49;
	}
yy569:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy629;
	default:	goto yy49;
	}
yy570:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy631;
	default:	goto yy49;
	}
yy571:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy632;
	default:	goto yy49;
	}
yy572:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy633;
	default:	goto yy49;
	}
yy573:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy635;
	default:	goto yy49;
	}
yy574:
	yyaccept = 49;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy575;
	}
yy575:
#line 11346 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DURATION (context.location); }
#line 18890 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy576:
	yyaccept = 50;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy577;
	}
yy577:
#line 11347 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EMBEDDED (context.location); }
#line 18964 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy578:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '_':	goto yy636;
	default:	goto yy49;
	}
yy579:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy637;
	default:	goto yy49;
	}
yy580:
	yyaccept = 51;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy581;
	}
yy581:
#line 11353 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXPLICIT (context.location); }
#line 19052 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy582:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy638;
	default:	goto yy49;
	}
yy583:
	yyaccept = 52;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy584;
	}
yy584:
#line 11356 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTERNAL (context.location); }
#line 19133 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy585:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy639;
	default:	goto yy49;
	}
yy586:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'z':	goto yy640;
	default:	goto yy49;
	}
yy587:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy641;
	default:	goto yy49;
	}
yy588:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy642;
	default:	goto yy49;
	}
yy589:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy644;
	default:	goto yy49;
	}
yy590:
	yyaccept = 53;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy591;
	}
yy591:
#line 11364 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IMPLICIT (context.location); }
#line 19242 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy592:
	yyaccept = 54;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy593;
	}
yy593:
#line 11367 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INCLUDES (context.location); }
#line 19316 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy594:
	yyaccept = 55;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy595;
	}
yy595:
#line 11368 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTANCE (context.location); }
#line 19390 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy596:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy645;
	default:	goto yy49;
	}
yy597:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy646;
	default:	goto yy49;
	}
yy598:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy647;
	default:	goto yy49;
	}
yy599:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy648;
	default:	goto yy49;
	}
yy600:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'M':	goto yy649;
	default:	goto yy49;
	}
yy601:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy650;
	default:	goto yy49;
	}
yy602:
	yyaccept = 56;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy603;
	}
yy603:
#line 11384 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_OPTIONAL (context.location); }
#line 19506 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy604:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 's':	goto yy651;
	default:	goto yy49;
	}
yy605:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy652;
	default:	goto yy49;
	}
yy606:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy653;
	default:	goto yy49;
	}
yy607:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy654;
	default:	goto yy49;
	}
yy608:
	yyaccept = 57;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy609;
	}
yy609:
#line 11394 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SEQUENCE (context.location); }
#line 19608 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy610:
	yyaccept = 58;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy611;
	}
yy611:
#line 11396 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_SETTINGS (context.location); }
#line 19682 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy612:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy655;
	default:	goto yy49;
	}
yy613:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'D':	goto yy657;
	default:	goto yy101;
	}
yy614:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy658;
	default:	goto yy49;
	}
yy615:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy659;
	default:	goto yy49;
	}
yy616:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy660;
	default:	goto yy49;
	}
yy617:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy662;
	default:	goto yy49;
	}
yy618:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'l':	goto yy663;
	default:	goto yy49;
	}
yy619:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy664;
	default:	goto yy49;
	}
yy620:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy665;
	default:	goto yy49;
	}
yy621:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'S':	goto yy666;
	default:	goto yy101;
	}
yy622:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy667;
	default:	goto yy49;
	}
yy623:
	yyaccept = 59;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy624;
	}
yy624:
#line 11329 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_AUTOMATIC (context.location); }
#line 19955 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy625:
	yyaccept = 60;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy626;
	}
yy626:
#line 11332 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_BMPString (context.location); }
#line 20029 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy627:
	yyaccept = 61;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy628;
	}
yy628:
#line 11335 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CHARACTER (context.location); }
#line 20103 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy629:
	yyaccept = 62;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'S':	goto yy668;
	default:	goto yy630;
	}
yy630:
#line 11338 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENT (context.location); }
#line 20177 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy631:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy670;
	default:	goto yy49;
	}
yy632:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'G':	goto yy671;
	default:	goto yy49;
	}
yy633:
	yyaccept = 63;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy634;
	}
yy634:
#line 11343 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DATE_TIME (context.location); }
#line 20265 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy635:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy673;
	default:	goto yy49;
	}
yy636:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'C':	goto yy674;
	default:	goto yy49;
	}
yy637:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy675;
	default:	goto yy49;
	}
yy638:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy677;
	default:	goto yy49;
	}
yy639:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy678;
	default:	goto yy49;
	}
yy640:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy679;
	default:	goto yy49;
	}
yy641:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy680;
	default:	goto yy49;
	}
yy642:
	yyaccept = 64;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy643;
	}
yy643:
#line 11362 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IA5String (context.location); }
#line 20388 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy644:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy681;
	default:	goto yy49;
	}
yy645:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy683;
	default:	goto yy49;
	}
yy646:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy684;
	default:	goto yy49;
	}
yy647:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy685;
	default:	goto yy49;
	}
yy648:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy686;
	default:	goto yy49;
	}
yy649:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'B':	goto yy687;
	default:	goto yy49;
	}
yy650:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy688;
	default:	goto yy49;
	}
yy651:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'c':	goto yy689;
	default:	goto yy49;
	}
yy652:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy690;
	default:	goto yy49;
	}
yy653:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy691;
	default:	goto yy49;
	}
yy654:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'O':	goto yy692;
	default:	goto yy101;
	}
yy655:
	yyaccept = 65;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy656;
	}
yy656:
#line 11400 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_T61String (context.location); }
#line 20600 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy657:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy693;
	default:	goto yy49;
	}
yy658:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy694;
	default:	goto yy49;
	}
yy659:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy695;
	default:	goto yy49;
	}
yy660:
	yyaccept = 66;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy661;
	}
yy661:
#line 11409 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UNIVERSAL (context.location); }
#line 20695 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy662:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy696;
	default:	goto yy49;
	}
yy663:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy698;
	default:	goto yy49;
	}
yy664:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy699;
	default:	goto yy49;
	}
yy665:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy700;
	default:	goto yy49;
	}
yy666:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy701;
	default:	goto yy49;
	}
yy667:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy702;
	default:	goto yy49;
	}
yy668:
	yyaccept = 67;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy669;
	}
yy669:
#line 11339 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_COMPONENTS (context.location); }
#line 20811 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy670:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy704;
	default:	goto yy49;
	}
yy671:
	yyaccept = 68;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy672;
	}
yy672:
#line 11341 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONTAINING (context.location); }
#line 20892 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy673:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy706;
	default:	goto yy49;
	}
yy674:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy708;
	default:	goto yy49;
	}
yy675:
	yyaccept = 69;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy676;
	}
yy676:
#line 11351 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENUMERATED (context.location); }
#line 20980 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy677:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy709;
	default:	goto yy49;
	}
yy678:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy710;
	default:	goto yy49;
	}
yy679:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'd':	goto yy711;
	default:	goto yy49;
	}
yy680:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy712;
	default:	goto yy49;
	}
yy681:
	yyaccept = 70;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy682;
	}
yy682:
#line 11363 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_IDENTIFIER (context.location); }
#line 21082 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy683:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy713;
	default:	goto yy49;
	}
yy684:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy714;
	default:	goto yy49;
	}
yy685:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy715;
	default:	goto yy49;
	}
yy686:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy716;
	default:	goto yy49;
	}
yy687:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy717;
	default:	goto yy49;
	}
yy688:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy718;
	default:	goto yy49;
	}
yy689:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy719;
	default:	goto yy49;
	}
yy690:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy720;
	default:	goto yy49;
	}
yy691:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy721;
	default:	goto yy49;
	}
yy692:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy722;
	default:	goto yy49;
	}
yy693:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy723;
	default:	goto yy49;
	}
yy694:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy725;
	default:	goto yy49;
	}
yy695:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy726;
	default:	goto yy49;
	}
yy696:
	yyaccept = 71;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy697;
	}
yy697:
#line 11412 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UTF8String (context.location); }
#line 21247 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy698:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy727;
	default:	goto yy49;
	}
yy699:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy728;
	default:	goto yy49;
	}
yy700:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy729;
	default:	goto yy49;
	}
yy701:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy730;
	default:	goto yy49;
	}
yy702:
	yyaccept = 72;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy703;
	}
yy703:
#line 11328 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_APPLICATION (context.location); }
#line 21349 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy704:
	yyaccept = 73;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy705;
	}
yy705:
#line 11340 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_CONSTRAINED (context.location); }
#line 21423 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy706:
	yyaccept = 74;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy707;
	}
yy707:
#line 11345 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_DEFINITIONS (context.location); }
#line 21497 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy708:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy731;
	default:	goto yy49;
	}
yy709:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy732;
	default:	goto yy49;
	}
yy710:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy733;
	default:	goto yy49;
	}
yy711:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy734;
	default:	goto yy49;
	}
yy712:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy735;
	default:	goto yy49;
	}
yy713:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'S':	goto yy736;
	default:	goto yy49;
	}
yy714:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'N':	goto yy738;
	default:	goto yy49;
	}
yy715:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy740;
	default:	goto yy49;
	}
yy716:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy742;
	default:	goto yy49;
	}
yy717:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy743;
	default:	goto yy49;
	}
yy718:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy745;
	default:	goto yy49;
	}
yy719:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy746;
	default:	goto yy49;
	}
yy720:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy747;
	default:	goto yy49;
	}
yy721:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy748;
	default:	goto yy49;
	}
yy722:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'D':	goto yy749;
	default:	goto yy49;
	}
yy723:
	yyaccept = 75;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy724;
	}
yy724:
#line 11404 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TIME_OF_DAY (context.location); }
#line 21676 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy725:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'F':	goto yy751;
	default:	goto yy49;
	}
yy726:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy752;
	default:	goto yy49;
	}
yy727:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy753;
	default:	goto yy49;
	}
yy728:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy754;
	default:	goto yy49;
	}
yy729:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy755;
	default:	goto yy49;
	}
yy730:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy756;
	default:	goto yy49;
	}
yy731:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy757;
	default:	goto yy49;
	}
yy732:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy758;
	default:	goto yy49;
	}
yy733:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy760;
	default:	goto yy49;
	}
yy734:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy762;
	default:	goto yy49;
	}
yy735:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy763;
	default:	goto yy49;
	}
yy736:
	yyaccept = 76;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy737;
	}
yy737:
#line 11369 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INSTRUCTIONS (context.location); }
#line 21827 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy738:
	yyaccept = 77;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy739;
	}
yy739:
#line 11371 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_INTERSECTION (context.location); }
#line 21901 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy740:
	yyaccept = 78;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy741;
	}
yy741:
#line 11372 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ISO646String (context.location); }
#line 21975 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy742:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'T':	goto yy765;
	default:	goto yy49;
	}
yy743:
	yyaccept = 79;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy744;
	}
yy744:
#line 11376 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NOT_A_NUMBER (context.location); }
#line 22056 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy745:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy766;
	default:	goto yy49;
	}
yy746:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'p':	goto yy768;
	default:	goto yy49;
	}
yy747:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy769;
	default:	goto yy49;
	}
yy748:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy771;
	default:	goto yy49;
	}
yy749:
	yyaccept = 80;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy772;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy750;
	}
yy750:
#line 11392 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID (context.location); }
#line 22158 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy751:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy773;
	default:	goto yy49;
	}
yy752:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy774;
	default:	goto yy49;
	}
yy753:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'i':	goto yy776;
	default:	goto yy49;
	}
yy754:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy777;
	default:	goto yy49;
	}
yy755:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy778;
	default:	goto yy49;
	}
yy756:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'A':	goto yy780;
	default:	goto yy49;
	}
yy757:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy781;
	default:	goto yy49;
	}
yy758:
	yyaccept = 81;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy759;
	}
yy759:
#line 11355 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_EXTENSIBILITY (context.location); }
#line 22281 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy760:
	yyaccept = 82;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy761;
	}
yy761:
#line 11360 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralString (context.location); }
#line 22355 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy762:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'm':	goto yy782;
	default:	goto yy49;
	}
yy763:
	yyaccept = 83;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy764;
	}
yy764:
#line 11361 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GraphicString (context.location); }
#line 22436 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy765:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'Y':	goto yy783;
	default:	goto yy49;
	}
yy766:
	yyaccept = 84;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy767;
	}
yy767:
#line 11378 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_NumericString (context.location); }
#line 22517 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy768:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 't':	goto yy785;
	default:	goto yy49;
	}
yy769:
	yyaccept = 85;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy770;
	}
yy770:
#line 11387 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PLUS_INFINITY (context.location); }
#line 22598 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy771:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy786;
	default:	goto yy49;
	}
yy772:
	yych = *++context.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	case 'I':	goto yy787;
	default:	goto yy101;
	}
yy773:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'E':	goto yy788;
	default:	goto yy49;
	}
yy774:
	yyaccept = 86;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy775;
	}
yy775:
#line 11402 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TeletexString (context.location); }
#line 22754 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy776:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'n':	goto yy789;
	default:	goto yy49;
	}
yy777:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy790;
	default:	goto yy49;
	}
yy778:
	yyaccept = 87;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy779;
	}
yy779:
#line 11414 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VisibleString (context.location); }
#line 22842 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy780:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'X':	goto yy792;
	default:	goto yy49;
	}
yy781:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'O':	goto yy794;
	default:	goto yy49;
	}
yy782:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'e':	goto yy795;
	default:	goto yy49;
	}
yy783:
	yyaccept = 88;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy784;
	}
yy784:
#line 11375 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_MINUS_INFINITY (context.location); }
#line 22937 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy785:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'o':	goto yy797;
	default:	goto yy49;
	}
yy786:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy798;
	default:	goto yy49;
	}
yy787:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy800;
	default:	goto yy49;
	}
yy788:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'R':	goto yy801;
	default:	goto yy49;
	}
yy789:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'g':	goto yy803;
	default:	goto yy49;
	}
yy790:
	yyaccept = 89;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy791;
	}
yy791:
#line 11413 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_VideotexString (context.location); }
#line 23046 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy792:
	yyaccept = 90;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy793;
	}
yy793:
#line 11325 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ABSTRACT_SYNTAX (context.location); }
#line 23120 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy794:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'L':	goto yy805;
	default:	goto yy49;
	}
yy795:
	yyaccept = 91;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy796;
	}
yy796:
#line 11359 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_GeneralizedTime (context.location); }
#line 23201 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy797:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'r':	goto yy807;
	default:	goto yy49;
	}
yy798:
	yyaccept = 92;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy799;
	}
yy799:
#line 11389 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_PrintableString (context.location); }
#line 23282 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy800:
	yyaccept = 2;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case 'I':	goto yy809;
	default:	goto yy49;
	}
yy801:
	yyaccept = 93;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy802;
	}
yy802:
#line 11406 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_TYPE_IDENTIFIER (context.location); }
#line 23363 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy803:
	yyaccept = 94;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy804;
	}
yy804:
#line 11410 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_UniversalString (context.location); }
#line 23437 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy805:
	yyaccept = 95;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy806;
	}
yy806:
#line 11349 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ENCODING_CONTROL (context.location); }
#line 23511 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy807:
	yyaccept = 96;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy808;
	}
yy808:
#line 11380 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_ObjectDescriptor (context.location); }
#line 23585 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
yy809:
	yyaccept = 97;
	yych = *(YYMARKER = ++context.cursor);
	switch (yych) {
	case '-':	goto yy103;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy48;
	default:	goto yy810;
	}
yy810:
#line 11393 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"
	{ context.location.columns(context.cursor - start); return asn1_parser::make_RELATIVE_OID_IRI (context.location); }
#line 23659 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.hpp"
}
#line 11468 "/home/styler/git/fast_ber/build/src/autogen/asn_compiler.re"

    }
}
